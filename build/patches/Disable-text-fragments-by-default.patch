From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sat, 22 Aug 2020 12:46:20 +0200
Subject: Disable text fragments by default

Revert "[Text Fragment] Unflag fragment directive removal."
FILE:Disable-text-fragments-by-default.patch
---
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 52aba00b94..fbe0f7696d 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -4955,6 +4955,7 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kEnableLayoutNGTableDescription, kOsAll,
      FEATURE_VALUE_TYPE(blink::features::kLayoutNGTable)},
 
+     // will override runtime text fragment identifiers setting too
     {"enable-lazy-image-loading",
      flag_descriptions::kEnableLazyImageLoadingName,
      flag_descriptions::kEnableLazyImageLoadingDescription, kOsAll,
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index f0583f813e..09688d88db 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -2338,6 +2338,11 @@
     "owners": [ "atotic@google.com" ],
     "expiry_milestone": 96
   },
+  {
+    "name": "enable-text-fragment-anchor",
+    "owners": [ "bokan", "input-dev" ],
+    "expiry_milestone": -1
+  },
   {
     "name": "enable-tls13-early-data",
     "owners": [ "svaldez" ],
diff --git a/chrome/browser/ui/prefs/prefs_tab_helper.cc b/chrome/browser/ui/prefs/prefs_tab_helper.cc
index 5b89ba63e7..7f158a6595 100644
--- a/chrome/browser/ui/prefs/prefs_tab_helper.cc
+++ b/chrome/browser/ui/prefs/prefs_tab_helper.cc
@@ -360,7 +360,7 @@ void PrefsTabHelper::RegisterProfilePrefs(
       !base::FeatureList::IsEnabled(features::kNoReferrers));
   registry->RegisterBooleanPref(prefs::kEnableEncryptedMedia, true);
   registry->RegisterBooleanPref(prefs::kEnableDRM, true);
-  registry->RegisterBooleanPref(prefs::kScrollToTextFragmentEnabled, true);
+  registry->RegisterBooleanPref(prefs::kScrollToTextFragmentEnabled, false);
 #if defined(OS_ANDROID)
   registry->RegisterDoublePref(prefs::kWebKitFontScaleFactor, 1.0);
   registry->RegisterBooleanPref(prefs::kWebKitForceEnableZoom,
diff --git a/content/child/runtime_features.cc b/content/child/runtime_features.cc
index cdf5eaed7e..b38e898c62 100644
--- a/content/child/runtime_features.cc
+++ b/content/child/runtime_features.cc
@@ -273,6 +273,7 @@ void SetRuntimeFeaturesFromChromiumFeatures() {
     {wf::EnableBackgroundFetch, features::kBackgroundFetch},
     {wf::EnableForcedColors, features::kForcedColors},
     {wf::EnableFractionalScrollOffsets, features::kFractionalScrollOffsets},
+    // will set the TextFragmentIdentifiers runtime feature
 #if defined(OS_ANDROID)
     {wf::EnableGetDisplayMedia, features::kUserMediaScreenCapturing},
 #endif
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
index e0b59bb977..84871c7447 100644
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -301,7 +301,7 @@ const base::Feature kStorageAccessAPI{"StorageAccessAPI",
 
 // Enable text snippets in URL fragments. https://crbug.com/919204.
 const base::Feature kTextFragmentAnchor{"TextFragmentAnchor",
-                                        base::FEATURE_ENABLED_BY_DEFAULT};
+                                        base::FEATURE_DISABLED_BY_DEFAULT};
 
 // File handling integration. https://crbug.com/829689
 const base::Feature kFileHandlingAPI{"FileHandlingAPI",
diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index 977b5f7429..2a0ca4817a 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -4383,6 +4383,10 @@ void Document::SetURL(const KURL& url) {
     }
   }
 
+  // If text fragment identifiers are enabled, we strip the fragment directive
+  // from the URL fragment.
+  // E.g. "#id:~:text=a" --> "#id"
+  if (RuntimeEnabledFeatures::TextFragmentIdentifiersEnabled(domWindow())) {
   // Strip the fragment directive from the URL fragment. E.g. "#id:~:text=a"
   // --> "#id". See https://github.com/WICG/scroll-to-text-fragment.
   String fragment = new_url.FragmentIdentifier();
@@ -4396,6 +4400,7 @@ void Document::SetURL(const KURL& url) {
     else
       new_url.SetFragmentIdentifier(fragment.Substring(0, start_pos));
   }
+  }
 
   url_ = new_url;
   access_entry_from_url_ = nullptr;
diff --git a/third_party/blink/renderer/core/page/scrolling/text_fragment_anchor_metrics_test.cc b/third_party/blink/renderer/core/page/scrolling/text_fragment_anchor_metrics_test.cc
index f1300e5bfb..ac0d73ccfa 100644
--- a/third_party/blink/renderer/core/page/scrolling/text_fragment_anchor_metrics_test.cc
+++ b/third_party/blink/renderer/core/page/scrolling/text_fragment_anchor_metrics_test.cc
@@ -1254,34 +1254,25 @@ TEST_P(TextFragmentRelatedMetricTest, ElementIdSuccessFailureCounts) {
   // result of the element-id fragment if a text directive is successfully
   // parsed. If the feature is off we treat the text directive as an element-id
   // and should count the result.
+  const int kUncountedOrNotFound = GetParam() ? kUncounted : kNotFound;
   const int kUncountedOrFound = GetParam() ? kUncounted : kFound;
 
-  // Note: We'll strip the fragment directive (i.e. anything after :~:) leaving
-  // just the element anchor. The fragment directive stripping behavior is now
-  // shipped unflagged so it should always be performed.
+  // When the TextFragmentAnchors feature is on, we'll strip the fragment
+  // directive (i.e. anything after :~:) leaving just the element anchor.
+  const int kFoundIfDirectiveStripped = GetParam() ? kFound : kNotFound;
 
   Vector<std::pair<String, int>> test_cases = {
       {"", kUncounted},
       {"#element", kFound},
       {"#doesntExist", kNotFound},
-      // `:~:foo` will be stripped so #element will be found and #doesntexist
-      // ##element will be not found.
-      {"#element:~:foo", kFound},
+      {"#element:~:foo", kFoundIfDirectiveStripped},
       {"#doesntexist:~:foo", kNotFound},
       {"##element", kNotFound},
-      // If the feature  is on, `:~:text=` will parse so we shouldn't count.
-      // Otherwise, it'll just be stripped so #element will be found.
-      {"#element:~:text=doesntexist", kUncountedOrFound},
-      {"#element:~:text=page", kUncountedOrFound},
-      // If the feature is on, `:~:text` is parsed so we don't count. If it's
-      // off the entire fragment is a directive that's stripped so no search is
-      // performed either.
-      {"#:~:text=doesntexist", kUncounted},
-      {"#:~:text=page", kUncounted},
-      {"#:~:text=name", kUncounted},
-      // If the feature is enabled, `:~:text` parses and we don't count the
-      // element-id. If the feature is off, we still strip the :~: directive
-      // and the remaining fragment does match an element id.
+      {"#element:~:text=doesntexist", kUncountedOrNotFound},
+      {"#element:~:text=page", kUncountedOrNotFound},
+      {"#:~:text=doesntexist", kUncountedOrNotFound},
+      {"#:~:text=page", kUncountedOrNotFound},
+      {"#:~:text=name", kUncountedOrFound},
       {"#element:~:text=name", kUncountedOrFound}};
 
   const int kNotFoundSample = 0;
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
index fb78b828c1..b0c28f8cce 100644
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -1973,8 +1973,7 @@
     },
     {
       name: "TextFragmentIdentifiers",
-      origin_trial_feature_name: "TextFragmentIdentifiers",
-      status: "stable",
+      origin_trial_feature_name: "TextFragmentIdentifiers"
     },
     {
       name: "ThirdPartyOriginTrials",
