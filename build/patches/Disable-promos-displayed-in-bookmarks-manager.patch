From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sat, 10 Nov 2018 17:20:21 +0100
Subject: Disable promos displayed in bookmarks manager

Remove personalized signin promo view from
bookmarks, never reach signin thresholds.
---
 .../bookmarks/BookmarkItemsAdapter.java       |  29 +----
 .../bookmarks/BookmarkPromoHeader.java        | 123 +-----------------
 2 files changed, 4 insertions(+), 148 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkItemsAdapter.java
@@ -51,7 +51,6 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
     @ViewType
     private int mPromoHeaderType = ViewType.INVALID;
     private BookmarkDelegate mDelegate;
-    private BookmarkPromoHeader mPromoHeaderManager;
     private String mSearchText;
     private BookmarkId mCurrentFolder;
     private ProfileSyncService mProfileSyncService;
@@ -183,9 +182,9 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
             case ViewType.PERSONALIZED_SIGNIN_PROMO:
                 // fall through
             case ViewType.PERSONALIZED_SYNC_PROMO:
-                return mPromoHeaderManager.createPersonalizedSigninAndSyncPromoHolder(parent);
+                return null;
             case ViewType.SYNC_PROMO:
-                return mPromoHeaderManager.createSyncPromoHolder(parent);
+                return null;
             case ViewType.SECTION_HEADER:
                 return createSectionHeaderViewHolder(parent, viewType);
             case ViewType.FOLDER:
@@ -205,11 +204,7 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
     @Override
     public void onBindViewHolder(ViewHolder holder, int position) {
         if (holder.getItemViewType() == ViewType.PERSONALIZED_SIGNIN_PROMO) {
-            PersonalizedSigninPromoView view = (PersonalizedSigninPromoView) holder.itemView;
-            mPromoHeaderManager.setupPersonalizedSigninPromo(view);
         } else if (holder.getItemViewType() == ViewType.PERSONALIZED_SYNC_PROMO) {
-            PersonalizedSigninPromoView view = (PersonalizedSigninPromoView) holder.itemView;
-            mPromoHeaderManager.setupPersonalizedSyncPromo(view);
         } else if (holder.getItemViewType() == ViewType.SECTION_HEADER) {
             bindSectionHeaderViewHolder(holder.itemView, getItemByPosition(position));
         } else if (BookmarkListEntry.isBookmarkEntry(holder.getItemViewType())) {
@@ -262,7 +257,6 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
             case ViewType.PERSONALIZED_SIGNIN_PROMO:
                 // fall through
             case ViewType.PERSONALIZED_SYNC_PROMO:
-                mPromoHeaderManager.detachPersonalizePromoView();
                 break;
             default:
                 // Other view holders don't have special recycling code.
@@ -288,7 +282,6 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
             updateHeader(!topLevelFoldersShowing());
         };
 
-        mPromoHeaderManager = new BookmarkPromoHeader(mContext, promoHeaderChangeAction);
         populateTopLevelFoldersList();
 
         mElements = new ArrayList<>();
@@ -303,7 +296,6 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
         mDelegate.getModel().removeObserver(mBookmarkModelObserver);
         mDelegate.getSelectionDelegate().removeObserver(this);
         mDelegate = null;
-        mPromoHeaderManager.destroy();
         mProfileSyncService.removeSyncStateChangedListener(this);
     }
 
@@ -426,23 +418,6 @@ class BookmarkItemsAdapter extends DragReorderableListAdapter<BookmarkListEntry>
             return;
         } else if (currentUIState == BookmarkUIState.STATE_SEARCHING) {
             mPromoHeaderType = ViewType.INVALID;
-        } else {
-            switch (mPromoHeaderManager.getPromoState()) {
-                case BookmarkPromoHeader.PromoState.PROMO_NONE:
-                    mPromoHeaderType = ViewType.INVALID;
-                    break;
-                case BookmarkPromoHeader.PromoState.PROMO_SIGNIN_PERSONALIZED:
-                    mPromoHeaderType = ViewType.PERSONALIZED_SIGNIN_PROMO;
-                    break;
-                case BookmarkPromoHeader.PromoState.PROMO_SYNC_PERSONALIZED:
-                    mPromoHeaderType = ViewType.PERSONALIZED_SYNC_PROMO;
-                    break;
-                case BookmarkPromoHeader.PromoState.PROMO_SYNC:
-                    mPromoHeaderType = ViewType.SYNC_PROMO;
-                    break;
-                default:
-                    assert false : "Unexpected value for promo state!";
-            }
         }
 
         boolean willShowPromo = hasPromoHeader();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPromoHeader.java
@@ -43,9 +43,7 @@ import java.lang.annotation.RetentionPolicy;
  * Class that manages all the logic and UI behind the signin promo header in the bookmark
  * content UI. The header is shown only on certain situations, (e.g., not signed in).
  */
-class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener,
-                                     SignInStateObserver, ProfileDataCache.Observer,
-                                     AccountsChangeObserver {
+class BookmarkPromoHeader implements ProfileDataCache.Observer, AccountsChangeObserver {
     /**
      * Specifies the various states in which the Bookmarks promo can be.
      */
@@ -65,14 +63,12 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
     private static @Nullable @PromoState Integer sPromoStateForTests;
 
     private final Context mContext;
-    private final SigninManager mSignInManager;
     private final AccountManagerFacade mAccountManagerFacade;
     private final Runnable mPromoHeaderChangeAction;
 
     private @Nullable ProfileDataCache mProfileDataCache;
     private final @Nullable SigninPromoController mSigninPromoController;
     private @PromoState int mPromoState;
-    private final @Nullable ProfileSyncService mProfileSyncService;
 
     /**
      * Initializes the class. Note that this will start listening to signin related events and
@@ -82,13 +78,6 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
         mContext = context;
         mPromoHeaderChangeAction = promoHeaderChangeAction;
 
-        mProfileSyncService = ProfileSyncService.get();
-        if (mProfileSyncService != null) mProfileSyncService.addSyncStateChangedListener(this);
-
-        mSignInManager = IdentityServicesProvider.get().getSigninManager(
-                Profile.getLastUsedRegularProfile());
-        mSignInManager.addSignInStateObserver(this);
-
         mAccountManagerFacade = AccountManagerFacadeProvider.getInstance();
 
         mPromoState = calculatePromoState();
@@ -114,15 +103,11 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
      * Clean ups the class. Must be called once done using this class.
      */
     void destroy() {
-        if (mProfileSyncService != null) mProfileSyncService.removeSyncStateChangedListener(this);
-
         if (mSigninPromoController != null) {
             mAccountManagerFacade.removeObserver(this);
             mProfileDataCache.removeObserver(this);
             mSigninPromoController.onPromoDestroyed();
         }
-
-        mSignInManager.removeSignInStateObserver(this);
     }
 
     /**
@@ -133,18 +118,6 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
         return mPromoState;
     }
 
-    /**
-     * @return Personalized signin promo header {@link ViewHolder} instance that can be used with
-     *         {@link RecyclerView}.
-     */
-    ViewHolder createPersonalizedSigninAndSyncPromoHolder(ViewGroup parent) {
-        View view = LayoutInflater.from(mContext).inflate(
-                R.layout.personalized_signin_promo_view_bookmarks, parent, false);
-
-        // ViewHolder is abstract and it cannot be instantiated directly.
-        return new ViewHolder(view) {};
-    }
-
     /**
      * @return Sync promo header {@link ViewHolder} instance that can be used with
      *         {@link RecyclerView}.
@@ -156,54 +129,11 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
         return new ViewHolder(view) {};
     }
 
-    /**
-     * Configures the personalized signin promo and records promo impressions.
-     * @param view The view to be configured.
-     */
-    void setupPersonalizedSigninPromo(PersonalizedSigninPromoView view) {
-        SigninPromoUtil.setupSigninPromoViewFromCache(mSigninPromoController, mProfileDataCache,
-                view, this::setPersonalizedSigninPromoDeclined);
-    }
-
-    void setupPersonalizedSyncPromo(PersonalizedSigninPromoView view) {
-        SigninPromoUtil.setupSyncPromoViewFromCache(mSigninPromoController, mProfileDataCache, view,
-                this::setPersonalizedSigninPromoDeclined);
-    }
-
-    /**
-     * Detaches the previously configured {@link PersonalizedSigninPromoView}.
-     */
-    void detachPersonalizePromoView() {
-        if (mSigninPromoController != null) mSigninPromoController.detach();
-    }
-
-    /**
-     * Saves that the personalized signin promo was declined and updates the UI.
-     */
-    private void setPersonalizedSigninPromoDeclined() {
-        SharedPreferencesManager.getInstance().writeBoolean(
-                ChromePreferenceKeys.SIGNIN_PROMO_PERSONALIZED_DECLINED, true);
-        mPromoState = calculatePromoState();
-        triggerPromoUpdate();
-    }
-
-    /**
-     * @return Whether the user declined the personalized signin promo.
-     */
-    @VisibleForTesting
-    static boolean wasPersonalizedSigninPromoDeclined() {
-        return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.SIGNIN_PROMO_PERSONALIZED_DECLINED, false);
-    }
-
     /**
      * @return Whether the personalized signin promo should be shown to user.
      */
     private boolean shouldShowBookmarkSigninPromo() {
-        return mSignInManager.isSignInAllowed()
-                && SigninPromoController.hasNotReachedImpressionLimit(
-                        SigninAccessPoint.BOOKMARK_MANAGER)
-                && !wasPersonalizedSigninPromoDeclined();
+        return false;
     }
 
     private @PromoState int calculatePromoState() {
@@ -211,57 +141,9 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
             return sPromoStateForTests;
         }
 
-        if (mProfileSyncService == null) {
-            // |mProfileSyncService| will remain null until the next browser startup, so no sense in
-            // offering any promo.
-            return PromoState.PROMO_NONE;
-        }
-
-        if (!mProfileSyncService.isSyncAllowedByPlatform()) {
-            return PromoState.PROMO_NONE;
-        }
-
-        if (!mSignInManager.getIdentityManager().hasPrimaryAccount()) {
-            if (!shouldShowBookmarkSigninPromo()) {
-                return PromoState.PROMO_NONE;
-            }
-            CoreAccountInfo primaryAccount =
-                    mSignInManager.getIdentityManager().getPrimaryAccountInfo(
-                            ConsentLevel.NOT_REQUIRED);
-            return primaryAccount == null ? PromoState.PROMO_SIGNIN_PERSONALIZED
-                                          : PromoState.PROMO_SYNC_PERSONALIZED;
-        }
-
-        boolean impressionLimitNotReached =
-                SharedPreferencesManager.getInstance().readInt(
-                        ChromePreferenceKeys.SIGNIN_AND_SYNC_PROMO_SHOW_COUNT)
-                < MAX_SIGNIN_AND_SYNC_PROMO_SHOW_COUNT;
-        if (!mProfileSyncService.isSyncRequested() && impressionLimitNotReached) {
-            return PromoState.PROMO_SYNC;
-        }
         return PromoState.PROMO_NONE;
     }
 
-    // ProfileSyncService.SyncStateChangedListener implementation.
-    @Override
-    public void syncStateChanged() {
-        mPromoState = calculatePromoState();
-        triggerPromoUpdate();
-    }
-
-    // SignInStateObserver implementation.
-    @Override
-    public void onSignedIn() {
-        mPromoState = calculatePromoState();
-        triggerPromoUpdate();
-    }
-
-    @Override
-    public void onSignedOut() {
-        mPromoState = calculatePromoState();
-        triggerPromoUpdate();
-    }
-
     // ProfileDataCache.Observer implementation.
     @Override
     public void onProfileDataUpdated(String accountEmail) {
@@ -275,7 +157,6 @@ class BookmarkPromoHeader implements ProfileSyncService.SyncStateChangedListener
     }
 
     private void triggerPromoUpdate() {
-        detachPersonalizePromoView();
         mPromoHeaderChangeAction.run();
     }
 
-- 
2.17.1

