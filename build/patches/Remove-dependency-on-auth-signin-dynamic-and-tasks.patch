From: Wengling Chen <feiyu2817@gmail.com>
Date: Sat, 2 Nov 2019 08:58:19 +0100
Subject: Remove dependency on auth, signin, dynamic and tasks

---
 chrome/android/BUILD.gn                       | 10 ---
 .../features/cablev2_authenticator/BUILD.gn   |  2 -
 chrome/android/java/AndroidManifest.xml       |  9 --
 .../org/chromium/chrome/browser/AppHooks.java | 14 +---
 .../browser/PlayServicesVersionInfo.java      | 12 +--
 .../component_updater/UpdateScheduler.java    |  1 -
 .../gcore/ChromeGoogleApiClientImpl.java      | 25 +-----
 .../browser/gcore/GoogleApiClientHelper.java  | 82 +------------------
 .../browser/omaha/UpdateStatusProvider.java   | 10 +--
 chrome/test/android/BUILD.gn                  |  3 -
 components/background_task_scheduler/BUILD.gn |  4 -
 .../internal/BUILD.gn                         |  7 --
 components/externalauth/android/BUILD.gn      |  4 -
 .../externalauth/ExternalAuthUtils.java       | 40 +--------
 .../UserRecoverableErrorHandler.java          | 22 +----
 .../media_router/BrowserMediaRouter.java      | 18 +---
 .../signin/core/browser/android/BUILD.gn      |  3 -
 .../signin/GmsAvailabilityException.java      |  4 +-
 .../signin/SystemAccountManagerDelegate.java  |  1 -
 content/public/android/BUILD.gn               |  3 -
 .../content/browser/sms/Wrappers.java         |  2 -
 content/test/BUILD.gn                         |  3 -
 device/BUILD.gn                               |  2 -
 remoting/android/client_java_tmpl.gni         |  2 -
 services/BUILD.gn                             |  3 -
 services/device/geolocation/BUILD.gn          |  3 -
 services/shape_detection/BUILD.gn             |  3 -
 third_party/android_deps/BUILD.gn             | 64 ---------------
 weblayer/shell/android/BUILD.gn               |  1 -
 29 files changed, 15 insertions(+), 342 deletions(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -275,9 +275,6 @@ android_library("chrome_java") {
     ":partner_location_descriptor_proto_java",
     ":update_proto_java",
     ":usage_stats_proto_java",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
-    "$google_play_services_package:google_play_services_tasks_java",
     "//base:base_java",
     "//base:jni_java",
     "//cc:cc_java",
@@ -504,7 +501,6 @@ android_library("chrome_java") {
     "//third_party/android_deps:androidx_recyclerview_recyclerview_java",
     "//third_party/android_deps:androidx_viewpager2_viewpager2_java",
     "//third_party/android_deps:androidx_viewpager_viewpager_java",
-    "//third_party/android_deps:chromium_play_services_availability_java",
     "//third_party/android_deps:com_google_code_findbugs_jsr305_java",
     "//third_party/android_deps:com_google_guava_listenablefuture_java",
     "//third_party/android_deps:dagger_java",
@@ -772,8 +768,6 @@ junit_binary("chrome_junit_tests") {
     ":chrome_app_java_resources",
     ":chrome_java",
     ":partner_location_descriptor_proto_java",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
     "//base:base_java_test_support",
     "//base:base_junit_test_support",
@@ -929,7 +923,6 @@ junit_binary("chrome_junit_tests") {
     "//third_party/android_deps:androidx_swiperefreshlayout_swiperefreshlayout_java",
     "//third_party/android_deps:androidx_test_core_java",
     "//third_party/android_deps:androidx_test_runner_java",
-    "//third_party/android_deps:chromium_play_services_availability_shadows_java",
     "//third_party/android_deps:com_google_guava_listenablefuture_java",
     "//third_party/android_deps:com_googlecode_java_diff_utils_diffutils_java",
     "//third_party/android_deps:dagger_java",
@@ -1014,9 +1007,6 @@ android_library("chrome_test_java") {
     ":chrome_app_java_resources",
     ":chrome_test_util_java",
     ":partner_location_descriptor_proto_java",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
-    "$google_play_services_package:google_play_services_tasks_java",
     "//base:base_java",
     "//base:base_java_test_support",
     "//base:jni_java",
diff --git a/chrome/android/features/cablev2_authenticator/BUILD.gn b/chrome/android/features/cablev2_authenticator/BUILD.gn
--- a/chrome/android/features/cablev2_authenticator/BUILD.gn
+++ b/chrome/android/features/cablev2_authenticator/BUILD.gn
@@ -17,8 +17,6 @@ android_library("java") {
 
   deps = [
     ":java_resources",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_tasks_java",
     "//base:base_java",
     "//base:jni_java",
     "//content/public/android:content_java",
diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -764,15 +764,6 @@ by a child template that "extends" this file.
             </intent-filter>
         </activity>
 
-        <!-- Activity for dispatching intents to Instant Apps. -->
-        <activity
-            android:name="org.chromium.chrome.browser.instantapps.AuthenticatedProxyActivity"
-            android:exported="false"
-            android:theme="@android:style/Theme.NoDisplay"
-            android:noHistory="true"
-            android:excludeFromRecents="true">
-        </activity>
-
         <activity
             android:name="org.chromium.chrome.browser.vr.VrCancelAnimationActivity"
             android:exported="false"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
@@ -10,9 +10,6 @@ import android.content.pm.PackageManager;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.chrome.browser.banners.AppDetailsDelegate;
@@ -294,16 +291,7 @@ public abstract class AppHooks {
      * same as {@link GoogleApiAvailability#isGooglePlayServicesAvailable()}.
      */
     public int isGoogleApiAvailableWithMinApkVersion(int minApkVersion) {
-        try {
-            PackageInfo gmsPackageInfo =
-                    ContextUtils.getApplicationContext().getPackageManager().getPackageInfo(
-                            GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE, /* flags= */ 0);
-            int apkVersion = gmsPackageInfo.versionCode;
-            if (apkVersion >= minApkVersion) return ConnectionResult.SUCCESS;
-        } catch (PackageManager.NameNotFoundException e) {
-            return ConnectionResult.SERVICE_MISSING;
-        }
-        return ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED;
+        return 1;  /* SERVICE_MISSING*/
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java b/chrome/android/java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java
@@ -7,8 +7,6 @@ package org.chromium.chrome.browser;
 import android.content.Context;
 import android.content.pm.PackageManager;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.components.externalauth.ExternalAuthUtils;
@@ -29,7 +27,7 @@ public class PlayServicesVersionInfo {
     public static String getGmsInfo() {
         Context context = ContextUtils.getApplicationContext();
 
-        final long sdkVersion = GoogleApiAvailability.GOOGLE_PLAY_SERVICES_VERSION_CODE;
+        final long sdkVersion = 12600000;
         final long installedGmsVersion = getApkVersionNumber(context);
 
         final String accessType;
@@ -53,12 +51,6 @@ public class PlayServicesVersionInfo {
      *         package is not found.
      */
     public static int getApkVersionNumber(Context context) {
-        try {
-            return context.getPackageManager()
-                    .getPackageInfo(GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE, 0)
-                    .versionCode;
-        } catch (PackageManager.NameNotFoundException e) {
-            return 0;
-        }
+        return 0;
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/component_updater/UpdateScheduler.java b/chrome/android/java/src/org/chromium/chrome/browser/component_updater/UpdateScheduler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/component_updater/UpdateScheduler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/component_updater/UpdateScheduler.java
@@ -14,7 +14,6 @@ import org.chromium.components.background_task_scheduler.BackgroundTask.TaskFini
 import org.chromium.components.background_task_scheduler.BackgroundTaskSchedulerFactory;
 import org.chromium.components.background_task_scheduler.TaskIds;
 import org.chromium.components.background_task_scheduler.TaskInfo;
-import org.chromium.gms.ChromiumPlayServicesAvailability;
 
 /** Java-side implementation of the component update scheduler using the BackgroundTaskScheduler. */
 @JNINamespace("component_updater")
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClientImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClientImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClientImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClientImpl.java
@@ -6,9 +6,6 @@ package org.chromium.chrome.browser.gcore;
 
 import android.content.Context;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.api.GoogleApiClient;
-
 import org.chromium.base.Log;
 import org.chromium.base.TraceEvent;
 import org.chromium.components.externalauth.ExternalAuthUtils;
@@ -22,7 +19,6 @@ public class ChromeGoogleApiClientImpl implements ChromeGoogleApiClient {
     private static final String TAG = "Icing";
 
     private final Context mApplicationContext;
-    private final GoogleApiClient mClient;
     private final ExternalAuthUtils mExternalAuthUtils;
 
     /**
@@ -32,10 +28,9 @@ public class ChromeGoogleApiClientImpl implements ChromeGoogleApiClient {
      * @param requireFirstPartyBuild true if the given client can only be used in a first-party
      *            build.
      */
-    public ChromeGoogleApiClientImpl(Context context, GoogleApiClient client,
+    public ChromeGoogleApiClientImpl(Context context,
             boolean requireFirstPartyBuild) {
         mApplicationContext = context.getApplicationContext();
-        mClient = client;
         mExternalAuthUtils = ExternalAuthUtils.getInstance();
         if (requireFirstPartyBuild && !mExternalAuthUtils.isChromeGoogleSigned()) {
             throw new IllegalStateException("GoogleApiClient requires first-party build");
@@ -44,7 +39,6 @@ public class ChromeGoogleApiClientImpl implements ChromeGoogleApiClient {
 
     @Override
     public void disconnect() {
-        mClient.disconnect();
     }
 
     @Override
@@ -60,24 +54,11 @@ public class ChromeGoogleApiClientImpl implements ChromeGoogleApiClient {
     @Override
     public boolean connectWithTimeout(long timeout) {
         TraceEvent.begin("ChromeGoogleApiClientImpl:connectWithTimeout");
-        try {
-            ConnectionResult result = mClient.blockingConnect(timeout, TimeUnit.MILLISECONDS);
-            if (!result.isSuccess()) {
-                Log.e(TAG, "Connection to GmsCore unsuccessful. Error %d", result.getErrorCode());
-            } else {
-                Log.d(TAG, "Connection to GmsCore successful.");
-            }
-            return result.isSuccess();
-        } finally {
-            TraceEvent.end("ChromeGoogleApiClientImpl:connectWithTimeout");
-        }
+        TraceEvent.end("ChromeGoogleApiClientImpl:connectWithTimeout");
+        return false;
     }
 
     public Context getApplicationContext() {
         return mApplicationContext;
     }
-
-    public GoogleApiClient getApiClient() {
-        return mClient;
-    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/gcore/GoogleApiClientHelper.java b/chrome/android/java/src/org/chromium/chrome/browser/gcore/GoogleApiClientHelper.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/gcore/GoogleApiClientHelper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/gcore/GoogleApiClientHelper.java
@@ -7,11 +7,6 @@ package org.chromium.chrome.browser.gcore;
 import android.os.Bundle;
 import android.os.Handler;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.api.GoogleApiClient;
-import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
-import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
-
 import org.chromium.base.ApplicationStatus;
 import org.chromium.base.ApplicationStatus.ApplicationStateListener;
 import org.chromium.base.Log;
@@ -67,29 +62,15 @@ import org.chromium.base.ThreadUtils;
  * }
  * </pre>
  */
-public class GoogleApiClientHelper
-        implements OnConnectionFailedListener, ConnectionCallbacks {
+public class GoogleApiClientHelper {
     private static final String TAG = "GCore";
 
     private int mResolutionAttempts;
     private boolean mWasConnectedBefore;
     private final Handler mHandler = new Handler(ThreadUtils.getUiThreadLooper());
-    private final GoogleApiClient mClient;
     private long mDisconnectionDelayMs;
     private Runnable mPendingDisconnect;
 
-    /**
-     * Creates a helper and enrolls it in the various connection management features.
-     * See the class documentation for {@link GoogleApiClientHelper} for more information.
-     *
-     * @param client The client to wrap.
-     */
-    public GoogleApiClientHelper(GoogleApiClient client) {
-        mClient = client;
-        enableConnectionRetrying(true);
-        enableLifecycleManagement(true);
-    }
-
     /**
      * Opts in or out of lifecycle management. The client's connection will be closed and reopened
      * when Chrome goes in and out of background.
@@ -116,13 +97,6 @@ public class GoogleApiClientHelper
      * Enabling or disabling it while it is already enabled or disabled has no effect.
      */
     public void enableConnectionRetrying(boolean enabled) {
-        if (enabled) {
-            mClient.registerConnectionCallbacks(this);
-            mClient.registerConnectionFailedListener(this);
-        } else {
-            mClient.unregisterConnectionCallbacks(this);
-            mClient.unregisterConnectionFailedListener(this);
-        }
     }
 
     /**
@@ -155,21 +129,11 @@ public class GoogleApiClientHelper
         // Cancel and reschedule the disconnection if we are in the background. We do it early to
         // avoid race conditions between a disconnect on the UI thread and the connect below.
         if (!ApplicationStatus.hasVisibleActivities()) scheduleDisconnection();
-
-        // The client might be disconnected if we were idle in the background for too long.
-        if (!mClient.isConnected() && !mClient.isConnecting()) {
-            Log.d(TAG, "Reconnecting the client.");
-            mClient.connect();
-        }
     }
 
     void restoreConnectedState() {
         // If we go back to the foreground before a delayed disconnect happens, cancel it.
         cancelPendingDisconnection();
-
-        if (mWasConnectedBefore) {
-            mClient.connect();
-        }
     }
 
     /**
@@ -192,12 +156,6 @@ public class GoogleApiClientHelper
     }
 
     private void disconnect() {
-        if (mClient.isConnected() || mClient.isConnecting()) {
-            mWasConnectedBefore = true;
-        }
-
-        // We always call disconnect to abort possibly pending connection requests.
-        mClient.disconnect();
     }
 
     private void cancelPendingDisconnection() {
@@ -207,43 +165,7 @@ public class GoogleApiClientHelper
         mPendingDisconnect = null;
     }
 
-    @Override
-    public void onConnectionFailed(ConnectionResult result) {
-        if (!isErrorRecoverableByRetrying(result.getErrorCode())) {
-            Log.d(TAG, "Not retrying managed client connection. Unrecoverable error: %d",
-                    result.getErrorCode());
-            return;
-        }
-
-        if (mResolutionAttempts < ConnectedTask.RETRY_NUMBER_LIMIT) {
-            Log.d(TAG, "Retrying managed client connection. attempt %d/%d - errorCode: %d",
-                    mResolutionAttempts, ConnectedTask.RETRY_NUMBER_LIMIT, result.getErrorCode());
-            mResolutionAttempts += 1;
-
-            mHandler.postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    mClient.connect();
-                }
-            }, ConnectedTask.CONNECTION_RETRY_TIME_MS);
-        }
-    }
-
-    @Override
-    public void onConnected(Bundle connectionHint) {
-        mResolutionAttempts = 0;
-    }
-
-    @Override
-    public void onConnectionSuspended(int cause) {
-        // GoogleApiClient handles retrying on suspension itself. Logging in case it didn't succeed
-        // for some reason.
-        Log.w(TAG, "Managed client connection suspended. Cause: %d", cause);
-    }
-
     private static boolean isErrorRecoverableByRetrying(int errorCode) {
-        return errorCode == ConnectionResult.INTERNAL_ERROR
-                || errorCode == ConnectionResult.NETWORK_ERROR
-                || errorCode == ConnectionResult.SERVICE_UPDATING;
+        return false;
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
@@ -19,8 +19,6 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
-import com.google.android.gms.common.GooglePlayServicesUtil;
-
 import org.chromium.base.ActivityState;
 import org.chromium.base.ApplicationStatus;
 import org.chromium.base.ApplicationStatus.ActivityStateListener;
@@ -456,13 +454,7 @@ public class UpdateStatusProvider implements ActivityStateListener {
         }
 
         private boolean isGooglePlayStoreAvailable(Context context) {
-            try {
-                context.getPackageManager().getPackageInfo(
-                        GooglePlayServicesUtil.GOOGLE_PLAY_STORE_PACKAGE, 0);
-            } catch (PackageManager.NameNotFoundException e) {
-                return false;
-            }
-            return true;
+            return false;
         }
 
         private long getSize(StatFs statFs) {
diff --git a/chrome/test/android/BUILD.gn b/chrome/test/android/BUILD.gn
--- a/chrome/test/android/BUILD.gn
+++ b/chrome/test/android/BUILD.gn
@@ -260,8 +260,6 @@ android_library("chrome_java_test_support") {
   ]
 
   deps = [
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
     "//base:base_java_test_support",
     "//chrome/android:base_module_java",
@@ -315,7 +313,6 @@ android_library("chrome_java_test_support") {
     "//third_party/android_deps:androidx_fragment_fragment_java",
     "//third_party/android_deps:androidx_lifecycle_lifecycle_common_java",
     "//third_party/android_deps:androidx_recyclerview_recyclerview_java",
-    "//third_party/android_deps:chromium_play_services_availability_java",
     "//third_party/android_deps:com_google_code_findbugs_jsr305_java",
     "//third_party/android_deps:espresso_java",
     "//third_party/android_deps:material_design_java",
diff --git a/components/background_task_scheduler/BUILD.gn b/components/background_task_scheduler/BUILD.gn
--- a/components/background_task_scheduler/BUILD.gn
+++ b/components/background_task_scheduler/BUILD.gn
@@ -120,16 +120,12 @@ if (is_android) {
 
     deps = [
       ":background_task_scheduler_task_ids_java",
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
-      "$google_play_services_package:google_play_services_tasks_java",
       "internal:internal_java",
       "internal:proto_java",
       "//base:base_java",
       "//base:base_java_test_support",
       "//base:base_junit_test_support",
       "//components/background_task_scheduler:public_java",
-      "//third_party/android_deps:chromium_play_services_availability_shadows_java",
       "//third_party/android_deps:robolectric_all_java",
       "//third_party/junit",
       "//third_party/mockito:mockito_java",
diff --git a/components/background_task_scheduler/internal/BUILD.gn b/components/background_task_scheduler/internal/BUILD.gn
--- a/components/background_task_scheduler/internal/BUILD.gn
+++ b/components/background_task_scheduler/internal/BUILD.gn
@@ -25,15 +25,11 @@ if (is_android) {
 
     deps = [
       ":proto_java",
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
-      "$google_play_services_package:google_play_services_tasks_java",
       "//base:base_java",
       "//components/background_task_scheduler:background_task_scheduler_task_ids_java",
       "//components/background_task_scheduler:public_java",
       "//content/public/android:content_main_dex_java",
       "//third_party/android_deps:androidx_annotation_annotation_java",
-      "//third_party/android_deps:chromium_play_services_availability_java",
       "//third_party/android_deps:protobuf_lite_runtime_java",
     ]
   }
@@ -96,9 +92,6 @@ if (is_android) {
 
     deps = [
       ":internal_java",
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
-      "$google_play_services_package:google_play_services_tasks_java",
       "//base:base_java",
       "//base:base_java_test_support",
       "//components/background_task_scheduler:background_task_scheduler_task_ids_java",
diff --git a/components/externalauth/android/BUILD.gn b/components/externalauth/android/BUILD.gn
--- a/components/externalauth/android/BUILD.gn
+++ b/components/externalauth/android/BUILD.gn
@@ -27,14 +27,11 @@ android_library("google_delegate_public_impl_java") {
 android_library("java") {
   deps = [
     ":google_delegate_java",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
     "//components/embedder_support/android:browser_context_java",
     "//components/embedder_support/android:util_java",
     "//content/public/android:content_java",
     "//third_party/android_deps:androidx_annotation_annotation_java",
-    "//third_party/android_deps:chromium_play_services_availability_java",
   ]
   sources = [
     "java/src/org/chromium/components/externalauth/ExternalAuthUtils.java",
@@ -50,7 +47,6 @@ android_library("junit") {
 
   deps = [
     ":java",
-    "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
     "//base:base_java_test_support",
     "//base:base_junit_test_support",
diff --git a/components/externalauth/android/java/src/org/chromium/components/externalauth/ExternalAuthUtils.java b/components/externalauth/android/java/src/org/chromium/components/externalauth/ExternalAuthUtils.java
--- a/components/externalauth/android/java/src/org/chromium/components/externalauth/ExternalAuthUtils.java
+++ b/components/externalauth/android/java/src/org/chromium/components/externalauth/ExternalAuthUtils.java
@@ -15,16 +15,12 @@ import android.text.TextUtils;
 import androidx.annotation.VisibleForTesting;
 import androidx.annotation.WorkerThread;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.StrictModeContext;
 import org.chromium.base.task.PostTask;
 import org.chromium.components.embedder_support.util.Origin;
 import org.chromium.content_public.browser.UiThreadTaskTraits;
-import org.chromium.gms.ChromiumPlayServicesAvailability;
 
 /**
  * Utility class for external authentication tools.
@@ -170,9 +166,7 @@ public class ExternalAuthUtils {
      *         when it is updating.
      */
     public boolean isGooglePlayServicesMissing(final Context context) {
-        final int resultCode = checkGooglePlayServicesAvailable(context);
-        return (resultCode == ConnectionResult.SERVICE_MISSING
-                || resultCode == ConnectionResult.SERVICE_INVALID);
+        return false;
     }
 
     /**
@@ -187,20 +181,6 @@ public class ExternalAuthUtils {
      * @return true if and only if Google Play Services can be used
      */
     public boolean canUseGooglePlayServices(final UserRecoverableErrorHandler errorHandler) {
-        Context context = ContextUtils.getApplicationContext();
-        final int resultCode = checkGooglePlayServicesAvailable(context);
-        if (resultCode == ConnectionResult.SUCCESS) return true;
-        // resultCode is some kind of error.
-        Log.v(TAG, "Unable to use Google Play Services: %s", describeError(resultCode));
-        if (isUserRecoverableError(resultCode)) {
-            Runnable errorHandlerTask = new Runnable() {
-                @Override
-                public void run() {
-                    errorHandler.handleError(context, resultCode);
-                }
-            };
-            PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT, errorHandlerTask);
-        }
         return false;
     }
 
@@ -252,20 +232,6 @@ public class ExternalAuthUtils {
         return mGoogleDelegate;
     }
 
-    /**
-     * Invokes whatever external code is necessary to check if Google Play Services is available
-     * and returns the code produced by the attempt. Subclasses can override to force the behavior
-     * one way or another, or to change the way that the check is performed.
-     * @param context The current context.
-     * @return The code produced by calling the external code
-     */
-    protected int checkGooglePlayServicesAvailable(final Context context) {
-        // TODO(crbug.com/577190): Temporarily allowing disk access until more permanent fix is in.
-        try (StrictModeContext ignored = StrictModeContext.allowDiskWrites()) {
-            return ChromiumPlayServicesAvailability.getGooglePlayServicesConnectionResult(context);
-        }
-    }
-
     /**
      * Invokes whatever external code is necessary to check if the specified error code produced
      * by {@link #checkGooglePlayServicesAvailable(Context)} represents a user-recoverable error.
@@ -274,7 +240,7 @@ public class ExternalAuthUtils {
      * @return true If the code represents a user-recoverable error
      */
     protected boolean isUserRecoverableError(final int errorCode) {
-        return GoogleApiAvailability.getInstance().isUserResolvableError(errorCode);
+        return false;
     }
 
     /**
@@ -284,7 +250,7 @@ public class ExternalAuthUtils {
      * @return a textual description of the error code
      */
     protected String describeError(final int errorCode) {
-        return GoogleApiAvailability.getInstance().getErrorString(errorCode);
+        return "";
     }
 
     /**
diff --git a/components/externalauth/android/java/src/org/chromium/components/externalauth/UserRecoverableErrorHandler.java b/components/externalauth/android/java/src/org/chromium/components/externalauth/UserRecoverableErrorHandler.java
--- a/components/externalauth/android/java/src/org/chromium/components/externalauth/UserRecoverableErrorHandler.java
+++ b/components/externalauth/android/java/src/org/chromium/components/externalauth/UserRecoverableErrorHandler.java
@@ -9,8 +9,6 @@ import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.metrics.RecordUserAction;
 
@@ -89,7 +87,6 @@ public abstract class UserRecoverableErrorHandler {
             if (!sNotificationShown.getAndSet(true)) {
                 return;
             }
-            GoogleApiAvailability.getInstance().showErrorNotification(context, errorCode);
         }
     }
 
@@ -176,24 +173,7 @@ public abstract class UserRecoverableErrorHandler {
          */
         @Override
         protected final void handle(final Context context, final int errorCode) {
-            // Assume old dialogs generated by the same error handler are obsolete when an error
-            // with a different error code is encountered.
-            if (mErrorCode != errorCode) {
-                cancelDialog();
-            }
-            if (mDialog == null) {
-                mDialog = GoogleApiAvailability.getInstance().getErrorDialog(
-                        mActivity, errorCode, NO_RESPONSE_REQUIRED);
-                mErrorCode = errorCode;
-
-                DialogUserActionRecorder.createAndAttachToDialog(mDialog);
-            }
-            // This can happen if |errorCode| is ConnectionResult.SERVICE_INVALID.
-            if (mDialog != null && !mDialog.isShowing()) {
-                mDialog.setCancelable(mCancelable);
-                mDialog.show();
-                RecordUserAction.record("Signin_Android_GmsUserRecoverableDialogShown");
-            }
+            cancelDialog();
         }
 
         /**
diff --git a/components/media_router/browser/android/java/src/org/chromium/components/media_router/BrowserMediaRouter.java b/components/media_router/browser/android/java/src/org/chromium/components/media_router/BrowserMediaRouter.java
--- a/components/media_router/browser/android/java/src/org/chromium/components/media_router/BrowserMediaRouter.java
+++ b/components/media_router/browser/android/java/src/org/chromium/components/media_router/BrowserMediaRouter.java
@@ -10,9 +10,6 @@ import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.mediarouter.media.MediaRouter;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.StrictModeContext;
@@ -42,20 +39,7 @@ public class BrowserMediaRouter implements MediaRouteManager {
             new MediaRouteProvider.Factory() {
                 @Override
                 public void addProviders(MediaRouteManager manager) {
-                    int googleApiAvailabilityResult =
-                            GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
-                                    ContextUtils.getApplicationContext(),
-                                    MIN_GOOGLE_PLAY_SERVICES_APK_VERSION);
-                    if (googleApiAvailabilityResult != ConnectionResult.SUCCESS) {
-                        GoogleApiAvailability.getInstance().showErrorNotification(
-                                ContextUtils.getApplicationContext(), googleApiAvailabilityResult);
-                        return;
-                    }
-                    MediaRouteProvider cafProvider = CafMediaRouteProvider.create(manager);
-                    manager.addMediaRouteProvider(cafProvider);
-                    MediaRouteProvider remotingProvider =
-                            CafRemotingMediaRouteProvider.create(manager);
-                    manager.addMediaRouteProvider(remotingProvider);
+                    return;
                 }
             };
 
diff --git a/components/signin/core/browser/android/BUILD.gn b/components/signin/core/browser/android/BUILD.gn
--- a/components/signin/core/browser/android/BUILD.gn
+++ b/components/signin/core/browser/android/BUILD.gn
@@ -14,14 +14,11 @@ generate_jni("jni_headers") {
 
 android_library("java") {
   deps = [
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
     "//base:jni_java",
     "//net/android:net_java",
     "//third_party/android_deps:android_support_v4_java",
     "//third_party/android_deps:androidx_annotation_annotation_java",
-    "//third_party/android_deps:chromium_play_services_availability_java",
     "//ui/android:ui_java",
   ]
 
diff --git a/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java b/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
@@ -4,8 +4,6 @@
 
 package org.chromium.components.signin;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 /**
  * This class encapsulates return code if GMSCore package is not available.
  */
@@ -27,6 +25,6 @@ public class GmsAvailabilityException extends AccountManagerDelegateException {
     }
 
     public boolean isUserResolvableError() {
-        return GoogleApiAvailability.getInstance().isUserResolvableError(mResultCode);
+        return false;
     }
 }
diff --git a/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java b/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -35,7 +35,6 @@ import org.chromium.base.StrictModeContext;
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.library_loader.LibraryLoader;
 import org.chromium.base.metrics.RecordHistogram;
-import org.chromium.gms.ChromiumPlayServicesAvailability;
 
 import java.io.IOException;
 
diff --git a/content/public/android/BUILD.gn b/content/public/android/BUILD.gn
--- a/content/public/android/BUILD.gn
+++ b/content/public/android/BUILD.gn
@@ -139,9 +139,6 @@ android_library("content_main_dex_java") {
 android_library("content_full_java") {
   deps = [
     ":content_main_dex_java",
-    "$google_play_services_package:google_play_services_base_java",
-    "$google_play_services_package:google_play_services_basement_java",
-    "$google_play_services_package:google_play_services_tasks_java",
     "//base:base_java",
     "//base:jni_java",
     "//build:chromeos_buildflags",
diff --git a/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java b/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java
--- a/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java
+++ b/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java
@@ -10,8 +10,6 @@ import android.content.ContextWrapper;
 import android.content.Intent;
 import android.content.IntentFilter;
 
-import com.google.android.gms.tasks.Task;
-
 class Wrappers {
     // Prevent instantiation.
     private Wrappers() {}
diff --git a/content/test/BUILD.gn b/content/test/BUILD.gn
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -2630,9 +2630,6 @@ if (is_android) {
     testonly = true
     sources = content_java_sources_needing_jni
     deps = [
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
-      "$google_play_services_package:google_play_services_tasks_java",
       "//base:base_java",
       "//content/public/android:content_java",
       "//ui/android:ui_full_java",
diff --git a/device/BUILD.gn b/device/BUILD.gn
--- a/device/BUILD.gn
+++ b/device/BUILD.gn
@@ -422,8 +422,6 @@ if (is_android) {
   junit_binary("device_junit_tests") {
     sources = [ "gamepad/android/junit/src/org/chromium/device/gamepad/GamepadMappingsTest.java" ]
     deps = [
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
       "//base:base_java",
       "//base:base_java_test_support",
       "//base:base_junit_test_support",
diff --git a/remoting/android/client_java_tmpl.gni b/remoting/android/client_java_tmpl.gni
--- a/remoting/android/client_java_tmpl.gni
+++ b/remoting/android/client_java_tmpl.gni
@@ -104,8 +104,6 @@ template("remoting_android_client_java_tmpl") {
 
     if (defined(invoker.play_services_package)) {
       deps += [
-        "${invoker.play_services_package}:google_play_services_base_java",
-        "${invoker.play_services_package}:google_play_services_basement_java",
       ]
     }
 
diff --git a/services/BUILD.gn b/services/BUILD.gn
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -132,8 +132,6 @@ if (is_android) {
       "shape_detection/android/javatests/src/org/chromium/shape_detection/TextDetectionImplTest.java",
     ]
     deps = [
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
       "//base:base_java",
       "//base:base_java_test_support",
       "//mojo/public/java:base_java",
@@ -144,7 +142,6 @@ if (is_android) {
       "//skia/public/mojom:mojom_java",
       "//third_party/android_deps:androidx_test_monitor_java",
       "//third_party/android_deps:androidx_test_runner_java",
-      "//third_party/android_deps:chromium_play_services_availability_java",
       "//third_party/android_support_test_runner:runner_java",
       "//third_party/junit",
       "//ui/gfx/geometry/mojom:mojom_java",
diff --git a/services/device/geolocation/BUILD.gn b/services/device/geolocation/BUILD.gn
--- a/services/device/geolocation/BUILD.gn
+++ b/services/device/geolocation/BUILD.gn
@@ -156,14 +156,11 @@ if (is_android) {
 
     deps = [
       ":geolocation_jni_headers",
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
       "//base:base_java",
       "//base:jni_java",
       "//components/location/android:location_java",
       "//services/device/public/java:geolocation_java",
       "//third_party/android_deps:androidx_annotation_annotation_java",
-      "//third_party/android_deps:chromium_play_services_availability_java",
     ]
     annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
   }
diff --git a/services/shape_detection/BUILD.gn b/services/shape_detection/BUILD.gn
--- a/services/shape_detection/BUILD.gn
+++ b/services/shape_detection/BUILD.gn
@@ -107,8 +107,6 @@ if (is_android) {
     ]
 
     deps = [
-      "$google_play_services_package:google_play_services_base_java",
-      "$google_play_services_package:google_play_services_basement_java",
       "//base:base_java",
       "//mojo/public/java:base_java",
       "//mojo/public/java:bindings_java",
@@ -116,7 +114,6 @@ if (is_android) {
       "//mojo/public/java/system:system_impl_java",
       "//services/shape_detection/public/mojom:mojom_java",
       "//skia/public/mojom:mojom_java",
-      "//third_party/android_deps:chromium_play_services_availability_java",
       "//ui/gfx/geometry/mojom:mojom_java",
     ]
   }
diff --git a/third_party/android_deps/BUILD.gn b/third_party/android_deps/BUILD.gn
--- a/third_party/android_deps/BUILD.gn
+++ b/third_party/android_deps/BUILD.gn
@@ -87,24 +87,6 @@ java_annotation_processor("auto_service_processor") {
   deps = [ ":com_google_auto_service_auto_service_java" ]
 }
 
-android_library("chromium_play_services_availability_java") {
-  sources = [ "util/org/chromium/gms/ChromiumPlayServicesAvailability.java" ]
-  deps = [ "$google_play_services_package:google_play_services_base_java" ]
-}
-
-android_library("chromium_play_services_availability_shadows_java") {
-  # Platform checks are broken for Robolectric. See https://crbug.com/1071638.
-  bypass_platform_checks = true
-  testonly = true
-  sources = [
-    "util/org/chromium/gms/shadows/ShadowChromiumPlayServicesAvailability.java",
-  ]
-  deps = [
-    ":chromium_play_services_availability_java",
-    "//third_party/android_deps:robolectric_all_java",
-  ]
-}
-
 # The section below is generated by running
 # `//tools/android/roll/android_deps/fetch_all.py`
 
@@ -1154,52 +1136,6 @@ java_prebuilt("com_android_tools_build_jetifier_jetifier_processor_java") {
   ]
 }
 
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_base_java") {
-  aar_path = "libs/com_google_android_gms_play_services_base/play-services-base-17.1.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_base/com_google_android_gms_play_services_base.info"
-  deps = [
-    ":androidx_collection_collection_java",
-    ":androidx_core_core_java",
-    ":androidx_fragment_fragment_java",
-    ":google_play_services_basement_java",
-    ":google_play_services_tasks_java",
-  ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-}
-
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_basement_java") {
-  aar_path = "libs/com_google_android_gms_play_services_basement/play-services-basement-17.1.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_basement/com_google_android_gms_play_services_basement.info"
-  deps = [
-    ":androidx_collection_collection_java",
-    ":androidx_core_core_java",
-    ":androidx_fragment_fragment_java",
-  ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-
-  # https://crbug.com/989505
-  jar_excluded_patterns = [ "META-INF/proguard/*" ]
-  input_jars_paths = [ "$android_sdk/optional/org.apache.http.legacy.jar" ]
-  bytecode_rewriter_target =
-      "//build/android/bytecode:fragment_activity_replacer"
-}
-
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_tasks_java") {
-  aar_path = "libs/com_google_android_gms_play_services_tasks/play-services-tasks-17.0.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_tasks/com_google_android_gms_play_services_tasks.info"
-  deps = [ ":google_play_services_basement_java" ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-}
-
 # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
 android_aar_prebuilt("com_google_android_material_material_java") {
   aar_path =
diff --git a/weblayer/shell/android/BUILD.gn b/weblayer/shell/android/BUILD.gn
--- a/weblayer/shell/android/BUILD.gn
+++ b/weblayer/shell/android/BUILD.gn
@@ -40,7 +40,6 @@ android_library("weblayer_shell_java") {
   # google_play_services_version definition in the manifest.
   deps = [
     ":weblayer_shell_resources",
-    "$google_play_services_package:google_play_services_base_java",
     "//base:base_java",
     "//components/strictmode/android:java",
     "//third_party/android_deps:android_support_v4_java",
-- 
2.17.1

