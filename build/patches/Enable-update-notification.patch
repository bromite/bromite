From: uazo <uazo@users.noreply.github.com>
Date: Thu, 7 Oct 2021 14:27:12 +0000
Subject: Enable update notification

Enable checking for new version, with proxy support
---
 .../java/templates/BuildConfig.template       |   3 +
 build/config/android/rules.gni                |   5 +
 chrome/android/chrome_java_sources.gni        |   1 +
 .../java/res/xml/about_chrome_preferences.xml |   5 +
 .../about_settings/AboutChromeSettings.java   |  27 ++-
 .../chrome/browser/omaha/OmahaBase.java       |  13 +-
 .../chrome/browser/omaha/UpdateConfigs.java   |   6 +-
 .../browser/omaha/UpdateStatusProvider.java   |  34 ++-
 .../inline/BromiteInlineUpdateController.java | 196 ++++++++++++++++++
 .../inline/InlineUpdateControllerFactory.java |   8 +-
 chrome/browser/endpoint_fetcher/BUILD.gn      |   2 +
 .../endpoint_fetcher/endpoint_fetcher.cc      |  93 +++++++++
 .../endpoint_fetcher/endpoint_fetcher.h       |  13 ++
 .../endpoint_fetcher/EndpointFetcher.java     |  10 +
 .../EndpointHeaderResponse.java               |  30 +++
 chrome/browser/flag-metadata.json             |   2 +-
 chrome/browser/flag_descriptions.cc           |   7 +-
 .../flags/android/chrome_feature_list.cc      |   2 +-
 .../strings/android_chrome_strings.grd        |   8 +-
 19 files changed, 430 insertions(+), 35 deletions(-)
 create mode 100644 chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java
 create mode 100644 chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java

diff --git a/build/android/java/templates/BuildConfig.template b/build/android/java/templates/BuildConfig.template
--- a/build/android/java/templates/BuildConfig.template
+++ b/build/android/java/templates/BuildConfig.template
@@ -92,4 +92,7 @@ public class BuildConfig {
 #else
     public static MAYBE_FINAL boolean ISOLATED_SPLITS_ENABLED MAYBE_FALSE;
 #endif
+
+    public static MAYBE_FINAL long BUILD_TIME = _BUILD_TIME;
+    public static MAYBE_FINAL String BUILD_TARGET_CPU = _BUILD_TARGET_CPU;
 }
diff --git a/build/config/android/rules.gni b/build/config/android/rules.gni
--- a/build/config/android/rules.gni
+++ b/build/config/android/rules.gni
@@ -15,6 +15,7 @@ import("//build/config/python.gni")
 import("//build/config/rts.gni")
 import("//build/config/zip.gni")
 import("//build/toolchain/toolchain.gni")
+import("//build/timestamp.gni")
 
 assert(is_android)
 
@@ -1967,6 +1968,10 @@ if (enable_java_templates) {
           ]
         }
       }
+
+      # add build time and arch to org.chromium.build.BuildConfig
+      defines += [ "_BUILD_TIME=${build_timestamp}" ]
+      defines += [ "_BUILD_TARGET_CPU=\"${target_cpu}\"" ]
     }
   }
 
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -880,6 +880,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/NoopInlineUpdateController.java",
+  "java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/inline/PlayInlineUpdateController.java",
   "java/src/org/chromium/chrome/browser/omaha/metrics/HistogramUtils.java",
   "java/src/org/chromium/chrome/browser/omaha/metrics/TrackingProvider.java",
diff --git a/chrome/android/java/res/xml/about_chrome_preferences.xml b/chrome/android/java/res/xml/about_chrome_preferences.xml
--- a/chrome/android/java/res/xml/about_chrome_preferences.xml
+++ b/chrome/android/java/res/xml/about_chrome_preferences.xml
@@ -7,6 +7,11 @@
     <Preference
         android:key="application_version"
         android:title="@string/application_version_title" />
+    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
+        android:key="allow_inline_update"
+        android:title="@string/allow_inline_update_title"
+        android:summary="@string/allow_inline_update_summary"
+        android:defaultValue="false" />
     <org.chromium.chrome.browser.about_settings.AboutChromePreferenceOSVersion
         android:key="os_version"
         android:title="@string/os_version_title" />
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/about_settings/AboutChromeSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/about_settings/AboutChromeSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/about_settings/AboutChromeSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/about_settings/AboutChromeSettings.java
@@ -21,11 +21,16 @@ import org.chromium.ui.widget.Toast;
 
 import java.util.Calendar;
 
+import android.content.SharedPreferences;
+import org.chromium.chrome.browser.omaha.OmahaBase;
+import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
+
 /**
  * Settings fragment that displays information about Chrome.
  */
 public class AboutChromeSettings
-        extends PreferenceFragmentCompat implements Preference.OnPreferenceClickListener {
+        extends PreferenceFragmentCompat implements Preference.OnPreferenceClickListener,
+                                                    Preference.OnPreferenceChangeListener {
     private static final int TAPS_FOR_DEVELOPER_SETTINGS = 7;
 
     private static final String PREF_APPLICATION_VERSION = "application_version";
@@ -59,6 +64,13 @@ public class AboutChromeSettings
         p = findPreference(PREF_LEGAL_INFORMATION);
         int currentYear = Calendar.getInstance().get(Calendar.YEAR);
         p.setSummary(getString(R.string.legal_information_summary, currentYear));
+
+        ChromeSwitchPreference allowInlineUpdate =
+                (ChromeSwitchPreference) findPreference(OmahaBase.PREF_ALLOW_INLINE_UPDATE);
+        allowInlineUpdate.setChecked(
+            OmahaBase.getSharedPreferences()
+                    .getBoolean(OmahaBase.PREF_ALLOW_INLINE_UPDATE, false));
+        allowInlineUpdate.setOnPreferenceChangeListener(this);
     }
 
     /**
@@ -122,4 +134,17 @@ public class AboutChromeSettings
         }
         return true;
     }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        String key = preference.getKey();
+        if (OmahaBase.PREF_ALLOW_INLINE_UPDATE.equals(key)) {
+            SharedPreferences.Editor sharedPreferenceEditor = OmahaBase.getSharedPreferences().edit();
+            sharedPreferenceEditor.putBoolean(OmahaBase.PREF_ALLOW_INLINE_UPDATE, (boolean) newValue);
+            sharedPreferenceEditor.putLong(OmahaBase.PREF_LATEST_MODIFIED_VERSION, 0);
+            sharedPreferenceEditor.putLong(OmahaBase.PREF_TIMESTAMP_OF_REQUEST, 0);
+            sharedPreferenceEditor.apply();
+        }
+        return true;
+    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/OmahaBase.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/OmahaBase.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/OmahaBase.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/OmahaBase.java
@@ -31,6 +31,8 @@ import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.Date;
 
+import org.chromium.build.BuildConfig;
+
 /**
  * Keeps tabs on the current state of Chrome, tracking if and when a request should be sent to the
  * Omaha Server.
@@ -97,7 +99,9 @@ public class OmahaBase {
     static final String PREF_TIMESTAMP_FOR_NEW_REQUEST = "timestampForNewRequest";
     static final String PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT = "timestampForNextPostAttempt";
     static final String PREF_TIMESTAMP_OF_INSTALL = "timestampOfInstall";
-    static final String PREF_TIMESTAMP_OF_REQUEST = "timestampOfRequest";
+    public static final String PREF_TIMESTAMP_OF_REQUEST = "timestampOfRequest";
+    public static final String PREF_LATEST_MODIFIED_VERSION = "latestModifiedVersion";
+    public static final String PREF_ALLOW_INLINE_UPDATE = "allow_inline_update";
 
     static final int MIN_API_JOB_SCHEDULER = Build.VERSION_CODES.M;
 
@@ -630,4 +634,11 @@ public class OmahaBase {
                 // updateStatus is only used for the on-demand check.
                 null);
     }
+
+    public static boolean isNewVersionAvailable(Long latestVersionString) {
+        if (latestVersionString == null ||
+            latestVersionString == 0) return false;
+
+        return latestVersionString > BuildConfig.BUILD_TIME;
+    }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateConfigs.java
@@ -65,7 +65,7 @@ public class UpdateConfigs {
     private static final String UPDATE_NOTIFICATION_EXPERIMENTAL_PARAM_NAME =
             "update_notification_experimental_context";
 
-    private static final long DEFAULT_UPDATE_NOTIFICATION_INTERVAL = 21 * DateUtils.DAY_IN_MILLIS;
+    private static final long DEFAULT_UPDATE_NOTIFICATION_INTERVAL = 7 * DateUtils.DAY_IN_MILLIS;
     private static final long DEFAULT_UPDATE_ATTRIBUTION_WINDOW_MS = 2 * DateUtils.DAY_IN_MILLIS;
 
     /** Possible update flow configurations. */
@@ -300,7 +300,7 @@ public class UpdateConfigs {
      * @return the current inline update flow configuration.
      */
     @UpdateFlowConfiguration
-    static int getConfiguration() {
+    public static int getConfiguration() {
         if (!ChromeFeatureList.isEnabled(ChromeFeatureList.INLINE_UPDATE_FLOW)) {
             // Always use the the old flow if the inline update flow feature is not enabled.
             return UpdateFlowConfiguration.INTENT_ONLY;
@@ -328,4 +328,4 @@ public class UpdateConfigs {
         if (configuration == null) return "";
         return configuration.toLowerCase(Locale.US);
     }
-}
\ No newline at end of file
+}
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateStatusProvider.java
@@ -45,6 +45,11 @@ import java.io.File;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import org.chromium.base.Log;
+import android.content.SharedPreferences;
+import android.os.Build;
+import org.chromium.build.BuildConfig;
+
 /**
  * Provides the current update state for Chrome.  This update state is asynchronously determined and
  * can change as Chrome runs.
@@ -112,6 +117,8 @@ public class UpdateStatusProvider implements ActivityStateListener {
          */
         public String latestUnsupportedVersion;
 
+        public long latestLastModifiedVersion;
+
         /**
          * Whether or not we are currently trying to simulate the update.  Used to ignore other
          * update signals.
@@ -133,6 +140,7 @@ public class UpdateStatusProvider implements ActivityStateListener {
             latestUnsupportedVersion = other.latestUnsupportedVersion;
             mIsSimulated = other.mIsSimulated;
             mIsInlineSimulated = other.mIsInlineSimulated;
+            latestLastModifiedVersion = other.latestLastModifiedVersion;
         }
     }
 
@@ -339,8 +347,7 @@ public class UpdateStatusProvider implements ActivityStateListener {
             case UpdateConfigs.UpdateFlowConfiguration.NEVER_SHOW:
                 return UpdateState.NONE;
             case UpdateConfigs.UpdateFlowConfiguration.INLINE_ONLY:
-                if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
-                if (inlineState == UpdateState.NONE) return UpdateState.NONE;
+                if (inlineState == UpdateState.NONE) return omahaState;
                 return inlineState;
             case UpdateConfigs.UpdateFlowConfiguration.BEST_EFFORT:
                 if (omahaState != UpdateState.UPDATE_AVAILABLE) return omahaState;
@@ -415,25 +422,12 @@ public class UpdateStatusProvider implements ActivityStateListener {
         private UpdateStatus getRealStatus(Context context) {
             UpdateStatus status = new UpdateStatus();
 
-            if (VersionNumberGetter.isNewerVersionAvailable(context)) {
-                status.updateUrl = MarketURLGetter.getMarketUrl();
-                status.latestVersion =
-                        VersionNumberGetter.getInstance().getLatestKnownVersion(context);
-
-                boolean allowedToUpdate =
-                        checkForSufficientStorage() && isGooglePlayStoreAvailable(context);
-                status.updateState =
-                        allowedToUpdate ? UpdateState.UPDATE_AVAILABLE : UpdateState.NONE;
-
-                SharedPreferencesManager.getInstance().removeKey(
-                        ChromePreferenceKeys.LATEST_UNSUPPORTED_VERSION);
-            } else if (!VersionNumberGetter.isCurrentOsVersionSupported()) {
-                status.updateState = UpdateState.UNSUPPORTED_OS_VERSION;
-                status.latestUnsupportedVersion = SharedPreferencesManager.getInstance().readString(
-                        ChromePreferenceKeys.LATEST_UNSUPPORTED_VERSION, null);
-            } else {
+            SharedPreferences preferences = OmahaBase.getSharedPreferences();
+            status.latestLastModifiedVersion = preferences.getLong(OmahaBase.PREF_LATEST_MODIFIED_VERSION, 0);
+            if (OmahaBase.isNewVersionAvailable(status.latestLastModifiedVersion))
+                status.updateState = UpdateState.INLINE_UPDATE_AVAILABLE;
+            else
                 status.updateState = UpdateState.NONE;
-            }
 
             return status;
         }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java
@@ -0,0 +1,196 @@
+// Copyright 2021 The Ungoogled Chromium Authors. All rights reserved.
+//
+// This file is part of Ungoogled Chromium Android.
+//
+// Ungoogled Chromium Android is free software: you can redistribute it
+// and/or modify it under the terms of the GNU General Public License as
+// published by the Free Software Foundation, either version 3 of the
+// License, or any later version.
+//
+// Ungoogled Chromium Android is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Ungoogled Chromium Android.  If not,
+// see <https://www.gnu.org/licenses/>.
+
+package org.chromium.chrome.browser.omaha.inline;
+
+import static org.chromium.chrome.browser.omaha.UpdateConfigs.getUpdateNotificationInterval;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Build;
+import org.chromium.build.BuildConfig;
+
+import androidx.annotation.Nullable;
+
+import org.chromium.base.Callback;
+import org.chromium.base.Log;
+import org.chromium.base.task.AsyncTask;
+import org.chromium.base.task.PostTask;
+import org.chromium.chrome.browser.app.ChromeActivity;
+import org.chromium.chrome.browser.omaha.OmahaBase;
+import org.chromium.chrome.browser.omaha.UpdateConfigs;
+import org.chromium.chrome.browser.omaha.UpdateStatusProvider;
+import org.chromium.chrome.browser.profiles.Profile;
+import org.chromium.chrome.browser.tab.TabLaunchType;
+import org.chromium.chrome.browser.tabmodel.TabCreator;
+import org.chromium.chrome.browser.version.ChromeVersionInfo;
+import org.chromium.content_public.browser.LoadUrlParams;
+import org.chromium.content_public.browser.UiThreadTaskTraits;
+import org.chromium.ui.base.PageTransition;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.HttpURLConnection;
+
+import org.chromium.chrome.browser.endpoint_fetcher.EndpointFetcher;
+import org.chromium.chrome.browser.endpoint_fetcher.EndpointResponse;
+
+class BromiteInlineUpdateController implements InlineUpdateController {
+
+    private static final String TAG = "BromiteInlineUpdateController";
+    private final String UPDATE_VERSION_URL = "https://fdroid.bromite.org/latest/";
+
+    private String getDownloadUrl() {
+        return "https://github.com/bromite/bromite/releases/latest?arch=" + BuildConfig.BUILD_TARGET_CPU;
+    }
+
+    private boolean mEnabled = true;
+    private Runnable mCallback;
+    private @Nullable @UpdateStatusProvider.UpdateState Integer mUpdateState =
+                                                    UpdateStatusProvider.UpdateState.NONE;
+
+    BromiteInlineUpdateController(Runnable callback) {
+        mCallback = callback;
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (mEnabled == enabled) return;
+
+        mEnabled = enabled;
+        if (mEnabled) pullCurrentState();
+    }
+
+    @Override
+    public @Nullable @UpdateStatusProvider.UpdateState Integer getStatus() {
+        if (mEnabled) pullCurrentState();
+        return mUpdateState;
+    }
+
+    @Override
+    public void startUpdate(Activity activity) {
+        assert ChromeActivity.class.isInstance(activity);
+        ChromeActivity thisActivity = (ChromeActivity) activity;
+        String downloadUrl = getDownloadUrl();
+        // Always open in new incognito tab
+        TabCreator tabCreator = thisActivity.getTabCreator(true);
+        tabCreator.createNewTab(new LoadUrlParams(downloadUrl, PageTransition.AUTO_BOOKMARK),
+                TabLaunchType.FROM_LINK, thisActivity.getActivityTab());
+    }
+
+    @Override
+    public void completeUpdate() {
+    }
+
+    private void pullCurrentState() {
+        if (OmahaBase.getSharedPreferences()
+                .getBoolean(OmahaBase.PREF_ALLOW_INLINE_UPDATE, false) == false) {
+            Log.i(TAG, "Checking for update disabled by user");
+            return;
+        }
+
+        if (mUpdateState != UpdateStatusProvider.UpdateState.NONE)
+            return;
+
+        if (shallUpdate() == false)
+            return;
+
+        switch (mUpdateState) {
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_AVAILABLE:
+                break;
+            case UpdateStatusProvider.UpdateState.NONE:
+                checkLatestVersion((result) -> {
+                    // Compare last modified date
+                    if (result == null || result == 0) return;
+
+                    if (OmahaBase.isNewVersionAvailable(result)) {
+                        postStatus(UpdateStatusProvider.UpdateState.INLINE_UPDATE_AVAILABLE);
+                    } else {
+                        if (mUpdateState != UpdateStatusProvider.UpdateState.NONE) {
+                            postStatus(UpdateStatusProvider.UpdateState.NONE);
+                        }
+                    }
+                });
+                break;
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_READY:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_FAILED:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.INLINE_UPDATE_DOWNLOADING:
+                // Intentional fall through.
+            case UpdateStatusProvider.UpdateState.UNSUPPORTED_OS_VERSION:
+                // Intentional fall through.
+            default:
+                return;
+        }
+    }
+
+    private boolean shallUpdate() {
+        long currentTime = System.currentTimeMillis();
+        SharedPreferences preferences = OmahaBase.getSharedPreferences();
+        long lastPushedTimeStamp = preferences.getLong(OmahaBase.PREF_TIMESTAMP_OF_REQUEST, 0);
+        return currentTime - lastPushedTimeStamp >= getUpdateNotificationInterval();
+    }
+
+    private void checkLatestVersion(final Callback<Long> callback) {
+        assert UPDATE_VERSION_URL != null;
+
+        setLastModifiedTimeStamp(0);
+
+        String urlToCheck = UPDATE_VERSION_URL +
+                            "bromite_" + BuildConfig.BUILD_TARGET_CPU + ".apk";
+        Log.i(TAG, "Fetching with HEAD: " + urlToCheck);
+
+        EndpointFetcher.nativeHeadWithNoAuth(
+                (endpointResponse) -> {
+                    long lastModified = endpointResponse.getLastModified();
+                    Log.i(TAG, "Obtained last modified version: %d", lastModified);
+                    Log.i(TAG, "With message: %s", endpointResponse.getResponseString());
+                    Log.i(TAG, "Current last modified version: %d", BuildConfig.BUILD_TIME);
+
+                    setLastModifiedTimeStamp(lastModified);
+                    updateLastPushedTimeStamp();
+                    callback.onResult(lastModified);
+                },
+                Profile.getLastUsedRegularProfile(),
+                urlToCheck, /*timeout*/5000);
+    }
+
+    private void postStatus(@UpdateStatusProvider.UpdateState int status) {
+        mUpdateState = status;
+        PostTask.postTask(UiThreadTaskTraits.DEFAULT, mCallback);
+    }
+
+    private static void updateLastPushedTimeStamp() {
+        SharedPreferences preferences = OmahaBase.getSharedPreferences();
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putLong(OmahaBase.PREF_TIMESTAMP_OF_REQUEST, System.currentTimeMillis());
+        editor.apply();
+    }
+
+    private static void setLastModifiedTimeStamp(long timestamp) {
+        SharedPreferences preferences = OmahaBase.getSharedPreferences();
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putLong(OmahaBase.PREF_LATEST_MODIFIED_VERSION, timestamp);
+        editor.apply();
+    }
+}
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/InlineUpdateControllerFactory.java
@@ -19,8 +19,10 @@ public class InlineUpdateControllerFactory {
         @FakeAppUpdateManagerWrapper.Type
         int mockInlineEndState = UpdateConfigs.getMockInlineScenarioEndState();
 
-        // No test scenario was in place, and the inline flow has not been enabled, so use a
-        // controller with no functionality.
-        return new NoopInlineUpdateController(callback);
+        if (ChromeFeatureList.isEnabled(ChromeFeatureList.INLINE_UPDATE_FLOW)) {
+            return new BromiteInlineUpdateController(callback);
+        } else {
+            return new NoopInlineUpdateController(callback);
+        }
     }
 }
diff --git a/chrome/browser/endpoint_fetcher/BUILD.gn b/chrome/browser/endpoint_fetcher/BUILD.gn
--- a/chrome/browser/endpoint_fetcher/BUILD.gn
+++ b/chrome/browser/endpoint_fetcher/BUILD.gn
@@ -14,6 +14,7 @@ android_library("java") {
   sources = [
     "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java",
     "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointResponse.java",
+    "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java",
   ]
   annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
 }
@@ -22,5 +23,6 @@ generate_jni("jni_headers") {
   sources = [
     "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java",
     "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointResponse.java",
+    "java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java",
   ]
 }
diff --git a/chrome/browser/endpoint_fetcher/endpoint_fetcher.cc b/chrome/browser/endpoint_fetcher/endpoint_fetcher.cc
--- a/chrome/browser/endpoint_fetcher/endpoint_fetcher.cc
+++ b/chrome/browser/endpoint_fetcher/endpoint_fetcher.cc
@@ -26,10 +26,15 @@
 #include "base/android/jni_string.h"
 #include "chrome/browser/endpoint_fetcher/jni_headers/EndpointFetcher_jni.h"
 #include "chrome/browser/endpoint_fetcher/jni_headers/EndpointResponse_jni.h"
+#include "chrome/browser/endpoint_fetcher/jni_headers/EndpointHeaderResponse_jni.h"
 #include "chrome/browser/profiles/profile_android.h"
 
 #endif  // defined(OS_ANDROID)
 
+#include "net/base/load_flags.h"
+#include "net/http/http_status_code.h"
+#include "services/network/public/cpp/resource_request.h"
+
 namespace {
 const char kContentTypeKey[] = "Content-Type";
 const char kDeveloperKey[] = "X-Developer-Key";
@@ -150,6 +155,19 @@ EndpointFetcher::EndpointFetcher(
       identity_manager_(nullptr),
       sanitize_response_(true) {}
 
+EndpointFetcher::EndpointFetcher(
+    Profile* const profile,
+    const GURL& url,
+    int64_t timeout_ms,
+    const net::NetworkTrafficAnnotationTag& annotation_tag)
+    : url_(url),
+      timeout_ms_(timeout_ms),
+      annotation_tag_(annotation_tag),
+      url_loader_factory_(profile->GetDefaultStoragePartition()
+                              ->GetURLLoaderFactoryForBrowserProcess()),
+      identity_manager_(nullptr),
+      sanitize_response_(false) {}
+
 EndpointFetcher::~EndpointFetcher() = default;
 
 void EndpointFetcher::Fetch(EndpointFetcherCallback endpoint_fetcher_callback) {
@@ -279,6 +297,43 @@ void EndpointFetcher::OnSanitizationResult(
   std::move(endpoint_fetcher_callback).Run(std::move(response));
 }
 
+void EndpointFetcher::PerformHeadRequest(
+    EndpointFetcherCallback endpoint_fetcher_callback,
+    const char* key) {
+  auto resource_request = std::make_unique<network::ResourceRequest>();
+  resource_request->method = "HEAD";
+  resource_request->url = url_;
+  resource_request->credentials_mode = network::mojom::CredentialsMode::kOmit;
+  resource_request->load_flags = net::LOAD_BYPASS_CACHE | net::LOAD_DISABLE_CACHE | net::LOAD_DO_NOT_SAVE_COOKIES;
+
+  simple_url_loader_ = network::SimpleURLLoader::Create(
+      std::move(resource_request), annotation_tag_);
+  simple_url_loader_->SetTimeoutDuration(
+      base::TimeDelta::FromMilliseconds(timeout_ms_));
+  simple_url_loader_->SetAllowHttpErrorResults(true);
+
+  simple_url_loader_->DownloadHeadersOnly(
+      url_loader_factory_.get(),
+      base::BindOnce(&EndpointFetcher::OnURLLoadComplete,
+                     base::Unretained(this),
+                     std::move(endpoint_fetcher_callback)));
+}
+
+void EndpointFetcher::OnURLLoadComplete(
+    EndpointFetcherCallback endpoint_fetcher_callback,
+    scoped_refptr<net::HttpResponseHeaders> headers) {
+  auto response = std::make_unique<EndpointResponse>();
+  base::Time last_modified;
+  if (headers) {
+    headers->GetLastModifiedValue(&last_modified);
+    response->last_modified = last_modified.ToJavaTime();
+  }
+
+  std::string net_error = net::ErrorToString(simple_url_loader_->NetError());
+  response->response = net_error;
+  std::move(endpoint_fetcher_callback).Run(std::move(response));
+}
+
 #if defined(OS_ANDROID)
 namespace {
 static void OnEndpointFetcherComplete(
@@ -295,6 +350,23 @@ static void OnEndpointFetcherComplete(
                        base::android::AttachCurrentThread(),
                        std::move(endpoint_response->response))));
 }
+
+static void OnEndpointFetcherHeadComplete(
+    const base::android::JavaRef<jobject>& jcaller,
+    // Passing the endpoint_fetcher ensures the endpoint_fetcher's
+    // lifetime extends to the callback and is not destroyed
+    // prematurely (which would result in cancellation of the request).
+    std::unique_ptr<EndpointFetcher> endpoint_fetcher,
+    std::unique_ptr<EndpointResponse> endpoint_response) {
+  base::android::RunObjectCallbackAndroid(
+      jcaller, Java_EndpointHeaderResponse_createEndpointResponse(
+                   base::android::AttachCurrentThread(),
+                   base::android::ConvertUTF8ToJavaString(
+                       base::android::AttachCurrentThread(),
+                       std::move(endpoint_response->response)),
+                   endpoint_response->last_modified));
+}
+
 }  // namespace
 
 // TODO(crbug.com/1077537) Create a KeyProvider so
@@ -380,4 +452,25 @@ static void JNI_EndpointFetcher_NativeFetchWithNoAuth(
       nullptr);
 }
 
+static void JNI_EndpointFetcher_NativeHeadWithNoAuth(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jobject>& jprofile,
+    const base::android::JavaParamRef<jstring>& jurl,
+    jlong jtimeout,
+    const base::android::JavaParamRef<jobject>& jcallback) {
+  auto endpoint_fetcher = std::make_unique<EndpointFetcher>(
+      ProfileAndroid::FromProfileAndroid(jprofile),
+      GURL(base::android::ConvertJavaStringToUTF8(env, jurl)),
+      jtimeout,
+      NO_TRAFFIC_ANNOTATION_YET);
+  auto* const endpoint_fetcher_ptr = endpoint_fetcher.get();
+  endpoint_fetcher_ptr->PerformHeadRequest(
+      base::BindOnce(&OnEndpointFetcherHeadComplete,
+                     base::android::ScopedJavaGlobalRef<jobject>(jcallback),
+                     // unique_ptr endpoint_fetcher is passed until the callback
+                     // to ensure its lifetime across the request.
+                     std::move(endpoint_fetcher)),
+      nullptr);
+}
+
 #endif  // defined(OS_ANDROID)
diff --git a/chrome/browser/endpoint_fetcher/endpoint_fetcher.h b/chrome/browser/endpoint_fetcher/endpoint_fetcher.h
--- a/chrome/browser/endpoint_fetcher/endpoint_fetcher.h
+++ b/chrome/browser/endpoint_fetcher/endpoint_fetcher.h
@@ -14,6 +14,7 @@
 #include "components/signin/public/identity_manager/scope_set.h"
 #include "net/traffic_annotation/network_traffic_annotation.h"
 #include "services/data_decoder/public/cpp/json_sanitizer.h"
+#include "services/network/public/cpp/resource_request.h"
 
 namespace network {
 struct ResourceRequest;
@@ -31,6 +32,7 @@ class Profile;
 
 struct EndpointResponse {
   std::string response;
+  long last_modified;
   // TODO(crbug.com/993393) Add more detailed error messaging
 };
 
@@ -77,6 +79,12 @@ class EndpointFetcher {
                   const GURL& url,
                   const net::NetworkTrafficAnnotationTag& annotation_tag);
 
+  // Constructor if no authentication is needed, with timeout
+  EndpointFetcher(Profile* const profile,
+                  const GURL& url,
+                  int64_t timeout_ms,
+                  const net::NetworkTrafficAnnotationTag& annotation_tag);
+
   // Used for tests. Can be used if caller constructs their own
   // url_loader_factory and identity_manager.
   EndpointFetcher(
@@ -113,6 +121,9 @@ class EndpointFetcher {
   virtual void PerformRequest(EndpointFetcherCallback endpoint_fetcher_callback,
                               const char* key);
 
+  virtual void PerformHeadRequest(EndpointFetcherCallback endpoint_fetcher_callback,
+                                  const char* key);
+
  protected:
   // Used for Mock only. see MockEndpointFetcher class.
   explicit EndpointFetcher(
@@ -126,6 +137,8 @@ class EndpointFetcher {
                          std::unique_ptr<std::string> response_body);
   void OnSanitizationResult(EndpointFetcherCallback endpoint_fetcher_callback,
                             data_decoder::JsonSanitizer::Result result);
+  void OnURLLoadComplete(EndpointFetcherCallback callback,
+                         scoped_refptr<net::HttpResponseHeaders> headers);
 
   enum AuthType { CHROME_API_KEY, OAUTH, NO_AUTH };
   AuthType auth_type_;
diff --git a/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java b/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java
--- a/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java
+++ b/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointFetcher.java
@@ -68,6 +68,13 @@ public final class EndpointFetcher {
                 profile, url, httpsMethod, contentType, postData, timeout, headers, callback);
     }
 
+    @MainThread
+    public static void nativeHeadWithNoAuth(Callback<EndpointHeaderResponse> callback, Profile profile,
+            String url, long timeout) {
+        EndpointFetcherJni.get().nativeHeadWithNoAuth(
+                profile, url, timeout, callback);
+    }
+
     @NativeMethods
     public interface Natives {
         void nativeFetchOAuth(Profile profile, String oathConsumerName, String url,
@@ -78,5 +85,8 @@ public final class EndpointFetcher {
                 Callback<EndpointResponse> callback);
         void nativeFetchWithNoAuth(
                 Profile profile, String url, Callback<EndpointResponse> callback);
+        void nativeHeadWithNoAuth(
+                Profile profile, String url, long timeout,
+                Callback<EndpointHeaderResponse> callback);
     }
 }
diff --git a/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java b/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java
new file mode 100644
--- /dev/null
+++ b/chrome/browser/endpoint_fetcher/java/src/org/chromium/chrome/browser/endpoint_fetcher/EndpointHeaderResponse.java
@@ -0,0 +1,30 @@
+// Copyright 2019 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.chrome.browser.endpoint_fetcher;
+
+import org.chromium.base.annotations.CalledByNative;
+
+public class EndpointHeaderResponse {
+    private final String mResponseString;
+    private final long mlastModified;
+
+    public EndpointHeaderResponse(String responseString, Long lastModified) {
+        mResponseString = responseString;
+        mlastModified = lastModified;
+    }
+
+    public long getLastModified() {
+        return mlastModified;
+    }
+
+    public String getResponseString() {
+        return mResponseString;
+    }
+
+    @CalledByNative
+    private static EndpointHeaderResponse createEndpointResponse(String response, long lastModified) {
+        return new EndpointHeaderResponse(response, lastModified);
+    }
+}
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -2059,7 +2059,7 @@
   {
     "name": "enable-inline-update-flow",
     "owners": [ "nyquist", "dtrainor" ],
-    "expiry_milestone": 83
+    "expiry_milestone": -1
   },
   {
     "name": "enable-input-event-logging",
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -3705,12 +3705,11 @@ const char kVoiceButtonInTopToolbarDescription[] =
     "Enables showing the voice search button in the top toolbar. Enabling "
     "Adaptive Button overrides this.";
 
-const char kInlineUpdateFlowName[] = "Enable Google Play inline update flow";
+const char kInlineUpdateFlowName[] = "Enable inline update flow";
 const char kInlineUpdateFlowDescription[] =
-    "When this flag is set, instead of taking the user to the Google Play "
-    "Store when an update is available, the user is presented with an inline "
+    "When this flag is set, the user is presented with an inline "
     "flow where they do not have to leave Chrome until the update is ready "
-    "to install.";
+    "to install. (default enabled)";
 
 const char kSwipeToMoveCursorName[] = "Swipe to move cursor";
 const char kSwipeToMoveCursorDescription[] =
diff --git a/chrome/browser/flags/android/chrome_feature_list.cc b/chrome/browser/flags/android/chrome_feature_list.cc
--- a/chrome/browser/flags/android/chrome_feature_list.cc
+++ b/chrome/browser/flags/android/chrome_feature_list.cc
@@ -594,7 +594,7 @@ const base::Feature kIncognitoScreenshot{"IncognitoScreenshot",
                                          base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kInlineUpdateFlow{"InlineUpdateFlow",
-                                      base::FEATURE_DISABLED_BY_DEFAULT};
+                                      base::FEATURE_ENABLED_BY_DEFAULT};
 
 const base::Feature kInstantStart{"InstantStart",
                                   base::FEATURE_DISABLED_BY_DEFAULT};
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -1631,6 +1631,12 @@ Your Google account may have other forms of browsing history like searches and a
       <message name="IDS_DEPRECATION_WARNING" desc="Warning about Chrome updates no longer being supported">
         Chrome updates are no longer supported for this version of Android
       </message>
+      <message name="IDS_ALLOW_INLINE_UPDATE_TITLE" desc="Title for allow inline update preference">
+        Allow checking for updates
+      </message>
+      <message name="IDS_ALLOW_INLINE_UPDATE_SUMMARY" desc="Summary for allow inline update preference">
+        Check for updates by contacting the Bromite repo
+      </message>
 
       <!-- Account management UI strings. -->
       <message name="IDS_ACCOUNT_MANAGEMENT_TITLE" desc="Header title for the account management screen. [CHAR_LIMIT=32]">
@@ -3059,7 +3065,7 @@ To change this setting, <ph name="BEGIN_LINK">&lt;resetlink&gt;</ph>reset sync<p
 
       <!-- Main menu items -->
       <message name="IDS_MENU_UPDATE" desc="Menu item for updating chrome. [CHAR_LIMIT=24]">
-        Update Chrome
+        Update Bromite
       </message>
       <message name="IDS_MENU_UPDATE_SUMMARY_DEFAULT" desc="Summary string for update menu item explaining that a newer version of Chrome is available. [CHAR_LIMIT=30]">
         Newer version is available
-- 
2.17.1

