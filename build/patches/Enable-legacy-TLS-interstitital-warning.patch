From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Fri, 17 Jul 2020 09:28:36 +0200
Subject: Enable legacy TLS interstitital warning

Expose show-legacy-tls-warnings flag on Android as well
FILE:Enable-legacy-TLS-interstitital-warning.patch
FILE:Enable-legacy-TLS-interstitital-warning.patch
---
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 92e0f04179..5a14be48a8 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -6167,11 +6167,9 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(features::kElasticOverscrollWin)},
 #endif
 
-#if !defined(OS_ANDROID)
     {"show-legacy-tls-warnings", flag_descriptions::kLegacyTLSWarningsName,
      flag_descriptions::kLegacyTLSWarningsDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(security_state::features::kLegacyTLSWarnings)},
-#endif
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     {"enable-assistant-aec", flag_descriptions::kEnableGoogleAssistantAecName,
diff --git a/chrome/browser/ssl/tls_deprecation_config.cc b/chrome/browser/ssl/tls_deprecation_config.cc
index ae6ba0c8c0..7d1345c2ef 100644
--- a/chrome/browser/ssl/tls_deprecation_config.cc
+++ b/chrome/browser/ssl/tls_deprecation_config.cc
@@ -58,27 +58,7 @@ void SetRemoteTLSDeprecationConfig(const std::string& binary_config) {
 }
 
 bool ShouldSuppressLegacyTLSWarning(const GURL& url) {
-  if (!url.has_host() || !url.SchemeIsCryptographic())
-    return false;
-
-  auto* proto = TLSDeprecationConfigSingleton::GetInstance().GetProto();
-  // If the config is not yet loaded, we err on the side of not showing warnings
-  // for any sites.
-  if (!proto)
-    return true;
-
-  // Convert bytes from crypto::SHA256 so we can compare to the proto contents.
-  std::string host_hash_bytes = crypto::SHA256HashString(url.host_piece());
-  std::string host_hash = base::ToLowerASCII(
-      base::HexEncode(host_hash_bytes.c_str(), host_hash_bytes.size()));
-  const auto& control_site_hashes = proto->control_site_hashes();
-
-  // Perform binary search on the sorted list of control site hashes to check
-  // if the input URL's hostname is included.
-  auto lower = std::lower_bound(control_site_hashes.begin(),
-                                control_site_hashes.end(), host_hash);
-
-  return lower != control_site_hashes.end() && *lower == host_hash;
+  return false;
 }
 
 void ResetTLSDeprecationConfigForTesting() {
diff --git a/components/security_state/core/features.cc b/components/security_state/core/features.cc
index 2fb3a02cad..64a2050932 100644
--- a/components/security_state/core/features.cc
+++ b/components/security_state/core/features.cc
@@ -8,7 +8,7 @@ namespace security_state {
 namespace features {
 
 const base::Feature kLegacyTLSWarnings{"LegacyTLSWarnings",
-                                       base::FEATURE_DISABLED_BY_DEFAULT};
+                                       base::FEATURE_ENABLED_BY_DEFAULT};
 
 const base::Feature kSafetyTipUI{"SafetyTip", base::FEATURE_ENABLED_BY_DEFAULT};
 
diff --git a/services/network/legacy_tls_config_distributor.cc b/services/network/legacy_tls_config_distributor.cc
index 5158b3ab2a..a5c30e3a96 100644
--- a/services/network/legacy_tls_config_distributor.cc
+++ b/services/network/legacy_tls_config_distributor.cc
@@ -51,26 +51,7 @@ scoped_refptr<LegacyTLSExperimentConfig> LegacyTLSExperimentConfig::Parse(
 
 bool LegacyTLSExperimentConfig::ShouldSuppressLegacyTLSWarning(
     const std::string& hostname) const {
-  // Match on eTLD+1 rather than full hostname (to account for subdomains and
-  // redirects). If no registrable domain is found, default to using the
-  // hostname as-is.
-  auto domain = net::registry_controlled_domains::GetDomainAndRegistry(
-      hostname, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES);
-  if (domain.empty())
-    domain = hostname;
-
-  // Convert bytes from crypto::SHA256 so we can compare to the proto contents.
-  std::string host_hash_bytes = crypto::SHA256HashString(domain);
-  std::string host_hash = base::ToLowerASCII(
-      base::HexEncode(host_hash_bytes.data(), host_hash_bytes.size()));
-  const auto& control_site_hashes = proto_.control_site_hashes();
-
-  // Perform binary search on the sorted list of control site hashes to check
-  // if the input URL's hostname is included.
-  auto lower = std::lower_bound(control_site_hashes.begin(),
-                                control_site_hashes.end(), host_hash);
-
-  return lower != control_site_hashes.end() && *lower == host_hash;
+  return false;
 }
 
 LegacyTLSConfigDistributor::LegacyTLSConfigDistributor() = default;
diff --git a/services/network/ssl_config_service_mojo.cc b/services/network/ssl_config_service_mojo.cc
index 247d8dfae4..3b33b0f942 100644
--- a/services/network/ssl_config_service_mojo.cc
+++ b/services/network/ssl_config_service_mojo.cc
@@ -120,11 +120,8 @@ bool SSLConfigServiceMojo::CanShareConnectionWithClientCerts(
 
 bool SSLConfigServiceMojo::ShouldSuppressLegacyTLSWarning(
     const std::string& hostname) const {
-  // If the config is not yet loaded, we err on the side of not showing warnings
-  // for any sites.
-  if (!legacy_tls_config_)
-    return true;
-  return legacy_tls_config_->ShouldSuppressLegacyTLSWarning(hostname);
+  // never suppress any warning
+  return false;
 }
 
 void SSLConfigServiceMojo::OnNewCRLSet(scoped_refptr<net::CRLSet> crl_set) {
