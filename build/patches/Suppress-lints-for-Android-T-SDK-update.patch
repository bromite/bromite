From: "Torne (Richard Coles)" <torne@google.com>
Date: Mon, 25 Jul 2022 16:39:37 +0000
Subject: Suppress lints for Android T SDK update.

A number of new lints trigger when updating the SDK to Android T. Most
of these are uses of Resources.getIdentifier which is discouraged
because name-based resource lookups are slow, but most of our callsites
have no alternative.

Bug: 1339376
Change-Id: I29b32a580c3ab45e236615065ef1306474c0cba5
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3780794
Commit-Queue: Peter Wen <wnwen@chromium.org>
Auto-Submit: Richard Coles <torne@chromium.org>
Reviewed-by: Peter Wen <wnwen@chromium.org>
Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
Reviewed-by: Michael Bai <michaelbai@chromium.org>
Reviewed-by: Clemens Arbesser <arbesser@google.com>
Cr-Commit-Position: refs/heads/main@{#1027796}
---
 .../org/chromium/android_webview/AndroidProtocolHandler.java  | 2 ++
 .../chromium/android_webview/nonembedded/LicenseActivity.java | 1 +
 .../browser/customtabs/PartialCustomTabHeightStrategy.java    | 2 ++
 .../chrome/browser/password_manager/AccountChooserDialog.java | 2 ++
 .../java/src/org/chromium/chrome/browser/tab/TabUtils.java    | 2 ++
 .../browser/webapps/WebApkIntentDataProviderFactory.java      | 4 ++++
 .../components/autofill/AutofillActionModeCallback.java       | 2 ++
 .../autofill_assistant/generic_ui/AssistantColor.java         | 2 ++
 .../autofill_assistant/generic_ui/AssistantDrawable.java      | 2 ++
 .../qr_code/permission/AssistantQrCodePermissionView.java     | 1 +
 .../external_intents/ExternalNavigationHandler.java           | 3 ++-
 .../strictmode/ReflectiveThreadStrictModeInterceptor.java     | 2 +-
 12 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/android_webview/java/src/org/chromium/android_webview/AndroidProtocolHandler.java b/android_webview/java/src/org/chromium/android_webview/AndroidProtocolHandler.java
--- a/android_webview/java/src/org/chromium/android_webview/AndroidProtocolHandler.java
+++ b/android_webview/java/src/org/chromium/android_webview/AndroidProtocolHandler.java
@@ -93,6 +93,8 @@ public class AndroidProtocolHandler {
                 packageName + ".R$" + assetType);
     }
 
+    // file://android_res/ has no choice but to do name-based resource lookups
+    @SuppressWarnings("DiscouragedApi")
     private static int getFieldId(String assetType, String assetName)
             throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
         Context appContext = ContextUtils.getApplicationContext();
diff --git a/android_webview/nonembedded/java/src/org/chromium/android_webview/nonembedded/LicenseActivity.java b/android_webview/nonembedded/java/src/org/chromium/android_webview/nonembedded/LicenseActivity.java
--- a/android_webview/nonembedded/java/src/org/chromium/android_webview/nonembedded/LicenseActivity.java
+++ b/android_webview/nonembedded/java/src/org/chromium/android_webview/nonembedded/LicenseActivity.java
@@ -24,6 +24,7 @@ public class LicenseActivity extends Activity {
     private static final String LICENSES_CONTENT_TYPE = "text/html";
 
     @Override
+    @SuppressWarnings("DiscouragedApi")
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         final String packageName = getPackageName();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/PartialCustomTabHeightStrategy.java b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/PartialCustomTabHeightStrategy.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/PartialCustomTabHeightStrategy.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/PartialCustomTabHeightStrategy.java
@@ -830,6 +830,8 @@ public class PartialCustomTabHeightStrategy extends CustomTabHeightStrategy
         return displayMetrics.heightPixels;
     }
 
+    // status_bar_height is not a public framework resource, so we have to getIdentifier()
+    @SuppressWarnings("DiscouragedApi")
     private @Px int getStatusBarHeight() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
             return mActivity.getWindowManager()
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/AccountChooserDialog.java
@@ -213,6 +213,8 @@ public class AccountChooserDialog
         mDialog.show();
     }
 
+    // status_bar_height is not a public framework resource, so we have to getIdentifier()
+    @SuppressWarnings("DiscouragedApi")
     private void showTooltip(View view, String message, int layoutId) {
         Context context = view.getContext();
         Resources resources = context.getResources();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
@@ -82,6 +82,8 @@ public class TabUtils {
      * @param context The application context.
      * @return The estimated prerender size in pixels.
      */
+    // status_bar_height is not a public framework resource, so we have to getIdentifier()
+    @SuppressWarnings("DiscouragedApi")
     public static Rect estimateContentSize(Context context) {
         // The size is estimated as:
         // X = screenSizeX
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkIntentDataProviderFactory.java b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkIntentDataProviderFactory.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkIntentDataProviderFactory.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkIntentDataProviderFactory.java
@@ -162,6 +162,8 @@ public class WebApkIntentDataProviderFactory {
      * @param resources
      * @return A list of shortcut items derived from the parser.
      */
+    // looking up resources from other apps requires the use of getIdentifier()
+    @SuppressWarnings("DiscouragedApi")
     private static List<ShortcutItem> parseShortcutItems(String webApkPackageName, Resources res) {
         int shortcutsResId =
                 res.getIdentifier(RESOURCE_SHORTCUTS, RESOURCE_XML_TYPE, webApkPackageName);
@@ -223,6 +225,8 @@ public class WebApkIntentDataProviderFactory {
      * @param shareData Shared information from the share intent.
      * @param shareDataActivityClassName Name of WebAPK activity which received share intent.
      */
+    // looking up resources from other apps requires the use of getIdentifier()
+    @SuppressWarnings("DiscouragedApi")
     public static BrowserServicesIntentDataProvider create(Intent intent, String webApkPackageName,
             String url, int source, boolean forceNavigation,
             boolean canUseSplashFromContentProvider, ShareData shareData,
diff --git a/components/android_autofill/browser/java/src/org/chromium/components/autofill/AutofillActionModeCallback.java b/components/android_autofill/browser/java/src/org/chromium/components/autofill/AutofillActionModeCallback.java
--- a/components/android_autofill/browser/java/src/org/chromium/components/autofill/AutofillActionModeCallback.java
+++ b/components/android_autofill/browser/java/src/org/chromium/components/autofill/AutofillActionModeCallback.java
@@ -19,6 +19,8 @@ public class AutofillActionModeCallback implements ActionMode.Callback {
     private final int mAutofillMenuItemTitle;
     private final int mAutofillMenuItem;
 
+    // using getIdentifier to work around not-exposed framework resource ID
+    @SuppressWarnings("DiscouragedApi")
     public AutofillActionModeCallback(Context context, AutofillProvider autofillProvider) {
         mContext = context;
         mAutofillProvider = autofillProvider;
diff --git a/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantColor.java b/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantColor.java
--- a/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantColor.java
+++ b/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantColor.java
@@ -33,6 +33,7 @@ public abstract class AssistantColor {
     }
 
     @CalledByNative
+    @SuppressWarnings("DiscouragedApi")
     public static boolean isValidResourceIdentifier(Context context, String resourceIdentifier) {
         int colorId = context.getResources().getIdentifier(
                 resourceIdentifier, "color", context.getPackageName());
@@ -64,6 +65,7 @@ public abstract class AssistantColor {
     @Nullable
     @ColorInt
     @CalledByNative
+    @SuppressWarnings("DiscouragedApi")
     public static Integer createFromResource(Context context, String resourceIdentifier) {
         int colorId = context.getResources().getIdentifier(
                 resourceIdentifier, "color", context.getPackageName());
diff --git a/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantDrawable.java b/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantDrawable.java
--- a/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantDrawable.java
+++ b/components/autofill_assistant/android/java/src/org/chromium/components/autofill_assistant/generic_ui/AssistantDrawable.java
@@ -57,6 +57,7 @@ public abstract class AssistantDrawable {
 
     /** Returns whether {@code resourceId} is a valid resource identifier. */
     @CalledByNative
+    @SuppressWarnings("DiscouragedApi")
     public static boolean isValidDrawableResource(Context context, String resourceId) {
         int drawableId = context.getResources().getIdentifier(
                 resourceId, "drawable", context.getPackageName());
@@ -167,6 +168,7 @@ public abstract class AssistantDrawable {
         }
 
         @Override
+        @SuppressWarnings("DiscouragedApi")
         public void getDrawable(Context context, Callback<Drawable> callback) {
             int drawableId = context.getResources().getIdentifier(
                     mResourceId, "drawable", context.getPackageName());
diff --git a/components/autofill_assistant/guided_browsing/android/java/src/org/chromium/components/autofill_assistant/guided_browsing/qr_code/permission/AssistantQrCodePermissionView.java b/components/autofill_assistant/guided_browsing/android/java/src/org/chromium/components/autofill_assistant/guided_browsing/qr_code/permission/AssistantQrCodePermissionView.java
--- a/components/autofill_assistant/guided_browsing/android/java/src/org/chromium/components/autofill_assistant/guided_browsing/qr_code/permission/AssistantQrCodePermissionView.java
+++ b/components/autofill_assistant/guided_browsing/android/java/src/org/chromium/components/autofill_assistant/guided_browsing/qr_code/permission/AssistantQrCodePermissionView.java
@@ -42,6 +42,7 @@ public class AssistantQrCodePermissionView {
     /**
      * The AssistantQrCodePermissionView constructor.
      */
+    @SuppressWarnings("DiscouragedApi")
     public AssistantQrCodePermissionView(Context context, AssistantQrCodePermissionType permission,
             AssistantQrCodePermissionView.Delegate delegate,
             AssistantQrCodePermissionCallback permissionCallback) {
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -2117,7 +2117,8 @@ public class ExternalNavigationHandler {
         return OverrideUrlLoadingResult.forExternalIntent();
     }
 
-    @SuppressWarnings("UseCompatLoadingForDrawables")
+    // looking up resources from other apps requires the use of getIdentifier()
+    @SuppressWarnings({"UseCompatLoadingForDrawables", "DiscouragedApi"})
     private OverrideUrlLoadingResult startActivityWithChooser(final Intent intent,
             QueryIntentActivitiesSupplier resolvingInfos, ResolveActivitySupplier resolveActivity,
             GURL browserFallbackUrl, GURL intentDataUrl, GURL referrerUrl, Context context,
diff --git a/components/strictmode/android/java/src/org/chromium/components/strictmode/ReflectiveThreadStrictModeInterceptor.java b/components/strictmode/android/java/src/org/chromium/components/strictmode/ReflectiveThreadStrictModeInterceptor.java
--- a/components/strictmode/android/java/src/org/chromium/components/strictmode/ReflectiveThreadStrictModeInterceptor.java
+++ b/components/strictmode/android/java/src/org/chromium/components/strictmode/ReflectiveThreadStrictModeInterceptor.java
@@ -107,7 +107,7 @@ final class ReflectiveThreadStrictModeInterceptor implements ThreadStrictModeInt
     }
 
     /** @param o {@code android.os.StrictMode.ViolationInfo} */
-    @SuppressWarnings({"unchecked", "DiscouragedPrivateApi", "PrivateApi"})
+    @SuppressWarnings({"unchecked", "DiscouragedPrivateApi", "PrivateApi", "BlockedPrivateApi"})
     private int getViolationType(Object violationInfo) {
         try {
             Class<?> violationInfoClass = Class.forName("android.os.StrictMode$ViolationInfo");
-- 
2.37.3

