From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Mon, 12 Feb 2018 21:28:53 +0100
Subject: ungoogled-chromium: Disable translate integration

Remove translate offer
---
 .../xml/languages_detailed_preferences.xml    | 18 -----
 .../java/res/xml/languages_preferences.xml    |  5 --
 .../language/settings/LanguageSettings.java   | 80 +------------------
 .../strings/android_chrome_strings.grd        |  3 -
 .../core/browser/translate_manager.cc         |  5 +-
 .../core/browser/translate_script.cc          | 19 ++---
 6 files changed, 11 insertions(+), 119 deletions(-)

diff --git a/chrome/android/java/res/xml/languages_detailed_preferences.xml b/chrome/android/java/res/xml/languages_detailed_preferences.xml
--- a/chrome/android/java/res/xml/languages_detailed_preferences.xml
+++ b/chrome/android/java/res/xml/languages_detailed_preferences.xml
@@ -29,22 +29,4 @@
 
     </PreferenceCategory>
 
-    <PreferenceCategory
-        android:key="translation_settings_section"
-        android:order="3"
-        android:title="@string/languages_settings_title"
-        app:initialExpandedChildrenCount="1">
-
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="translate_switch"
-            android:summaryOn="@string/languages_send_translate_switch"
-            android:summaryOff="@string/languages_send_translate_switch" />
-
-        <org.chromium.chrome.browser.language.settings.LanguageItemPickerPreference
-            android:key="translate_settings_target_language"
-            android:title="@string/languages_settings_target"
-            app:allowDividerBelow="false" />
-
-    </PreferenceCategory>
-
 </PreferenceScreen>
diff --git a/chrome/android/java/res/xml/languages_preferences.xml b/chrome/android/java/res/xml/languages_preferences.xml
--- a/chrome/android/java/res/xml/languages_preferences.xml
+++ b/chrome/android/java/res/xml/languages_preferences.xml
@@ -11,9 +11,4 @@
         android:layout="@layout/languages_preference"
         android:widgetLayout="@layout/accept_languages_list" />
 
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="translate_switch"
-        android:summaryOn="@string/languages_offer_translate_switch"
-        android:summaryOff="@string/languages_offer_translate_switch" />
-
 </PreferenceScreen>
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/language/settings/LanguageSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/language/settings/LanguageSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/language/settings/LanguageSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/language/settings/LanguageSettings.java
@@ -42,15 +42,9 @@ public class LanguageSettings
     // The keys for each preference shown on the languages page.
     static final String APP_LANGUAGE_SECTION_KEY = "app_language_section";
     static final String APP_LANGUAGE_PREFERENCE_KEY = "app_language_preference";
-    static final String PREFERRED_LANGUAGES_KEY = "preferred_languages";
+    
     static final String CONTENT_LANGUAGES_KEY = "content_languages_preference";
-    static final String TRANSLATE_SWITCH_KEY = "translate_switch";
-
-    static final String TRANSLATION_SETTINGS_SECTION = "translation_settings_section";
-    static final String TARGET_LANGUAGE_KEY = "translate_settings_target_language";
-    static final String AUTOMATIC_LANGUAGES_KEY = "translate_settings_automatic_languages";
-    static final String NO_PROMPT_LANGUAGES_KEY = "translate_settings_no_prompt_languages";
-    static final String NO_PROMPT_SITES_KEY = "translate_settings_no_prompt_sites";
+    static final String PREFERRED_LANGUAGES_KEY = "preferred_languages";
 
     @Override
     public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
@@ -75,27 +69,6 @@ public class LanguageSettings
         LanguageListPreference mLanguageListPref =
                 (LanguageListPreference) findPreference(PREFERRED_LANGUAGES_KEY);
         mLanguageListPref.registerActivityLauncher(this);
-
-        ChromeSwitchPreference translateSwitch =
-                (ChromeSwitchPreference) findPreference(TRANSLATE_SWITCH_KEY);
-        boolean isTranslateEnabled = getPrefService().getBoolean(Pref.OFFER_TRANSLATE_ENABLED);
-        translateSwitch.setChecked(isTranslateEnabled);
-
-        translateSwitch.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-            @Override
-            public boolean onPreferenceChange(Preference preference, Object newValue) {
-                boolean enabled = (boolean) newValue;
-                getPrefService().setBoolean(Pref.OFFER_TRANSLATE_ENABLED, enabled);
-                mLanguageListPref.notifyPrefChanged();
-                LanguagesManager.recordAction(enabled ? LanguagesManager.LanguageSettingsActionType
-                                                                .ENABLE_TRANSLATE_GLOBALLY
-                                                      : LanguagesManager.LanguageSettingsActionType
-                                                                .DISABLE_TRANSLATE_GLOBALLY);
-                return true;
-            }
-        });
-        translateSwitch.setManagedPreferenceDelegate((ChromeManagedPreferenceDelegate) preference
-                -> getPrefService().isManagedPreference(Pref.OFFER_TRANSLATE_ENABLED));
     }
 
     /**
@@ -139,48 +112,6 @@ public class LanguageSettings
      * @param languageListPreference LanguageListPreference reference to update about state changes.
      */
     private void setupTranslateSection(LanguageListPreference languageListPreference) {
-        ChromeSwitchPreference translateSwitch =
-                (ChromeSwitchPreference) findPreference(TRANSLATE_SWITCH_KEY);
-        boolean isTranslateEnabled = getPrefService().getBoolean(Pref.OFFER_TRANSLATE_ENABLED);
-        translateSwitch.setChecked(isTranslateEnabled);
-
-        PreferenceCategory translationSettingsSection =
-                (PreferenceCategory) findPreference(TRANSLATION_SETTINGS_SECTION);
-        translationSettingsSection.setOnExpandButtonClickListener(
-                new PreferenceGroup.OnExpandButtonClickListener() {
-                    @Override
-                    public void onExpandButtonClick() {
-                        LanguagesManager.recordImpression(LanguagesManager.LanguageSettingsPageType
-                                                                  .ADVANCED_LANGUAGE_SETTINGS);
-                    }
-                });
-
-        // Get advanced section preference items
-        LanguageItemPickerPreference targetLanguagePreference =
-                (LanguageItemPickerPreference) findPreference(TARGET_LANGUAGE_KEY);
-
-        translateSwitch.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-            @Override
-            public boolean onPreferenceChange(Preference preference, Object newValue) {
-                boolean enabled = (boolean) newValue;
-                getPrefService().setBoolean(Pref.OFFER_TRANSLATE_ENABLED, enabled);
-                languageListPreference.notifyPrefChanged();
-                targetLanguagePreference.setVisible(enabled);
-                LanguagesManager.recordAction(enabled ? LanguagesManager.LanguageSettingsActionType
-                                                                .ENABLE_TRANSLATE_GLOBALLY
-                                                      : LanguagesManager.LanguageSettingsActionType
-                                                                .DISABLE_TRANSLATE_GLOBALLY);
-                return true;
-            }
-        });
-        translateSwitch.setManagedPreferenceDelegate((ChromeManagedPreferenceDelegate) preference
-                -> getPrefService().isManagedPreference(Pref.OFFER_TRANSLATE_ENABLED));
-
-        targetLanguagePreference.setLanguageItem(TranslateBridge.getTargetLanguage());
-        setSelectLanguageLauncher(targetLanguagePreference,
-                AddLanguageFragment.LANGUAGE_OPTIONS_TRANSLATE_LANGUAGES,
-                REQUEST_CODE_CHANGE_TARGET_LANGUAGE,
-                LanguagesManager.LanguageSettingsPageType.TARGET_LANGUAGE);
     }
 
     @Override
@@ -208,13 +139,6 @@ public class LanguageSettings
                     LanguagesManager.LanguageSettingsActionType.CHANGE_CHROME_LANGUAGE);
         } else if (requestCode == REQUEST_CODE_CHANGE_TARGET_LANGUAGE
                 && resultCode == Activity.RESULT_OK) {
-            String code = data.getStringExtra(AddLanguageFragment.INTENT_SELECTED_LANGUAGE);
-            LanguageItemPickerPreference targetLanguagePreference =
-                    (LanguageItemPickerPreference) findPreference(TARGET_LANGUAGE_KEY);
-            targetLanguagePreference.setLanguageItem(code);
-            TranslateBridge.setDefaultTargetLanguage(code);
-            LanguagesManager.recordAction(
-                    LanguagesManager.LanguageSettingsActionType.CHANGE_TARGET_LANGUAGE);
         }
     }
 
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -1184,9 +1184,6 @@ Your Google account may have other forms of browsing history like searches and a
       <message name="IDS_LANGUAGES_LIST_DESCRIPTION" desc="Description on the Languages settings screen. Appears above a list of one or more languages that the user selects, to tell Chrome which languages they prefer to use to read website content.">
         Websites will show text in your preferred language, when possible.
       </message>
-      <message name="IDS_LANGUAGES_OFFER_TRANSLATE_SWITCH" desc="Appears next to the 'offer to translate' switch that controls whether or not Chrome will display the Google Translate UI on web pages that are not in the user's preferred language(s).">
-        Offer to translate pages in other languages
-      </message>
       <message name="IDS_LANGUAGES_SEND_TRANSLATE_SWITCH" desc="Appears next to the switch controlling whether or not Chrome will offer to translate pages in other languages.  When enabled the Google Translate UI will be displayed on web pages that are not in the user's preferred language(s).">
         Offer to send pages in other languages to Google Translate
       </message>
diff --git a/components/translate/core/browser/translate_manager.cc b/components/translate/core/browser/translate_manager.cc
--- a/components/translate/core/browser/translate_manager.cc
+++ b/components/translate/core/browser/translate_manager.cc
@@ -855,8 +855,9 @@ void TranslateManager::FilterIsTranslatePossible(
         ->LogAutofillAssistantDeferredTriggerDecision();
   }
 
-  if (!ignore_missing_key_for_testing_ &&
-      !::google_apis::HasAPIKeyConfigured()) {
+//  if (!ignore_missing_key_for_testing_ &&
+//      !::google_apis::HasAPIKeyConfigured()) {
+    if (true) {
     // Without an API key, translate won't work, so don't offer to translate in
     // the first place. Leave prefs::kOfferTranslateEnabled on, though, because
     // that settings syncs and we don't want to turn off translate everywhere
diff --git a/components/translate/core/browser/translate_script.cc b/components/translate/core/browser/translate_script.cc
--- a/components/translate/core/browser/translate_script.cc
+++ b/components/translate/core/browser/translate_script.cc
@@ -126,19 +126,12 @@ void TranslateScript::OnScriptFetchComplete(bool success,
     data_ = base::StringPrintf("var translateApiKey = '%s';\n",
                                google_apis::GetAPIKey().c_str());
 
-    // Insert server params to pass experimental params to google translate
-    // server.
-    std::string server_params;
-    std::map<std::string, std::string> params;
-    base::StringAppendF(
-        &data_, "var gtTimeInfo = {'fetchStart': %0.f, 'fetchEnd': %0.f};\n",
-        script_fetch_start_time_, base::Time::Now().ToJsTime());
-    base::StringAppendF(&data_, "var serverParams = '%s';\n",
-                        server_params.c_str());
-
-    GURL security_origin = translate::GetTranslateSecurityOrigin();
-    base::StringAppendF(&data_, "var securityOrigin = '%s';",
-                        security_origin.spec().c_str());
+     base::StringAppendF(&data_, "var serverParams = '';\n");
+     base::StringAppendF(
+         &data_, "var gtTimeInfo = {'fetchStart': %0.f, 'fetchEnd': %0.f};\n",
+         script_fetch_start_time_, base::Time::Now().ToJsTime());
+
+    base::StringAppendF(&data_, "var securityOrigin = '';");
 
     // Load embedded translate.js.
     data_.append(ui::ResourceBundle::GetSharedInstance().LoadDataResourceString(
-- 
2.17.1

