From: uazo <uazo@users.noreply.github.com>
Date: Sat, 13 Nov 2021 09:17:06 +0000
Subject: Disable FLoC and privacy sandbox

Remove UI from the settings and set the flags to inactive
Permanently removes FLoC support, disabling the download of LSH clusters,
the marking the history navigation and the javascript API and permission policies.
Also added the disabling of blink features through the DisabledForBromite tag
---
 .../java/res/xml/privacy_preferences.xml      |  4 --
 .../privacy/settings/PrivacySettings.java     | 16 ------
 .../browser/chrome_content_browser_client.cc  |  3 ++
 .../privacy_sandbox/generated_floc_pref.cc    |  2 +-
 .../history/core/browser/history_backend.cc   | 13 +----
 .../history/core/browser/history_service.cc   |  2 +-
 .../privacy_sandbox/privacy_sandbox_prefs.cc  |  4 +-
 .../privacy_sandbox_settings.cc               | 51 +++++--------------
 .../privacy_sandbox_settings.h                |  1 -
 9 files changed, 21 insertions(+), 75 deletions(-)

diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -70,10 +70,6 @@
         android:title="@string/open_external_links_incognito_title"
         android:summary="@string/open_external_links_incognito_summary"
         android:defaultValue="false" />
-    <Preference
-        android:key="privacy_sandbox"
-        android:title="@string/prefs_privacy_sandbox"
-        android:fragment="org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment"/>
     <PreferenceCategory
         android:key="services_category"
         android:title="@string/services_category_title">
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -73,7 +73,6 @@ public class PrivacySettings
     private static final String PREF_SECURE_DNS = "secure_dns";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
-    private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
     private static final String PREF_PRIVACY_REVIEW = "privacy_review";
     private static final String PREF_INCOGNITO_LOCK = "incognito_lock";
     private static final String PREF_PHONE_AS_A_SECURITY_KEY = "phone_as_a_security_key";
@@ -103,15 +102,6 @@ public class PrivacySettings
         SettingsUtils.addPreferencesFromResource(this, R.xml.privacy_preferences);
         getActivity().setTitle(R.string.prefs_privacy_security);
 
-        Preference sandboxPreference = findPreference(PREF_PRIVACY_SANDBOX);
-        sandboxPreference.setSummary(PrivacySandboxSettingsFragment.getStatusString(getContext()));
-        // Overwrite the click listener to pass a correct referrer to the fragment.
-        sandboxPreference.setOnPreferenceClickListener(preference -> {
-            PrivacySandboxSettingsFragmentV3.launchPrivacySandboxSettings(getContext(),
-                    new SettingsLauncherImpl(), PrivacySandboxReferrer.PRIVACY_SETTINGS);
-            return true;
-        });
-
         Preference privacyReviewPreference = findPreference(PREF_PRIVACY_REVIEW);
         if (!ChromeFeatureList.isEnabled(ChromeFeatureList.PRIVACY_REVIEW)) {
             getPreferenceScreen().removePreference(privacyReviewPreference);
@@ -284,12 +274,6 @@ public class PrivacySettings
             secureDnsPref.setSummary(SecureDnsSettings.getSummary(getContext()));
         }
 
-        Preference privacySandboxPreference = findPreference(PREF_PRIVACY_SANDBOX);
-        if (privacySandboxPreference != null) {
-            privacySandboxPreference.setSummary(
-                    PrivacySandboxSettingsFragment.getStatusString(getContext()));
-        }
-
         mIncognitoLockSettings.updateIncognitoReauthPreferenceIfNeeded(getActivity());
     }
 
diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -2808,6 +2808,9 @@ bool ChromeContentBrowserClient::IsConversionMeasurementOperationAllowed(
     const url::Origin* impression_origin,
     const url::Origin* conversion_origin,
     const url::Origin* reporting_origin) {
+  // make sure that this is always disabled in Bromite even if privacy sandbox is already disabled in the prefs
+  if ((true))
+    return false;
   Profile* profile = Profile::FromBrowserContext(browser_context);
 
   PrivacySandboxSettings* privacy_sandbox_settings =
diff --git a/chrome/browser/privacy_sandbox/generated_floc_pref.cc b/chrome/browser/privacy_sandbox/generated_floc_pref.cc
--- a/chrome/browser/privacy_sandbox/generated_floc_pref.cc
+++ b/chrome/browser/privacy_sandbox/generated_floc_pref.cc
@@ -35,7 +35,7 @@ extensions::settings_private::SetPrefResult GeneratedFlocPref::SetPref(
     return extensions::settings_private::SetPrefResult::PREF_NOT_MODIFIABLE;
 
   profile_->GetPrefs()->SetBoolean(prefs::kPrivacySandboxFlocEnabled,
-                                   value->GetBool());
+                                   false);
 
   return extensions::settings_private::SetPrefResult::SUCCESS;
 }
diff --git a/components/history/core/browser/history_backend.cc b/components/history/core/browser/history_backend.cc
--- a/components/history/core/browser/history_backend.cc
+++ b/components/history/core/browser/history_backend.cc
@@ -495,18 +495,7 @@ void HistoryBackend::SetBrowsingTopicsAllowed(ContextID context_id,
   if (!visit_id)
     return;
 
-  // Only add to the annotations table if the visit_id exists in the visits
-  // table.
-  VisitContentAnnotations annotations;
-  if (db_->GetContentAnnotationsForVisit(visit_id, &annotations)) {
-    annotations.annotation_flags |=
-        VisitContentAnnotationFlag::kBrowsingTopicsEligible;
-    db_->UpdateContentAnnotationsForVisit(visit_id, annotations);
-  } else {
-    annotations.annotation_flags |=
-        VisitContentAnnotationFlag::kBrowsingTopicsEligible;
-    db_->AddContentAnnotationsForVisit(visit_id, annotations);
-  }
+  // in Bromite disallow marking anything in history related to topics
   ScheduleCommit();
 }
 
diff --git a/components/history/core/browser/history_service.cc b/components/history/core/browser/history_service.cc
--- a/components/history/core/browser/history_service.cc
+++ b/components/history/core/browser/history_service.cc
@@ -392,7 +392,7 @@ void HistoryService::AddPage(const GURL& url,
   AddPage(HistoryAddPageArgs(
       url, time, context_id, nav_entry_id, referrer, redirects, transition,
       !ui::PageTransitionIsMainFrame(transition), visit_source,
-      did_replace_entry, /*consider_for_ntp_most_visited=*/true, floc_allowed));
+      did_replace_entry, /*consider_for_ntp_most_visited=*/true, /*floc_allowed*/false));
 }
 
 void HistoryService::AddPage(const GURL& url,
diff --git a/components/privacy_sandbox/privacy_sandbox_prefs.cc b/components/privacy_sandbox/privacy_sandbox_prefs.cc
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -48,7 +48,7 @@ namespace privacy_sandbox {
 
 void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxApisEnabled, true,
+      prefs::kPrivacySandboxApisEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxApisEnabledV2, false);
   registry->RegisterBooleanPref(
@@ -60,7 +60,7 @@ void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterTimePref(prefs::kPrivacySandboxFlocDataAccessibleSince,
                              base::Time());
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxFlocEnabled, true,
+      prefs::kPrivacySandboxFlocEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterDictionaryPref(prefs::kPrivacySandboxFledgeJoinBlocked);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxNoticeDisplayed, false);
diff --git a/components/privacy_sandbox/privacy_sandbox_settings.cc b/components/privacy_sandbox/privacy_sandbox_settings.cc
--- a/components/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/components/privacy_sandbox/privacy_sandbox_settings.cc
@@ -82,8 +82,7 @@ PrivacySandboxSettings::PrivacySandboxSettings(
     bool incognito_profile)
     : host_content_settings_map_(host_content_settings_map),
       cookie_settings_(cookie_settings),
-      pref_service_(pref_service),
-      incognito_profile_(incognito_profile) {
+      pref_service_(pref_service) {
   DCHECK(pref_service_);
   DCHECK(host_content_settings_map_);
   DCHECK(cookie_settings_);
@@ -104,22 +103,13 @@ PrivacySandboxSettings::PrivacySandboxSettings(
 PrivacySandboxSettings::~PrivacySandboxSettings() = default;
 
 bool PrivacySandboxSettings::IsFlocAllowed() const {
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxFlocEnabled) &&
-         IsPrivacySandboxEnabled();
+  return false;
 }
 
 bool PrivacySandboxSettings::IsFlocAllowedForContext(
     const GURL& url,
     const absl::optional<url::Origin>& top_frame_origin) const {
-  // If FLoC is disabled completely, it is not available in any context.
-  if (!IsFlocAllowed())
-    return false;
-
-  ContentSettingsForOneType cookie_settings;
-  cookie_settings_->GetCookieSettings(&cookie_settings);
-
-  return IsPrivacySandboxEnabledForContext(url, top_frame_origin,
-                                           cookie_settings);
+  return false;
 }
 
 base::Time PrivacySandboxSettings::FlocDataAccessibleSince() const {
@@ -128,11 +118,8 @@ base::Time PrivacySandboxSettings::FlocDataAccessibleSince() const {
 
 void PrivacySandboxSettings::SetFlocDataAccessibleFromNow(
     bool reset_calculate_timer) const {
-  pref_service_->SetTime(prefs::kPrivacySandboxFlocDataAccessibleSince,
-                         base::Time::Now());
-
-  for (auto& observer : observers_)
-    observer.OnFlocDataAccessibleSinceUpdated(reset_calculate_timer);
+  // don't tell anyone, thanks.
+  pref_service_->ClearPref(prefs::kPrivacySandboxFlocDataAccessibleSince);
 }
 
 bool PrivacySandboxSettings::IsConversionMeasurementAllowed(
@@ -262,6 +249,8 @@ bool PrivacySandboxSettings::IsFledgeJoiningAllowed(
 bool PrivacySandboxSettings::IsFledgeAllowed(
     const url::Origin& top_frame_origin,
     const url::Origin& auction_party) {
+  if ((true))
+    return false;
   // If the sandbox is disabled, then FLEDGE is never allowed.
   if (!IsPrivacySandboxEnabled())
     return false;
@@ -290,30 +279,17 @@ std::vector<GURL> PrivacySandboxSettings::FilterFledgeAllowedParties(
 }
 
 bool PrivacySandboxSettings::IsPrivacySandboxEnabled() const {
-  // Which preference is consulted is dependent on whether release 3 of the
-  // settings is available.
-  if (base::FeatureList::IsEnabled(privacy_sandbox::kPrivacySandboxSettings3)) {
-    // For Privacy Sandbox Settings 3, APIs are disabled in incognito.
-    if (incognito_profile_)
-      return false;
-
-    // The V2 pref was introduced with the 3rd Privacy Sandbox release.
-    return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabledV2);
-  }
-
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabled);
+  return false;
 }
 
 void PrivacySandboxSettings::SetPrivacySandboxEnabled(bool enabled) {
   pref_service_->SetBoolean(prefs::kPrivacySandboxManuallyControlled, true);
 
-  // Only apply the decision to the appropriate preference. Confirmation logic
-  // DCHECKS that the user has not been able to enable the V2 preference
-  // without seeing a dialog.
+  // in Bromite never enable the privacy sandbox
   if (base::FeatureList::IsEnabled(privacy_sandbox::kPrivacySandboxSettings3)) {
-    pref_service_->SetBoolean(prefs::kPrivacySandboxApisEnabledV2, enabled);
+    pref_service_->SetBoolean(prefs::kPrivacySandboxApisEnabledV2, false);
   } else {
-    pref_service_->SetBoolean(prefs::kPrivacySandboxApisEnabled, enabled);
+    pref_service_->SetBoolean(prefs::kPrivacySandboxApisEnabled, false);
   }
 }
 
@@ -327,7 +303,6 @@ bool PrivacySandboxSettings::IsTrustTokensAllowed() {
 }
 
 void PrivacySandboxSettings::OnCookiesCleared() {
-  SetFlocDataAccessibleFromNow(/*reset_calculate_timer=*/false);
 }
 
 void PrivacySandboxSettings::OnPrivacySandboxPrefChanged() {
@@ -351,8 +326,8 @@ void PrivacySandboxSettings::RemoveObserver(Observer* observer) {
 bool PrivacySandboxSettings::IsPrivacySandboxEnabledForContext(
     const GURL& url,
     const absl::optional<url::Origin>& top_frame_origin,
-    const ContentSettingsForOneType& cookie_settings) const {
-  if (!IsPrivacySandboxEnabled())
+    const ContentSettingsForOneType& cookie_settings) const { // always disable this in Bromite
+  if ((true))
     return false;
 
   // TODO (crbug.com/1155504): Bypassing the CookieSettings class to access
diff --git a/components/privacy_sandbox/privacy_sandbox_settings.h b/components/privacy_sandbox/privacy_sandbox_settings.h
--- a/components/privacy_sandbox/privacy_sandbox_settings.h
+++ b/components/privacy_sandbox/privacy_sandbox_settings.h
@@ -163,7 +163,6 @@ class PrivacySandboxSettings : public KeyedService {
   scoped_refptr<content_settings::CookieSettings> cookie_settings_;
   raw_ptr<PrefService> pref_service_;
   PrefChangeRegistrar pref_change_registrar_;
-  bool incognito_profile_;
 };
 
 #endif  // COMPONENTS_PRIVACY_SANDBOX_PRIVACY_SANDBOX_SETTINGS_H_
--
2.25.1
