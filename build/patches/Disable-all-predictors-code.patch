From: uazo <uazo@users.noreply.github.com>
Date: Tue, 25 Jan 2022 12:22:52 +0000
Subject: Disable all predictors code

---
 .../optimization_guide/chrome_hints_manager.cc   |  1 +
 .../optimization_guide_keyed_service.cc          |  1 -
 .../prediction_model_download_manager.cc         |  2 ++
 chrome/common/chrome_features.cc                 |  4 ++--
 .../optimization_guide/core/hints_fetcher.cc     |  1 +
 .../optimization_guide/core/hints_manager.cc     |  2 ++
 .../core/optimization_guide_features.cc          | 16 ++++++++--------
 .../core/prediction_model_fetcher_impl.cc        |  1 +
 components/optimization_guide/features.gni       |  3 +--
 components/permissions/features.cc               |  2 +-
 .../segmentation_platform/public/features.cc     |  2 +-
 third_party/blink/common/features.cc             |  2 +-
 12 files changed, 21 insertions(+), 16 deletions(-)

diff --git a/chrome/browser/optimization_guide/chrome_hints_manager.cc b/chrome/browser/optimization_guide/chrome_hints_manager.cc
--- a/chrome/browser/optimization_guide/chrome_hints_manager.cc
+++ b/chrome/browser/optimization_guide/chrome_hints_manager.cc
@@ -29,6 +29,7 @@ bool IsAllowedToFetchForNavigationPrediction(
     const absl::optional<NavigationPredictorKeyedService::Prediction>
         prediction) {
   DCHECK(prediction);
+  if ((true)) return false;
 
   if (prediction->prediction_source() !=
       NavigationPredictorKeyedService::PredictionSource::
diff --git a/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc b/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
--- a/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
+++ b/chrome/browser/optimization_guide/optimization_guide_keyed_service.cc
@@ -267,7 +267,6 @@ void OptimizationGuideKeyedService::RemoveObserverForOptimizationTargetModel(
 void OptimizationGuideKeyedService::RegisterOptimizationTypes(
     const std::vector<optimization_guide::proto::OptimizationType>&
         optimization_types) {
-  hints_manager_->RegisterOptimizationTypes(optimization_types);
 }
 
 optimization_guide::OptimizationGuideDecision
diff --git a/chrome/browser/optimization_guide/prediction/prediction_model_download_manager.cc b/chrome/browser/optimization_guide/prediction/prediction_model_download_manager.cc
--- a/chrome/browser/optimization_guide/prediction/prediction_model_download_manager.cc
+++ b/chrome/browser/optimization_guide/prediction/prediction_model_download_manager.cc
@@ -103,6 +103,7 @@ PredictionModelDownloadManager::PredictionModelDownloadManager(
 PredictionModelDownloadManager::~PredictionModelDownloadManager() = default;
 
 void PredictionModelDownloadManager::StartDownload(const GURL& download_url) {
+  if ((true)) return;
   download::DownloadParams download_params;
   download_params.client =
       download::DownloadClient::OPTIMIZATION_GUIDE_PREDICTION_MODELS;
@@ -208,6 +209,7 @@ void PredictionModelDownloadManager::OnDownloadFailed(const std::string& guid) {
 absl::optional<std::pair<base::FilePath, base::FilePath>>
 PredictionModelDownloadManager::ProcessDownload(
     const base::FilePath& file_path) {
+  if ((true)) return absl::nullopt;
   DCHECK(background_task_runner_->RunsTasksInCurrentSequence());
 
   if (!switches::ShouldSkipModelDownloadVerificationForTesting()) {
diff --git a/chrome/common/chrome_features.cc b/chrome/common/chrome_features.cc
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -823,7 +823,7 @@ const base::Feature kPermissionAuditing{"PermissionAuditing",
 // Enables using the prediction service for permission prompts. We will keep
 // this feature in order to allow us to update the holdback chance via finch.
 const base::Feature kPermissionPredictions{"PermissionPredictions",
-                                           base::FEATURE_ENABLED_BY_DEFAULT};
+                                           base::FEATURE_DISABLED_BY_DEFAULT};
 
 // The holdback chance is 30% but it can also be configured/updated
 // through finch if needed.
@@ -834,7 +834,7 @@ const base::FeatureParam<double> kPermissionPredictionsHoldbackChance(
 
 // Enables using the prediction service for geolocation permission prompts.
 const base::Feature kPermissionGeolocationPredictions{
-    "PermissionGeolocationPredictions", base::FEATURE_DISABLED_BY_DEFAULT};
+    "PermissionGeolocationPredictions", base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 const base::FeatureParam<double>
     kPermissionGeolocationPredictionsHoldbackChance(
diff --git a/components/optimization_guide/core/hints_fetcher.cc b/components/optimization_guide/core/hints_fetcher.cc
--- a/components/optimization_guide/core/hints_fetcher.cc
+++ b/components/optimization_guide/core/hints_fetcher.cc
@@ -171,6 +171,7 @@ bool HintsFetcher::FetchOptimizationGuideServiceHints(
     optimization_guide::proto::RequestContext request_context,
     const std::string& locale,
     HintsFetchedCallback hints_fetched_callback) {
+  if ((true)) return false;
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK_GT(optimization_types.size(), 0u);
   request_context_ = request_context;
diff --git a/components/optimization_guide/core/hints_manager.cc b/components/optimization_guide/core/hints_manager.cc
--- a/components/optimization_guide/core/hints_manager.cc
+++ b/components/optimization_guide/core/hints_manager.cc
@@ -1173,6 +1173,8 @@ OptimizationTypeDecision HintsManager::CanApplyOptimization(
     proto::OptimizationType optimization_type,
     OptimizationMetadata* optimization_metadata) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if((true))
+    return optimization_guide::OptimizationTypeDecision::kNoHintAvailable;
 
   ScopedCanApplyOptimizationLogger scoped_logger(optimization_type,
                                                  navigation_url);
diff --git a/components/optimization_guide/core/optimization_guide_features.cc b/components/optimization_guide/core/optimization_guide_features.cc
--- a/components/optimization_guide/core/optimization_guide_features.cc
+++ b/components/optimization_guide/core/optimization_guide_features.cc
@@ -32,7 +32,7 @@ const base::Feature kOptimizationHints {
 #if BUILDFLAG(IS_IOS)
       base::FEATURE_DISABLED_BY_DEFAULT
 #else   // !BUILDFLAG(IS_IOS)
-      base::FEATURE_ENABLED_BY_DEFAULT
+      base::FEATURE_DISABLED_BY_DEFAULT
 #endif  // BUILDFLAG(IS_IOS)
 };
 
@@ -43,7 +43,7 @@ const base::Feature kOptimizationHintsFieldTrials{
 
 // Enables fetching from a remote Optimization Guide Service.
 const base::Feature kRemoteOptimizationGuideFetching{
-    "OptimizationHintsFetching", base::FEATURE_ENABLED_BY_DEFAULT};
+    "OptimizationHintsFetching", base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kRemoteOptimizationGuideFetchingAnonymousDataConsent {
   "OptimizationHintsFetchingAnonymousDataConsent",
@@ -62,15 +62,15 @@ const base::Feature kContextMenuPerformanceInfoAndRemoteHintFetching{
 
 // Enables the prediction of optimization targets.
 const base::Feature kOptimizationTargetPrediction{
-    "OptimizationTargetPrediction", base::FEATURE_ENABLED_BY_DEFAULT};
+    "OptimizationTargetPrediction", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Enables the downloading of models.
 const base::Feature kOptimizationGuideModelDownloading {
   "OptimizationGuideModelDownloading",
 #if BUILDFLAG(BUILD_WITH_TFLITE_LIB)
-      base::FEATURE_ENABLED_BY_DEFAULT
-#else   // BUILD_WITH_TFLITE_LIB
       base::FEATURE_DISABLED_BY_DEFAULT
+#else   // BUILD_WITH_TFLITE_LIB
+      base::FEATURE_DISABLED_BY_DEFAULT // guard this
 #endif  // !BUILD_WITH_TFLITE_LIB
 };
 
@@ -80,7 +80,7 @@ const base::Feature kPageContentAnnotations{"PageContentAnnotations",
 
 // Enables push notification of hints.
 const base::Feature kPushNotifications{"OptimizationGuidePushNotifications",
-                                       base::FEATURE_DISABLED_BY_DEFAULT};
+                                       base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 // This feature flag does not turn off any behavior, it is only used for
 // experiment parameters.
@@ -97,7 +97,7 @@ const base::Feature kPageVisibilityBatchAnnotations{
     "PageVisibilityBatchAnnotations", base::FEATURE_ENABLED_BY_DEFAULT};
 
 const base::Feature kUseLocalPageEntitiesMetadataProvider{
-    "UseLocalPageEntitiesMetadataProvider", base::FEATURE_DISABLED_BY_DEFAULT};
+    "UseLocalPageEntitiesMetadataProvider", base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 const base::Feature kBatchAnnotationsValidation{
     "BatchAnnotationsValidation", base::FEATURE_DISABLED_BY_DEFAULT};
@@ -314,7 +314,7 @@ size_t MaxURLKeyedHintCacheSize() {
 
 bool ShouldPersistHintsToDisk() {
   return GetFieldTrialParamByFeatureAsBool(kOptimizationHints,
-                                           "persist_hints_to_disk", true);
+                                           "persist_hints_to_disk", false);
 }
 
 bool ShouldOverrideOptimizationTargetDecisionForMetricsPurposes(
diff --git a/components/optimization_guide/core/prediction_model_fetcher_impl.cc b/components/optimization_guide/core/prediction_model_fetcher_impl.cc
--- a/components/optimization_guide/core/prediction_model_fetcher_impl.cc
+++ b/components/optimization_guide/core/prediction_model_fetcher_impl.cc
@@ -53,6 +53,7 @@ bool PredictionModelFetcherImpl::FetchOptimizationGuideServiceModels(
     proto::RequestContext request_context,
     const std::string& locale,
     ModelsFetchedCallback models_fetched_callback) {
+  if ((true)) return false;
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
   if (network_connection_tracker_->IsOffline()) {
diff --git a/components/optimization_guide/features.gni b/components/optimization_guide/features.gni
--- a/components/optimization_guide/features.gni
+++ b/components/optimization_guide/features.gni
@@ -7,8 +7,7 @@ import("//build/config/chrome_build.gni")
 declare_args() {
   # This enables build with TFLite library.
   # Currently only available for Desktop and Android.
-  build_with_tflite_lib = is_android || (is_win && target_cpu != "arm64") ||
-                          is_linux || is_mac || is_chromeos || is_fuchsia
+  build_with_tflite_lib = false
 
   # You can set the variable 'build_with_internal_optimization_guide' to true
   # even in a developer build in args.gn.  Setting this variable explicitly to true will
diff --git a/components/permissions/features.cc b/components/permissions/features.cc
--- a/components/permissions/features.cc
+++ b/components/permissions/features.cc
@@ -69,7 +69,7 @@ const base::Feature kPermissionPredictionServiceUseUrlOverride{
 
 const base::Feature kPermissionOnDeviceNotificationPredictions{
     "PermissionOnDeviceNotificationPredictions",
-    base::FEATURE_DISABLED_BY_DEFAULT};
+    base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 }  // namespace features
 namespace feature_params {
diff --git a/components/segmentation_platform/public/features.cc b/components/segmentation_platform/public/features.cc
--- a/components/segmentation_platform/public/features.cc
+++ b/components/segmentation_platform/public/features.cc
@@ -12,7 +12,7 @@ namespace features {
 const base::Feature kSegmentationPlatformFeature {
   "SegmentationPlatform",
 #if BUILDFLAG(IS_ANDROID)
-      base::FEATURE_ENABLED_BY_DEFAULT
+      base::FEATURE_DISABLED_BY_DEFAULT
 #else
       base::FEATURE_DISABLED_BY_DEFAULT
 #endif
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -161,7 +161,7 @@ const base::Feature kViewportHeightClientHintHeader{
 const base::Feature kNavigationPredictor {
   "NavigationPredictor",
 #if defined(OS_ANDROID)
-      base::FEATURE_ENABLED_BY_DEFAULT
+      base::FEATURE_DISABLED_BY_DEFAULT
 #else
       base::FEATURE_DISABLED_BY_DEFAULT
 #endif
--
2.25.1
