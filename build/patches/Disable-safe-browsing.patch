From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Tue, 16 Oct 2018 05:22:59 +0200
Subject: Disable safe browsing

Originally based on ungoogled-chromium patch
Contains Android-specific fixes to remove Safe Browsing
Disable CrowdDeny feature
---
 android_webview/BUILD.gn                      |   1 -
 android_webview/browser/BUILD.gn              |  24 --
 android_webview/browser/aw_browser_process.cc |  61 ----
 android_webview/browser/aw_browser_process.h  |  34 --
 .../browser/aw_content_browser_client.cc      |  61 ----
 .../browser/aw_content_browser_client.h       |   3 -
 .../browser/aw_contents_statics.cc            |  35 ---
 .../browser/aw_web_ui_controller_factory.cc   |  14 +-
 .../webview/chromium/SharedStatics.java       |  31 --
 .../WebViewChromiumFactoryProvider.java       |   6 +-
 .../android_webview/AwContentsStatics.java    |  35 ---
 .../AwSafeBrowsingConversionHelper.java       |  15 -
 android_webview/renderer/BUILD.gn             |   4 -
 .../renderer/aw_content_renderer_client.cc    |   6 +-
 .../SupportLibWebViewChromiumFactory.java     |   7 +-
 chrome/android/BUILD.gn                       |   6 -
 chrome/android/chrome_java_sources.gni        |   3 -
 .../res/xml/google_services_preferences.xml   |  24 --
 .../java/res/xml/privacy_preferences.xml      |  11 -
 .../res/xml/sync_and_services_preferences.xml |  24 --
 .../EnhancedProtectionPromoController.java    |   8 -
 .../EnhancedProtectionPromoUtils.java         |   4 +-
 .../privacy/settings/PrivacySettings.java     |  53 +---
 .../SafeBrowsingSettingsLauncher.java         |   9 -
 .../sync/settings/GoogleServicesSettings.java |  10 +-
 .../settings/SyncAndServicesSettings.java     |  15 +-
 .../EnhancedProtectionPromoTest.java          |   1 -
 .../SafeBrowsingReferringAppBridgeTest.java   |   2 -
 .../android/chrome_main_delegate_android.cc   |   3 +
 chrome/browser/BUILD.gn                       |  76 ++---
 chrome/browser/about_flags.cc                 |   2 +-
 .../tab_web_contents_delegate_android.cc      |   4 +
 chrome/browser/browser_process.h              |   7 -
 chrome/browser/browser_process_impl.cc        |  29 --
 chrome/browser/browser_process_impl.h         |   4 -
 .../chrome_browsing_data_remover_delegate.cc  |   2 +
 .../browser/chrome_content_browser_client.cc  |  38 +--
 .../browser/chrome_content_browser_client.h   |   4 +
 ...ontent_browser_client_receiver_bindings.cc |   2 +
 .../file_type_policies_component_installer.cc |  16 +-
 .../chrome_download_manager_delegate.cc       |  34 +-
 .../chrome_download_manager_delegate.h        |   8 +-
 .../browser/download/download_item_model.cc   |  15 +-
 chrome/browser/download/download_item_model.h |   4 +
 chrome/browser/download/download_prefs.cc     |  17 +-
 .../download/download_target_determiner.cc    |  44 ++-
 .../download/download_target_determiner.h     |   6 +
 .../browser/download/download_target_info.cc  |   4 +
 .../browser/download/download_target_info.h   |   4 +
 chrome/browser/download/download_ui_model.cc  |   4 +
 chrome/browser/download/download_ui_model.h   |   4 +
 .../extensions/api/downloads/downloads_api.cc |  40 +--
 .../extensions/api/downloads/downloads_api.h  |   9 -
 .../webstore_private/webstore_private_api.cc  |  44 +--
 .../chrome_settings_page_helper.cc            |   3 +-
 .../lookalike_url_controller_client.cc        |   4 -
 .../lookalike_url_navigation_throttle.cc      |   5 -
 .../metrics/chrome_metrics_service_client.cc  |   3 -
 ...ial_comparison_cert_verifier_controller.cc |   3 -
 .../chrome_password_manager_client.cc         |  12 +
 .../chrome_password_manager_client.h          |   2 +
 ...ve_origin_permission_revocation_request.cc |   2 +
 .../permissions/chrome_permissions_client.cc  |  15 -
 .../permissions/chrome_permissions_client.h   |   3 -
 ...nfiguration_policy_handler_list_factory.cc |  31 --
 ...hrome_browser_main_extra_parts_profiles.cc |   2 -
 chrome/browser/profiles/profile_impl.cc       |   4 +-
 chrome/browser/safe_browsing/BUILD.gn         |   4 +
 chrome/browser/safe_browsing/android/BUILD.gn |   4 +
 .../password_reuse_controller_android.cc      |  14 +-
 .../password_reuse_controller_android.h       |   6 +
 .../android/safe_browsing_bridge.cc           |  51 ---
 ...safe_browsing_settings_launcher_android.cc |   3 -
 .../download_protection_service.cc            |   7 -
 .../download_protection_service.h             |   5 -
 .../url_lookup_service_factory.cc             |   4 +
 chrome/browser/safety_check/android/BUILD.gn  |   1 -
 .../safety_check/SafetyCheckMediator.java     |  26 --
 .../ssl/sct_reporting_service_factory.cc      |  11 +-
 .../browser/ssl/security_state_tab_helper.cc  |  10 +-
 .../chrome_subresource_filter_client.cc       |   4 +
 chrome/browser/ui/BUILD.gn                    |  25 +-
 .../strings/android_chrome_strings.grd        |  21 --
 chrome/browser/ui/tab_helpers.cc              |  10 -
 .../webui/chrome_web_ui_controller_factory.cc |   4 -
 .../ui/webui/interstitials/interstitial_ui.cc |  13 +-
 chrome/common/safe_browsing/BUILD.gn          |   4 +
 .../chrome_content_renderer_client.cc         |   2 +
 chrome/test/BUILD.gn                          | 294 +++++++++---------
 components/BUILD.gn                           |  18 +-
 components/blocked_content/BUILD.gn           |   2 -
 components/blocked_content/popup_blocker.cc   |  28 --
 .../permissions/permission_request_manager.cc |  28 +-
 components/safe_browsing/buildflags.gni       |   2 +
 .../safe_browsing/content/browser/BUILD.gn    |   4 +
 components/safe_browsing/core/BUILD.gn        |   2 +
 .../safe_browsing/core/browser/BUILD.gn       |   1 +
 .../safe_browsing/core/browser/sync/BUILD.gn  |   1 +
 components/safe_browsing/core/features.cc     |   2 +-
 .../safe_browsing/core/file_type_policies.cc  |   3 +-
 .../safe_browsing/core/realtime/BUILD.gn      |   1 +
 .../safe_browsing/core/triggers/BUILD.gn      |   1 +
 .../content/captive_portal_blocking_page.cc   |   7 -
 .../content/cert_report_helper.cc             |   2 -
 .../unified_consent_service.cc                |   2 +-
 .../native_file_system_file_writer_impl.cc    |  42 +--
 .../native_file_system_file_writer_impl.h     |   9 +-
 ios/chrome/test/BUILD.gn                      |   4 +-
 ios/chrome/test/earl_grey2/BUILD.gn           |   2 +-
 weblayer/BUILD.gn                             |  23 --
 weblayer/test/BUILD.gn                        |   9 -
 111 files changed, 424 insertions(+), 1312 deletions(-)

diff --git a/android_webview/BUILD.gn b/android_webview/BUILD.gn
--- a/android_webview/BUILD.gn
+++ b/android_webview/BUILD.gn
@@ -566,7 +566,6 @@ android_library("browser_java") {
 
   srcjar_deps = [
     "//android_webview/browser:browser_enums",
-    "//components/safe_browsing/core/db:sb_threat_values",
   ]
 
   resources_package = "org.chromium.android_webview"
diff --git a/android_webview/browser/BUILD.gn b/android_webview/browser/BUILD.gn
--- a/android_webview/browser/BUILD.gn
+++ b/android_webview/browser/BUILD.gn
@@ -150,16 +150,6 @@ source_set("browser") {
     "renderer_host/auto_login_parser.h",
     "renderer_host/aw_render_view_host_ext.cc",
     "renderer_host/aw_render_view_host_ext.h",
-    "safe_browsing/aw_safe_browsing_allowlist_manager.cc",
-    "safe_browsing/aw_safe_browsing_allowlist_manager.h",
-    "safe_browsing/aw_safe_browsing_blocking_page.cc",
-    "safe_browsing/aw_safe_browsing_blocking_page.h",
-    "safe_browsing/aw_safe_browsing_navigation_throttle.cc",
-    "safe_browsing/aw_safe_browsing_navigation_throttle.h",
-    "safe_browsing/aw_safe_browsing_subresource_helper.cc",
-    "safe_browsing/aw_safe_browsing_subresource_helper.h",
-    "safe_browsing/aw_safe_browsing_ui_manager.cc",
-    "safe_browsing/aw_safe_browsing_ui_manager.h",
     "safe_browsing/aw_url_checker_delegate_impl.cc",
     "safe_browsing/aw_url_checker_delegate_impl.h",
     "scoped_add_feature_flags.cc",
@@ -219,20 +209,6 @@ source_set("browser") {
     "//components/printing/browser",
     "//components/printing/common",
     "//components/printing/common:mojo_interfaces",
-    "//components/safe_browsing/android:remote_database_manager",
-    "//components/safe_browsing/content",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/common:interfaces",
-    "//components/safe_browsing/content/web_ui",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core:ping_manager",
-    "//components/safe_browsing/core/browser",
-    "//components/safe_browsing/core/browser:network_context",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:safebrowsing_proto",
-    "//components/safe_browsing/core/triggers",
-    "//components/safe_browsing/core/web_ui:constants",
     "//components/security_interstitials/content:security_interstitial_page",
     "//components/security_interstitials/core",
     "//components/services/heap_profiling/public/cpp",
diff --git a/android_webview/browser/aw_browser_process.cc b/android_webview/browser/aw_browser_process.cc
--- a/android_webview/browser/aw_browser_process.cc
+++ b/android_webview/browser/aw_browser_process.cc
@@ -115,67 +115,6 @@ void AwBrowserProcess::CreateBrowserPolicyConnector() {
 }
 
 void AwBrowserProcess::InitSafeBrowsing() {
-  CreateSafeBrowsingUIManager();
-  CreateSafeBrowsingAllowlistManager();
-}
-
-void AwBrowserProcess::CreateSafeBrowsingUIManager() {
-  safe_browsing_ui_manager_ = new AwSafeBrowsingUIManager();
-}
-
-void AwBrowserProcess::CreateSafeBrowsingAllowlistManager() {
-  scoped_refptr<base::SequencedTaskRunner> background_task_runner =
-      base::ThreadPool::CreateSequencedTaskRunner(
-          {base::MayBlock(), base::TaskPriority::BEST_EFFORT});
-  scoped_refptr<base::SingleThreadTaskRunner> io_task_runner =
-      content::GetIOThreadTaskRunner({});
-  safe_browsing_allowlist_manager_ =
-      std::make_unique<AwSafeBrowsingAllowlistManager>(background_task_runner,
-                                                       io_task_runner);
-}
-
-safe_browsing::RemoteSafeBrowsingDatabaseManager*
-AwBrowserProcess::GetSafeBrowsingDBManager() {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  if (!safe_browsing_db_manager_) {
-    safe_browsing_db_manager_ =
-        new safe_browsing::RemoteSafeBrowsingDatabaseManager();
-  }
-
-  if (!safe_browsing_db_manager_started_) {
-    // V4ProtocolConfig is not used. Just create one with empty values..
-    safe_browsing::V4ProtocolConfig config("", false, "", "");
-    safe_browsing_db_manager_->StartOnIOThread(
-        GetSafeBrowsingUIManager()->GetURLLoaderFactoryOnIOThread(), config);
-    safe_browsing_db_manager_started_ = true;
-  }
-
-  return safe_browsing_db_manager_.get();
-}
-
-safe_browsing::TriggerManager*
-AwBrowserProcess::GetSafeBrowsingTriggerManager() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  if (!safe_browsing_trigger_manager_) {
-    safe_browsing_trigger_manager_ =
-        std::make_unique<safe_browsing::TriggerManager>(
-            GetSafeBrowsingUIManager(),
-            /*referrer_chain_provider=*/nullptr,
-            /*local_state_prefs=*/nullptr);
-  }
-
-  return safe_browsing_trigger_manager_.get();
-}
-
-AwSafeBrowsingAllowlistManager*
-AwBrowserProcess::GetSafeBrowsingAllowlistManager() const {
-  return safe_browsing_allowlist_manager_.get();
-}
-
-AwSafeBrowsingUIManager* AwBrowserProcess::GetSafeBrowsingUIManager() const {
-  return safe_browsing_ui_manager_.get();
 }
 
 // static
diff --git a/android_webview/browser/aw_browser_process.h b/android_webview/browser/aw_browser_process.h
--- a/android_webview/browser/aw_browser_process.h
+++ b/android_webview/browser/aw_browser_process.h
@@ -51,21 +51,6 @@ class AwBrowserProcess {
   void CreateLocalState();
   void InitSafeBrowsing();
 
-  safe_browsing::RemoteSafeBrowsingDatabaseManager* GetSafeBrowsingDBManager();
-
-  // Called on UI thread.
-  // This method lazily creates TriggerManager.
-  // Needs to happen after |safe_browsing_ui_manager_| is created.
-  safe_browsing::TriggerManager* GetSafeBrowsingTriggerManager();
-
-  // InitSafeBrowsing must be called first.
-  // Called on UI and IO threads.
-  AwSafeBrowsingAllowlistManager* GetSafeBrowsingAllowlistManager() const;
-
-  // InitSafeBrowsing must be called first.
-  // Called on UI and IO threads.
-  AwSafeBrowsingUIManager* GetSafeBrowsingUIManager() const;
-
   static void RegisterNetworkContextLocalStatePrefs(
       PrefRegistrySimple* pref_registry);
   // Constructs HttpAuthDynamicParams based on |local_state_|.
@@ -77,9 +62,6 @@ class AwBrowserProcess {
   static ApkType GetApkType();
 
  private:
-  void CreateSafeBrowsingUIManager();
-  void CreateSafeBrowsingAllowlistManager();
-
   void OnAuthPrefsChanged();
 
   void OnLoseForeground();
@@ -94,24 +76,8 @@ class AwBrowserProcess {
 
   std::unique_ptr<PrefService> local_state_;
 
-  // Accessed on both UI and IO threads.
-  scoped_refptr<AwSafeBrowsingUIManager> safe_browsing_ui_manager_;
-
-  // Accessed on UI thread only.
-  std::unique_ptr<safe_browsing::TriggerManager> safe_browsing_trigger_manager_;
-
-  // These two are accessed on IO thread only.
-  scoped_refptr<safe_browsing::RemoteSafeBrowsingDatabaseManager>
-      safe_browsing_db_manager_;
-  bool safe_browsing_db_manager_started_ = false;
-
   PrefChangeRegistrar pref_change_registrar_;
 
-  // TODO(amalova): Consider to make AllowlistManager per-profile.
-  // Accessed on UI and IO threads.
-  std::unique_ptr<AwSafeBrowsingAllowlistManager>
-      safe_browsing_allowlist_manager_;
-
   std::unique_ptr<VisibilityMetricsLogger> visibility_metrics_logger_;
   std::unique_ptr<power_metrics::AndroidBatteryMetrics> battery_metrics_;
   std::unique_ptr<AwContentsLifecycleNotifier> aw_contents_lifecycle_notifier_;
diff --git a/android_webview/browser/aw_content_browser_client.cc b/android_webview/browser/aw_content_browser_client.cc
--- a/android_webview/browser/aw_content_browser_client.cc
+++ b/android_webview/browser/aw_content_browser_client.cc
@@ -177,28 +177,6 @@ void AwContentsMessageFilter::SubFrameCreated(int parent_render_frame_id,
                                             child_render_frame_id);
 }
 
-// Helper method that checks the RenderProcessHost is still alive before hopping
-// over to the IO thread.
-void MaybeCreateSafeBrowsing(
-    int rph_id,
-    content::ResourceContext* resource_context,
-    base::RepeatingCallback<scoped_refptr<safe_browsing::UrlCheckerDelegate>()>
-        get_checker_delegate,
-    mojo::PendingReceiver<safe_browsing::mojom::SafeBrowsing> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  content::RenderProcessHost* render_process_host =
-      content::RenderProcessHost::FromID(rph_id);
-  if (!render_process_host)
-    return;
-
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(&safe_browsing::MojoSafeBrowsingImpl::MaybeCreate, rph_id,
-                     resource_context, std::move(get_checker_delegate),
-                     std::move(receiver)));
-}
-
 }  // anonymous namespace
 
 std::string GetProduct() {
@@ -605,8 +583,6 @@ AwContentBrowserClient::CreateThrottlesForNavigation(
         AwBrowserProcess::GetInstance()
             ->browser_policy_connector()
             ->GetPolicyService()));
-    throttles.push_back(
-        std::make_unique<AwSafeBrowsingNavigationThrottle>(navigation_handle));
   }
   return throttles;
 }
@@ -642,17 +618,6 @@ void AwContentBrowserClient::ExposeInterfacesToRenderer(
     service_manager::BinderRegistry* registry,
     blink::AssociatedInterfaceRegistry* associated_registry,
     content::RenderProcessHost* render_process_host) {
-  content::ResourceContext* resource_context =
-      render_process_host->GetBrowserContext()->GetResourceContext();
-  registry->AddInterface(
-      base::BindRepeating(
-          &MaybeCreateSafeBrowsing, render_process_host->GetID(),
-          resource_context,
-          base::BindRepeating(
-              &AwContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate,
-              base::Unretained(this))),
-      content::GetUIThreadTaskRunner({}));
-
 #if BUILDFLAG(ENABLE_SPELLCHECK)
   auto create_spellcheck_host =
       [](mojo::PendingReceiver<spellcheck::mojom::SpellCheckHost> receiver) {
@@ -675,18 +640,6 @@ AwContentBrowserClient::CreateURLLoaderThrottles(
 
   std::vector<std::unique_ptr<blink::URLLoaderThrottle>> result;
 
-  result.push_back(safe_browsing::BrowserURLLoaderThrottle::Create(
-      base::BindOnce(
-          [](AwContentBrowserClient* client) {
-            return client->GetSafeBrowsingUrlCheckerDelegate();
-          },
-          base::Unretained(this)),
-      wc_getter, frame_tree_node_id,
-      // TODO(crbug.com/1033760): rt_lookup_service is
-      // used to perform real time URL check, which is gated by UKM opted-in.
-      // Since AW currently doesn't support UKM, this feature is not enabled.
-      /* rt_lookup_service */ nullptr));
-
   if (request.destination == network::mojom::RequestDestination::kDocument) {
     const bool is_load_url =
         request.transition_type & ui::PAGE_TRANSITION_FROM_API;
@@ -705,20 +658,6 @@ AwContentBrowserClient::CreateURLLoaderThrottles(
   return result;
 }
 
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-AwContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate() {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  if (!safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ = new AwUrlCheckerDelegateImpl(
-        AwBrowserProcess::GetInstance()->GetSafeBrowsingDBManager(),
-        AwBrowserProcess::GetInstance()->GetSafeBrowsingUIManager(),
-        AwBrowserProcess::GetInstance()->GetSafeBrowsingAllowlistManager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
-}
-
 bool AwContentBrowserClient::ShouldOverrideUrlLoading(
     int frame_tree_node_id,
     bool browser_initiated,
diff --git a/android_webview/browser/aw_content_browser_client.h b/android_webview/browser/aw_content_browser_client.h
--- a/android_webview/browser/aw_content_browser_client.h
+++ b/android_webview/browser/aw_content_browser_client.h
@@ -240,9 +240,6 @@ class AwContentBrowserClient : public content::ContentBrowserClient {
   static void DisableCreatingThreadPool();
 
  private:
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate();
-
   // Android WebView currently has a single global (non-off-the-record) browser
   // context.
   std::unique_ptr<AwBrowserContext> browser_context_;
diff --git a/android_webview/browser/aw_contents_statics.cc b/android_webview/browser/aw_contents_statics.cc
--- a/android_webview/browser/aw_contents_statics.cc
+++ b/android_webview/browser/aw_contents_statics.cc
@@ -48,28 +48,8 @@ void NotifyClientCertificatesChanged() {
   net::CertDatabase::GetInstance()->NotifyObserversCertDBChanged();
 }
 
-void SafeBrowsingAllowlistAssigned(const JavaRef<jobject>& callback,
-                                   bool success) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  JNIEnv* env = AttachCurrentThread();
-  Java_AwContentsStatics_safeBrowsingAllowlistAssigned(env, callback, success);
-}
-
 }  // namespace
 
-// static
-ScopedJavaLocalRef<jstring>
-JNI_AwContentsStatics_GetSafeBrowsingPrivacyPolicyUrl(JNIEnv* env) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  GURL privacy_policy_url(
-      security_interstitials::kSafeBrowsingPrivacyPolicyUrl);
-  std::string locale =
-      AwBrowserProcess::GetInstance()->GetSafeBrowsingUIManager()->app_locale();
-  privacy_policy_url =
-      google_util::AppendGoogleLocaleParam(privacy_policy_url, locale);
-  return base::android::ConvertUTF8ToJavaString(env, privacy_policy_url.spec());
-}
-
 // static
 void JNI_AwContentsStatics_ClearClientCertPreferences(
     JNIEnv* env,
@@ -95,21 +75,6 @@ ScopedJavaLocalRef<jstring> JNI_AwContentsStatics_GetProductVersion(
       env, version_info::GetVersionNumber());
 }
 
-// static
-void JNI_AwContentsStatics_SetSafeBrowsingAllowlist(
-    JNIEnv* env,
-    const JavaParamRef<jobjectArray>& jrules,
-    const JavaParamRef<jobject>& callback) {
-  std::vector<std::string> rules;
-  base::android::AppendJavaStringArrayToStringVector(env, jrules, &rules);
-  AwSafeBrowsingAllowlistManager* allowlist_manager =
-      AwBrowserProcess::GetInstance()->GetSafeBrowsingAllowlistManager();
-  allowlist_manager->SetAllowlistOnUIThread(
-      std::move(rules),
-      base::BindOnce(&SafeBrowsingAllowlistAssigned,
-                     ScopedJavaGlobalRef<jobject>(env, callback)));
-}
-
 // static
 void JNI_AwContentsStatics_SetServiceWorkerIoThreadClient(
     JNIEnv* env,
diff --git a/android_webview/browser/aw_web_ui_controller_factory.cc b/android_webview/browser/aw_web_ui_controller_factory.cc
--- a/android_webview/browser/aw_web_ui_controller_factory.cc
+++ b/android_webview/browser/aw_web_ui_controller_factory.cc
@@ -5,18 +5,18 @@
 #include "android_webview/browser/aw_web_ui_controller_factory.h"
 
 #include "base/memory/ptr_util.h"
-#include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
 #include "components/safe_browsing/core/web_ui/constants.h"
 #include "content/public/browser/web_ui.h"
 #include "url/gurl.h"
+#include "base/bind.h"
+#include "base/macros.h"
+#include "content/public/browser/web_ui_controller.h"
 
 using content::WebUI;
 using content::WebUIController;
 
 namespace {
 
-const WebUI::TypeID kSafeBrowsingID = &kSafeBrowsingID;
-
 // A function for creating a new WebUI. The caller owns the return value, which
 // may be nullptr (for example, if the URL refers to an non-existent extension).
 typedef WebUIController* (*WebUIFactoryFunctionPointer)(WebUI* web_ui,
@@ -32,18 +32,10 @@ WebUIFactoryFunctionPointer GetWebUIFactoryFunctionPointer(const GURL& url) {
   // WebUI pages here must remain in the base module instead of being moved to
   // the Developer UI Dynamic Feature Module (DevUI DFM). Therefore the hosts
   // here must not appear in IsWebUiHostInDevUiDfm().
-  if (url.host() == safe_browsing::kChromeUISafeBrowsingHost) {
-    return &NewWebUI<safe_browsing::SafeBrowsingUI>;
-  }
-
   return nullptr;
 }
 
 WebUI::TypeID GetWebUITypeID(const GURL& url) {
-  if (url.host() == safe_browsing::kChromeUISafeBrowsingHost) {
-    return kSafeBrowsingID;
-  }
-
   return WebUI::kNoWebUI;
 }
 
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java b/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
--- a/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/SharedStatics.java
@@ -88,37 +88,6 @@ public class SharedStatics {
         return AwContentsClient.parseFileChooserResult(resultCode, intent);
     }
 
-    /**
-     * Starts Safe Browsing initialization. This should only be called once.
-     * @param context is the application context the WebView will be used in.
-     * @param callback will be called with the value true if initialization is
-     * successful. The callback will be run on the UI thread.
-     */
-    public void initSafeBrowsing(Context context, Callback<Boolean> callback) {
-        // clang-format off
-        PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT,
-                () -> AwContentsStatics.initSafeBrowsing(context, callback));
-        // clang-format on
-    }
-
-    public void setSafeBrowsingAllowlist(List<String> urls, Callback<Boolean> callback) {
-        // clang-format off
-        PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT,
-                () -> AwContentsStatics.setSafeBrowsingAllowlist(urls, callback));
-        // clang-format on
-    }
-
-    /**
-     * Returns a URL pointing to the privacy policy for Safe Browsing reporting.
-     *
-     * @return the url pointing to a privacy policy document which can be displayed
-     * to users.
-     */
-    public Uri getSafeBrowsingPrivacyPolicyUrl() {
-        return PostTask.runSynchronously(UiThreadTaskTraits.DEFAULT,
-                () -> AwContentsStatics.getSafeBrowsingPrivacyPolicyUrl());
-    }
-
     public boolean isMultiProcessEnabled() {
         return AwContentsStatics.isMultiProcessEnabled();
     }
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
@@ -512,20 +512,16 @@ public class WebViewChromiumFactoryProvider implements WebViewFactoryProvider {
 
                     @Override
                     public void initSafeBrowsing(Context context, ValueCallback<Boolean> callback) {
-                        sharedStatics.initSafeBrowsing(
-                                context, CallbackConverter.fromValueCallback(callback));
                     }
 
                     @Override
                     public void setSafeBrowsingWhitelist(
                             List<String> urls, ValueCallback<Boolean> callback) {
-                        sharedStatics.setSafeBrowsingAllowlist(
-                                urls, CallbackConverter.fromValueCallback(callback));
                     }
 
                     @Override
                     public Uri getSafeBrowsingPrivacyPolicyUrl() {
-                        return sharedStatics.getSafeBrowsingPrivacyPolicyUrl();
+                        return Uri.EMPTY;
                     }
 
                     public boolean isMultiProcessEnabled() {
diff --git a/android_webview/java/src/org/chromium/android_webview/AwContentsStatics.java b/android_webview/java/src/org/chromium/android_webview/AwContentsStatics.java
--- a/android_webview/java/src/org/chromium/android_webview/AwContentsStatics.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContentsStatics.java
@@ -94,39 +94,6 @@ public class AwContentsStatics {
         AwContentsStaticsJni.get().setServiceWorkerIoThreadClient(ioThreadClient, browserContext);
     }
 
-    @CalledByNative
-    private static void safeBrowsingAllowlistAssigned(Callback<Boolean> callback, boolean success) {
-        if (callback == null) return;
-        callback.onResult(success);
-    }
-
-    public static void setSafeBrowsingAllowlist(List<String> urls, Callback<Boolean> callback) {
-        String[] urlArray = urls.toArray(new String[urls.size()]);
-        if (callback == null) {
-            callback = b -> {
-            };
-        }
-        AwContentsStaticsJni.get().setSafeBrowsingAllowlist(urlArray, callback);
-    }
-
-    @SuppressWarnings("NoContextGetApplicationContext")
-    public static void initSafeBrowsing(Context context, final Callback<Boolean> callback) {
-        // Wrap the callback to make sure we always invoke it on the UI thread, as guaranteed by the
-        // API.
-        Callback<Boolean> wrapperCallback = b -> {
-            if (callback != null) {
-                PostTask.runOrPostTask(UiThreadTaskTraits.DEFAULT, callback.bind(b));
-            }
-        };
-
-        PlatformServiceBridge.getInstance().warmUpSafeBrowsing(
-                context.getApplicationContext(), wrapperCallback);
-    }
-
-    public static Uri getSafeBrowsingPrivacyPolicyUrl() {
-        return Uri.parse(AwContentsStaticsJni.get().getSafeBrowsingPrivacyPolicyUrl());
-    }
-
     public static void setCheckClearTextPermitted(boolean permitted) {
         AwContentsStaticsJni.get().setCheckClearTextPermitted(permitted);
     }
@@ -184,13 +151,11 @@ public class AwContentsStatics {
         void logCommandLineForDebugging();
         void logFlagMetrics(String[] switches, String[] features);
 
-        String getSafeBrowsingPrivacyPolicyUrl();
         void clearClientCertPreferences(Runnable callback);
         String getUnreachableWebDataUrl();
         String getProductVersion();
         void setServiceWorkerIoThreadClient(
                 AwContentsIoThreadClient ioThreadClient, AwBrowserContext browserContext);
-        void setSafeBrowsingAllowlist(String[] urls, Callback<Boolean> callback);
         void setCheckClearTextPermitted(boolean permitted);
         boolean isMultiProcessEnabled();
     }
diff --git a/android_webview/java/src/org/chromium/android_webview/safe_browsing/AwSafeBrowsingConversionHelper.java b/android_webview/java/src/org/chromium/android_webview/safe_browsing/AwSafeBrowsingConversionHelper.java
--- a/android_webview/java/src/org/chromium/android_webview/safe_browsing/AwSafeBrowsingConversionHelper.java
+++ b/android_webview/java/src/org/chromium/android_webview/safe_browsing/AwSafeBrowsingConversionHelper.java
@@ -8,7 +8,6 @@ import android.os.Build;
 import android.webkit.WebViewClient;
 
 import org.chromium.base.ContextUtils;
-import org.chromium.components.safe_browsing.SBThreatType;
 
 /**
  * This is a helper class to map native SafeBrowsingActions and SAFE_BROWSING_THREATs to the
@@ -46,21 +45,7 @@ public final class AwSafeBrowsingConversionHelper {
      * Build.VERSION_CODES#O_MR1} (when we added the original Safe Browisng threat type constants).
      */
     public static int convertThreatType(int chromiumThreatType) {
-        switch (chromiumThreatType) {
-            case SBThreatType.URL_MALWARE:
-                return SAFE_BROWSING_THREAT_MALWARE;
-            case SBThreatType.URL_PHISHING:
-                return SAFE_BROWSING_THREAT_PHISHING;
-            case SBThreatType.URL_UNWANTED:
-                return SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE;
-            case SBThreatType.BILLING:
-                return ContextUtils.getApplicationContext().getApplicationInfo().targetSdkVersion
-                                >= Build.VERSION_CODES.Q
-                        ? SAFE_BROWSING_THREAT_BILLING
-                        : SAFE_BROWSING_THREAT_UNKNOWN;
-            default:
                 return SAFE_BROWSING_THREAT_UNKNOWN;
-        }
     }
 
     // Do not instantiate this class.
diff --git a/android_webview/renderer/BUILD.gn b/android_webview/renderer/BUILD.gn
--- a/android_webview/renderer/BUILD.gn
+++ b/android_webview/renderer/BUILD.gn
@@ -45,10 +45,6 @@ source_set("renderer") {
     "//components/printing/common",
     "//components/printing/renderer",
     "//components/resources",
-    "//components/safe_browsing/content/common:interfaces",
-    "//components/safe_browsing/content/renderer:throttles",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
     "//components/security_interstitials/core",
     "//components/security_interstitials/core/common/mojom",
diff --git a/android_webview/renderer/aw_content_renderer_client.cc b/android_webview/renderer/aw_content_renderer_client.cc
--- a/android_webview/renderer/aw_content_renderer_client.cc
+++ b/android_webview/renderer/aw_content_renderer_client.cc
@@ -223,15 +223,13 @@ void AwContentRendererClient::AddSupportedKeySystems(
 
 std::unique_ptr<content::WebSocketHandshakeThrottleProvider>
 AwContentRendererClient::CreateWebSocketHandshakeThrottleProvider() {
-  return std::make_unique<AwWebSocketHandshakeThrottleProvider>(
-      browser_interface_broker_.get());
+  return nullptr;
 }
 
 std::unique_ptr<content::URLLoaderThrottleProvider>
 AwContentRendererClient::CreateURLLoaderThrottleProvider(
     content::URLLoaderThrottleProviderType provider_type) {
-  return std::make_unique<AwURLLoaderThrottleProvider>(
-      browser_interface_broker_.get(), provider_type);
+  return nullptr;
 }
 
 void AwContentRendererClient::GetInterface(
diff --git a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
--- a/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
+++ b/android_webview/support_library/java/src/org/chromium/support_lib_glue/SupportLibWebViewChromiumFactory.java
@@ -243,27 +243,22 @@ class SupportLibWebViewChromiumFactory implements WebViewProviderFactoryBoundary
         @Override
         public void initSafeBrowsing(Context context, ValueCallback<Boolean> callback) {
             recordApiCall(ApiCall.INIT_SAFE_BROWSING);
-            mSharedStatics.initSafeBrowsing(context, CallbackConverter.fromValueCallback(callback));
         }
 
         @Override
         public void setSafeBrowsingAllowlist(Set<String> hosts, ValueCallback<Boolean> callback) {
             recordApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST);
-            mSharedStatics.setSafeBrowsingAllowlist(
-                    new ArrayList<>(hosts), CallbackConverter.fromValueCallback(callback));
         }
 
         @Override
         public void setSafeBrowsingWhitelist(List<String> hosts, ValueCallback<Boolean> callback) {
             recordApiCall(ApiCall.SET_SAFE_BROWSING_ALLOWLIST_DEPRECATED_NAME);
-            mSharedStatics.setSafeBrowsingAllowlist(
-                    hosts, CallbackConverter.fromValueCallback(callback));
         }
 
         @Override
         public Uri getSafeBrowsingPrivacyPolicyUrl() {
             recordApiCall(ApiCall.GET_SAFE_BROWSING_PRIVACY_POLICY_URL);
-            return mSharedStatics.getSafeBrowsingPrivacyPolicyUrl();
+            return Uri.EMPTY;
         }
 
         @Override
diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -332,7 +332,6 @@ android_library("chrome_java") {
     "//chrome/browser/privacy:java",
     "//chrome/browser/privacy_sandbox/android:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/safe_browsing/android:java",
     "//chrome/browser/safety_check/android:java",
     "//chrome/browser/settings:java",
     "//chrome/browser/share:java",
@@ -1090,8 +1089,6 @@ android_library("chrome_test_java") {
     "//chrome/browser/policy/android:java",
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/safe_browsing/android:java",
-    "//chrome/browser/safe_browsing/android:javatests",
     "//chrome/browser/safety_check/android:java",
     "//chrome/browser/safety_check/android:javatests",
     "//chrome/browser/settings:java",
@@ -3440,9 +3437,6 @@ generate_jni("chrome_jni_headers") {
     "java/src/org/chromium/chrome/browser/resources/ResourceMapper.java",
     "java/src/org/chromium/chrome/browser/rlz/RevenueStats.java",
     "java/src/org/chromium/chrome/browser/rlz/RlzPingHandler.java",
-    "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingPasswordReuseDialogBridge.java",
-    "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridge.java",
-    "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java",
     "java/src/org/chromium/chrome/browser/search_engines/TemplateUrlServiceFactory.java",
     "java/src/org/chromium/chrome/browser/sharing/SharingJNIBridge.java",
     "java/src/org/chromium/chrome/browser/sharing/SharingServiceProxy.java",
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -1202,9 +1202,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/resources/ResourceMapper.java",
   "java/src/org/chromium/chrome/browser/rlz/RevenueStats.java",
   "java/src/org/chromium/chrome/browser/rlz/RlzPingHandler.java",
-  "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingPasswordReuseDialogBridge.java",
-  "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridge.java",
-  "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java",
   "java/src/org/chromium/chrome/browser/safety_check/SafetyCheckUpdatesDelegateImpl.java",
   "java/src/org/chromium/chrome/browser/search_engines/SearchEngineChoiceMetrics.java",
   "java/src/org/chromium/chrome/browser/search_engines/SearchEngineChoiceNotification.java",
diff --git a/chrome/android/java/res/xml/google_services_preferences.xml b/chrome/android/java/res/xml/google_services_preferences.xml
--- a/chrome/android/java/res/xml/google_services_preferences.xml
+++ b/chrome/android/java/res/xml/google_services_preferences.xml
@@ -24,30 +24,6 @@
         android:title="@string/autocomplete_searches_and_urls_title"
         android:summary="@string/autocomplete_searches_and_urls_summary"
         android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="navigation_error"
-        android:title="@string/navigation_error_suggestions_title"
-        android:summary="@string/navigation_error_suggestions_summary"
-        android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="safe_browsing"
-        android:title="@string/safe_browsing_title"
-        android:summary="@string/safe_browsing_summary"
-        android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="password_leak_detection"
-        android:title="@string/passwords_leak_detection_switch_title"
-        android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="safe_browsing_scout_reporting"
-        android:title="@string/safe_browsing_scout_reporting_title"
-        android:summary="@string/safe_browsing_scout_reporting_summary"
-        android:persistent="false"/>
-    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-        android:key="usage_and_crash_reports"
-        android:title="@string/usage_and_crash_reports_title"
-        android:summary="@string/usage_and_crash_reports_summary"
-        android:persistent="false"/>
     <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
         android:key="url_keyed_anonymized_data"
         android:title="@string/url_keyed_anonymized_data_title"
diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -18,11 +18,6 @@
         android:summary="@string/preload_pages_summary"
         android:persistent="false"
         android:order="1"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="usage_stats_reporting"
-        android:title="@string/usage_stats_setting_title"
-        android:persistent="false"
-        android:order="2"/>
     <Preference
         android:fragment="org.chromium.chrome.browser.privacy.settings.DoNotTrackSettings"
         android:key="do_not_track"
@@ -39,12 +34,6 @@
         android:summary="@string/clear_browsing_data_summary"
         android:fragment="org.chromium.chrome.browser.browsing_data.ClearBrowsingDataTabsFragment"
         android:order="5"/>
-    <Preference
-        android:key="safe_browsing"
-        android:title="@string/prefs_safe_browsing_title"
-        android:summary="@string/prefs_safe_browsing_summary"
-        android:fragment="org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment"
-        android:order="6"/>
     <Preference
         android:key="privacy_sandbox"
         android:title="@string/prefs_privacy_sandbox"
diff --git a/chrome/android/java/res/xml/sync_and_services_preferences.xml b/chrome/android/java/res/xml/sync_and_services_preferences.xml
--- a/chrome/android/java/res/xml/sync_and_services_preferences.xml
+++ b/chrome/android/java/res/xml/sync_and_services_preferences.xml
@@ -56,30 +56,6 @@
             android:title="@string/autocomplete_searches_and_urls_title"
             android:summary="@string/autocomplete_searches_and_urls_summary"
             android:persistent="false"/>
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="navigation_error"
-            android:title="@string/navigation_error_suggestions_title"
-            android:summary="@string/navigation_error_suggestions_summary"
-            android:persistent="false"/>
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="safe_browsing"
-            android:title="@string/safe_browsing_title"
-            android:summary="@string/safe_browsing_summary"
-            android:persistent="false"/>
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="password_leak_detection"
-            android:title="@string/passwords_leak_detection_switch_title"
-            android:persistent="false"/>
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="safe_browsing_scout_reporting"
-            android:title="@string/safe_browsing_scout_reporting_title"
-            android:summary="@string/safe_browsing_scout_reporting_summary"
-            android:persistent="false"/>
-        <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
-            android:key="usage_and_crash_reports"
-            android:title="@string/usage_and_crash_reports_title"
-            android:summary="@string/usage_and_crash_reports_summary"
-            android:persistent="false"/>
         <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
             android:key="url_keyed_anonymized_data"
             android:title="@string/url_keyed_anonymized_data_title"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
@@ -16,8 +16,6 @@ import androidx.appcompat.content.res.AppCompatResources;
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.ntp.cards.promo.enhanced_protection.EnhancedProtectionPromoUtils.EnhancedProtectionPromoAction;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.components.browser_ui.widget.promo.PromoCardCoordinator;
@@ -171,12 +169,6 @@ public class EnhancedProtectionPromoController {
     }
 
     private void onPrimaryButtonClicked() {
-        EnhancedProtectionPromoUtils.recordEnhancedProtectionPromoEvent(
-                EnhancedProtectionPromoAction.ACCEPTED);
-        SettingsLauncher launcher = new SettingsLauncherImpl();
-        launcher.launchSettingsActivity(mContext, SafeBrowsingSettingsFragment.class,
-                SafeBrowsingSettingsFragment.createArguments(
-                        SettingsAccessPoint.SURFACE_EXPLORER_PROMO_SLINGER));
     }
 
     private void onPromoSeen() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
@@ -14,7 +14,6 @@ import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.components.user_prefs.UserPrefs;
 
 import java.lang.annotation.Retention;
@@ -65,8 +64,7 @@ final class EnhancedProtectionPromoUtils {
         // TODO(bdea): If the user has pressed "Continue" and not selected Enhanced Protection,
         // should we still show the promo.
         return (profile != null) && !UserPrefs.get(profile).getBoolean(Pref.SAFE_BROWSING_ENHANCED)
-                && !isPromoDismissedInSharedPreference() && (timesSeen <= maxImpressions)
-                && !SafeBrowsingBridge.isSafeBrowsingManaged();
+                && !isPromoDismissedInSharedPreference() && (timesSeen <= maxImpressions);
     }
 
     static boolean isPromoDismissedInSharedPreference() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -21,15 +21,12 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.privacy.secure_dns.SecureDnsSettings;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.sync.settings.GoogleServicesSettings;
 import org.chromium.chrome.browser.sync.settings.ManageSyncSettings;
 import org.chromium.chrome.browser.sync.settings.SyncAndServicesSettings;
-import org.chromium.chrome.browser.usage_stats.UsageStatsConsentDialog;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
@@ -48,15 +45,14 @@ public class PrivacySettings
     private static final String PREF_CAN_MAKE_PAYMENT = "can_make_payment";
     private static final String PREF_NETWORK_PREDICTIONS = "preload_pages";
     private static final String PREF_SECURE_DNS = "secure_dns";
-    private static final String PREF_USAGE_STATS = "usage_stats_reporting";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
-    private static final String PREF_SAFE_BROWSING = "safe_browsing";
     private static final String PREF_SYNC_AND_SERVICES_LINK = "sync_and_services_link";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
     private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
     private static final String[] NEW_PRIVACY_PREFERENCE_ORDER = {PREF_CLEAR_BROWSING_DATA,
-            PREF_SAFE_BROWSING, PREF_CAN_MAKE_PAYMENT, PREF_NETWORK_PREDICTIONS, PREF_USAGE_STATS,
-            PREF_SECURE_DNS, PREF_DO_NOT_TRACK, PREF_PRIVACY_SANDBOX, PREF_SYNC_AND_SERVICES_LINK};
+            PREF_CAN_MAKE_PAYMENT, PREF_NETWORK_PREDICTIONS,
+            PREF_SECURE_DNS, PREF_DO_NOT_TRACK, PREF_PRIVACY_SANDBOX, PREF_SYNC_AND_SERVICES_LINK
+        };
 
     private ManagedPreferenceDelegate mManagedPreferenceDelegate;
 
@@ -82,23 +78,6 @@ public class PrivacySettings
             getPreferenceScreen().removePreference(findPreference(PREF_PRIVACY_SANDBOX));
         }
 
-        // If the flag for adding a "Safe Browsing" section UI is enabled, a "Safe Browsing" section
-        // will be added under this section and this section will be renamed to "Privacy and
-        // security". See (go/esb-clank-dd) for more context.
-        if (ChromeFeatureList.isEnabled(ChromeFeatureList.SAFE_BROWSING_SECTION_UI)) {
-            getActivity().setTitle(R.string.prefs_privacy_security);
-            Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-            safeBrowsingPreference.setSummary(
-                    SafeBrowsingSettingsFragment.getSafeBrowsingSummaryString(getContext()));
-            safeBrowsingPreference.setOnPreferenceClickListener((preference) -> {
-                preference.getExtras().putInt(SafeBrowsingSettingsFragment.ACCESS_POINT,
-                        SettingsAccessPoint.PARENT_SETTINGS);
-                return false;
-            });
-        } else {
-            getActivity().setTitle(R.string.prefs_privacy);
-            getPreferenceScreen().removePreference(findPreference(PREF_SAFE_BROWSING));
-        }
         setHasOptionsMenu(true);
 
         mManagedPreferenceDelegate = createManagedPreferenceDelegate();
@@ -201,32 +180,6 @@ public class PrivacySettings
         if (secureDnsPref != null && secureDnsPref.isVisible()) {
             secureDnsPref.setSummary(SecureDnsSettings.getSummary(getContext()));
         }
-
-        Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        if (safeBrowsingPreference != null && safeBrowsingPreference.isVisible()) {
-            safeBrowsingPreference.setSummary(
-                    SafeBrowsingSettingsFragment.getSafeBrowsingSummaryString(getContext()));
-        }
-
-        Preference usageStatsPref = findPreference(PREF_USAGE_STATS);
-        if (usageStatsPref != null) {
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
-                    && prefService.getBoolean(Pref.USAGE_STATS_ENABLED)) {
-                usageStatsPref.setOnPreferenceClickListener(preference -> {
-                    UsageStatsConsentDialog
-                            .create(getActivity(), true,
-                                    (didConfirm) -> {
-                                        if (didConfirm) {
-                                            updateSummaries();
-                                        }
-                                    })
-                            .show();
-                    return true;
-                });
-            } else {
-                getPreferenceScreen().removePreference(usageStatsPref);
-            }
-        }
     }
 
     private ChromeManagedPreferenceDelegate createManagedPreferenceDelegate() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java b/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
@@ -6,8 +6,6 @@ package org.chromium.chrome.browser.safe_browsing;
 import android.content.Context;
 
 import org.chromium.base.annotations.CalledByNative;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.components.browser_ui.settings.SettingsLauncher;
 import org.chromium.content_public.browser.WebContents;
@@ -21,12 +19,5 @@ public class SafeBrowsingSettingsLauncher {
 
     @CalledByNative
     private static void showSafeBrowsingSettings(WebContents webContents) {
-        WindowAndroid window = webContents.getTopLevelNativeWindow();
-        if (window == null) return;
-        Context currentContext = window.getContext().get();
-        SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-        settingsLauncher.launchSettingsActivity(currentContext, SafeBrowsingSettingsFragment.class,
-                SafeBrowsingSettingsFragment.createArguments(
-                        SettingsAccessPoint.SECURITY_INTERSTITIAL));
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -29,7 +29,6 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManagerImpl;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
 import org.chromium.chrome.browser.signin.services.SigninManager;
@@ -252,9 +251,6 @@ public class GoogleServicesSettings
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             assert !mIsSecurityPreferenceRemoved;
             mPrefService.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            assert !mIsSecurityPreferenceRemoved;
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefService.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -307,8 +303,7 @@ public class GoogleServicesSettings
         assert !mIsSecurityPreferenceRemoved;
         boolean safe_browsing_enabled = mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED);
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -338,9 +333,6 @@ public class GoogleServicesSettings
             if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
-            if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
-            }
             if (PREF_SAFE_BROWSING.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
             }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
@@ -47,7 +47,6 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManagerImpl;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsActivity;
 import org.chromium.chrome.browser.signin.services.IdentityServicesProvider;
@@ -108,8 +107,6 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
     public static final String PREF_SAFE_BROWSING = "safe_browsing";
     @VisibleForTesting
     public static final String PREF_PASSWORD_LEAK_DETECTION = "password_leak_detection";
-    @VisibleForTesting
-    public static final String PREF_SAFE_BROWSING_SCOUT_REPORTING = "safe_browsing_scout_reporting";
     private static final String PREF_USAGE_AND_CRASH_REPORTING = "usage_and_crash_reports";
     private static final String PREF_URL_KEYED_ANONYMIZED_DATA = "url_keyed_anonymized_data";
     private static final String PREF_CONTEXTUAL_SEARCH = "contextual_search";
@@ -221,7 +218,6 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
         if (mIsSafeBrowsingPreferenceRemoved) {
             removePreference(servicesCategory, findPreference(PREF_SAFE_BROWSING));
             removePreference(servicesCategory, findPreference(PREF_PASSWORD_LEAK_DETECTION));
-            removePreference(servicesCategory, findPreference(PREF_SAFE_BROWSING_SCOUT_REPORTING));
             mSafeBrowsing = null;
             mPasswordLeakDetection = null;
             mSafeBrowsingReporting = null;
@@ -235,8 +231,6 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
             mPasswordLeakDetection.setOnPreferenceChangeListener(this);
             mPasswordLeakDetection.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
 
-            mSafeBrowsingReporting =
-                    (ChromeSwitchPreference) findPreference(PREF_SAFE_BROWSING_SCOUT_REPORTING);
             mSafeBrowsingReporting.setOnPreferenceChangeListener(this);
             mSafeBrowsingReporting.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
         }
@@ -403,9 +397,6 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             assert !mIsSafeBrowsingPreferenceRemoved;
             mPrefService.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            assert !mIsSafeBrowsingPreferenceRemoved;
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefService.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -659,8 +650,7 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
         assert !mIsSafeBrowsingPreferenceRemoved;
         boolean safe_browsing_enabled = mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED);
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -687,9 +677,6 @@ public class SyncAndServicesSettings extends PreferenceFragmentCompat
             if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
-            if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
-            }
             if (PREF_SAFE_BROWSING.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
             }
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoTest.java
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoTest.java
@@ -50,7 +50,6 @@ import org.chromium.chrome.browser.ntp.cards.promo.enhanced_protection.EnhancedP
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsActivity;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
diff --git a/chrome/android/junit/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridgeTest.java b/chrome/android/junit/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridgeTest.java
--- a/chrome/android/junit/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridgeTest.java
+++ b/chrome/android/junit/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingReferringAppBridgeTest.java
@@ -24,8 +24,6 @@ import org.robolectric.util.ReflectionHelpers;
 import org.chromium.base.test.BaseRobolectricTestRunner;
 import org.chromium.chrome.browser.IntentHandler;
 import org.chromium.chrome.browser.app.ChromeActivity;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingReferringAppBridge.ReferringAppInfo;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingReferringAppBridge.ReferringAppInfo.ReferringAppSource;
 import org.chromium.ui.base.WindowAndroid;
 
 import java.lang.ref.WeakReference;
diff --git a/chrome/app/android/chrome_main_delegate_android.cc b/chrome/app/android/chrome_main_delegate_android.cc
--- a/chrome/app/android/chrome_main_delegate_android.cc
+++ b/chrome/app/android/chrome_main_delegate_android.cc
@@ -6,6 +6,7 @@
 
 #include "base/android/jni_android.h"
 #include "base/base_paths_android.h"
+#include "base/feature_list.h"
 #include "base/files/file_path.h"
 #include "base/files/file_util.h"
 #include "base/logging.h"
@@ -25,7 +26,9 @@
 #endif
 
 namespace {
+#if BUILDFLAG(SAFE_BROWSING_DB_REMOTE)
 using safe_browsing::SafeBrowsingApiHandler;
+#endif
 
 // Whether to use the process start time for startup metrics.
 const base::Feature kUseProcessStartTimeForMetrics{
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1135,8 +1135,6 @@ static_library("browser") {
     "permissions/adaptive_quiet_notification_permission_ui_enabler.h",
     "permissions/chrome_permissions_client.cc",
     "permissions/chrome_permissions_client.h",
-    "permissions/contextual_notification_permission_ui_selector.cc",
-    "permissions/contextual_notification_permission_ui_selector.h",
     "permissions/crowd_deny_preload_data.cc",
     "permissions/crowd_deny_preload_data.h",
     "permissions/crowd_deny_safe_browsing_request.cc",
@@ -1523,17 +1521,6 @@ static_library("browser") {
     "renderer_host/chrome_navigation_ui_data.h",
     "renderer_preferences_util.cc",
     "renderer_preferences_util.h",
-    "reputation/local_heuristics.cc",
-    "reputation/local_heuristics.h",
-    "reputation/reputation_service.cc",
-    "reputation/reputation_service.h",
-    "reputation/reputation_web_contents_observer.cc",
-    "reputation/reputation_web_contents_observer.h",
-    "reputation/safety_tip_ui.h",
-    "reputation/safety_tip_ui_helper.cc",
-    "reputation/safety_tip_ui_helper.h",
-    "reputation/url_elision_policy.cc",
-    "reputation/url_elision_policy.h",
     "resource_coordinator/resource_coordinator_parts.cc",
     "resource_coordinator/resource_coordinator_parts.h",
     "resource_coordinator/session_restore_policy.cc",
@@ -1921,7 +1908,6 @@ static_library("browser") {
   allow_circular_includes_from = [
     "//chrome/browser/ui",
     "//chrome/browser/ui/webui/bluetooth_internals",
-    "//chrome/browser/safe_browsing",
   ]
 
   public_deps = [
@@ -1998,8 +1984,6 @@ static_library("browser") {
     "//chrome/browser/push_messaging:budget_proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
     "//chrome/browser/resource_coordinator:tab_manager_features",
-    "//chrome/browser/safe_browsing",
-    "//chrome/browser/safe_browsing:advanced_protection",
     "//chrome/browser/search/drive:mojo_bindings",
     "//chrome/browser/search/task_module:mojo_bindings",
     "//chrome/browser/sharing:buildflags",
@@ -2178,22 +2162,20 @@ static_library("browser") {
     "//components/reading_list/core",
     "//components/reading_list/features:flags",
     "//components/renderer_context_menu",
-    "//components/reputation/core",
-    "//components/reputation/core:proto",
     "//components/resources",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/password_protection",
-    "//components/safe_browsing/core:download_file_types_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core:file_type_policies",
-    "//components/safe_browsing/core:public",
-    "//components/safe_browsing/core/browser",
-    "//components/safe_browsing/core/browser/sync",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_policy_handler",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/realtime:policy_engine",
-    "//components/safe_browsing/core/realtime:url_lookup_service",
+    # "//components/safe_browsing/content/browser",
+    # "//components/safe_browsing/content/password_protection",
+    # "//components/safe_browsing/core:download_file_types_proto",
+    # "//components/safe_browsing/core:features",
+    # "//components/safe_browsing/core:file_type_policies",
+    # "//components/safe_browsing/core:public",
+    # "//components/safe_browsing/core/browser",
+    # "//components/safe_browsing/core/browser/sync",
+    # "//components/safe_browsing/core/common",
+    # "//components/safe_browsing/core/common:safe_browsing_policy_handler",
+    # "//components/safe_browsing/core/db:database_manager",
+    # "//components/safe_browsing/core/realtime:policy_engine",
+    # "//components/safe_browsing/core/realtime:url_lookup_service",
     "//components/safe_search_api",
     "//components/safe_search_api:safe_search_client",
     "//components/schema_org/common:improved_mojom",
@@ -3173,16 +3155,6 @@ static_library("browser") {
       "profiles/profile_manager_android.cc",
       "profiles/profile_manager_android.h",
       "query_tiles/android/tile_provider_factory.cc",
-      "reputation/safety_tip_infobar.cc",
-      "reputation/safety_tip_infobar.h",
-      "reputation/safety_tip_infobar_delegate.cc",
-      "reputation/safety_tip_infobar_delegate.h",
-      "safe_browsing/android/password_reuse_controller_android.cc",
-      "safe_browsing/android/password_reuse_controller_android.h",
-      "safe_browsing/android/safe_browsing_referring_app_bridge_android.cc",
-      "safe_browsing/android/safe_browsing_referring_app_bridge_android.h",
-      "safe_browsing/android/safe_browsing_settings_launcher_android.cc",
-      "safe_browsing/android/safe_browsing_settings_launcher_android.h",
       "search/contextual_search_policy_handler_android.cc",
       "search/contextual_search_policy_handler_android.h",
       "search_engines/template_url_service_factory_android.cc",
@@ -3329,7 +3301,7 @@ static_library("browser") {
       "//components/reading_list/features:flags",
       "//components/resources:android_resources",
       "//components/resources:components_resources",
-      "//components/safe_browsing/core/password_protection:password_protection_metrics_util",
+      #"//components/safe_browsing/core/password_protection:password_protection_metrics_util",
       "//components/security_state/content/android",
       "//components/send_tab_to_self",
       "//components/signin/internal/identity_manager",  # cf android / signin /
@@ -3536,8 +3508,6 @@ static_library("browser") {
       "download/download_commands.h",
       "download/download_crx_util.cc",
       "download/download_crx_util.h",
-      "download/download_danger_prompt.cc",
-      "download/download_danger_prompt.h",
       "download/download_dir_policy_handler.cc",
       "download/download_dir_policy_handler.h",
       "download/download_dir_util.cc",
@@ -4801,8 +4771,8 @@ static_library("browser") {
       ":chrome_process_finder",
       "//base/win:base_win_buildflags",
       "//chrome/app/theme:chrome_unscaled_resources_grit",
-      "//chrome/browser/safe_browsing/chrome_cleaner",
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
+      #"//chrome/browser/safe_browsing/chrome_cleaner",
+      #"//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/web_applications/chrome_pwa_launcher:util",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/chrome_elf:constants",
@@ -4833,7 +4803,8 @@ static_library("browser") {
       "//ui/base/cursor",
     ]
     allow_circular_includes_from +=
-        [ "//chrome/browser/safe_browsing/chrome_cleaner" ]
+        [ #"//chrome/browser/safe_browsing/chrome_cleaner" 
+        ]
 
     all_dependent_configs = [ ":browser_win_linker_flags" ]
 
@@ -6698,7 +6669,7 @@ static_library("test_support") {
 
   public_deps = [
     ":browser",
-    "//chrome/browser/safe_browsing:test_support",
+    #"//chrome/browser/safe_browsing:test_support",
     "//chrome/browser/ui:test_support",
   ]
   deps = [
@@ -6707,7 +6678,7 @@ static_library("test_support") {
     "//chrome/browser",
     "//chrome/browser:browser_process",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
+    #"//chrome/common/safe_browsing:proto",
     "//components/consent_auditor:test_support",
     "//components/invalidation/impl",
     "//components/invalidation/impl:test_support",
@@ -6715,9 +6686,7 @@ static_library("test_support") {
     "//components/policy/core/browser:test_support",
     "//components/policy/proto:reporting_record_proto",
     "//components/prefs:test_support",
-    "//components/reputation/core",
-    "//components/reputation/core:proto",
-    "//components/safe_browsing/core:csd_proto",
+    #"//components/safe_browsing/core:csd_proto",
     "//components/search_engines:test_support",
     "//components/security_interstitials/content:security_interstitial_page",
     "//components/services/unzip/content",
@@ -6882,7 +6851,7 @@ static_library("test_support") {
     deps += [
       "//components/crx_file",
       "//components/drive:test_support",
-      "//components/safe_browsing/core/db:v4_test_util",
+      #"//components/safe_browsing/core/db:v4_test_util",
       "//components/services/unzip:in_process",
       "//components/storage_monitor:test_support",
       "//extensions:test_support",
@@ -6937,7 +6906,6 @@ static_library("test_support") {
     deps += [
       "//chrome/browser/safe_browsing",
       "//components/enterprise/common/proto:connectors_proto",
-      "//components/safe_browsing/core/db:test_database_manager",
     ]
   }
 
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -2116,7 +2116,7 @@ const FeatureEntry::FeatureParam
         {QuietNotificationPermissionUiConfig::kEnableAbusiveRequestWarning,
          "true"},
         {QuietNotificationPermissionUiConfig::kEnableCrowdDenyTriggering,
-         "true"},
+         "false"},
         {QuietNotificationPermissionUiConfig::kCrowdDenyHoldBackChance, "0"}};
 
 // The default "Enabled" option has the semantics of showing the quiet UI
diff --git a/chrome/browser/android/tab_web_contents_delegate_android.cc b/chrome/browser/android/tab_web_contents_delegate_android.cc
--- a/chrome/browser/android/tab_web_contents_delegate_android.cc
+++ b/chrome/browser/android/tab_web_contents_delegate_android.cc
@@ -39,7 +39,9 @@
 #include "chrome/browser/picture_in_picture/picture_in_picture_window_manager.h"
 #include "chrome/browser/prefetch/no_state_prefetch/prerender_manager_factory.h"
 #include "chrome/browser/profiles/profile.h"
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/safe_browsing_navigation_observer.h"
+#endif
 #include "chrome/browser/ssl/security_state_tab_helper.h"
 #include "chrome/browser/ui/android/infobars/framebust_block_infobar.h"
 #include "chrome/browser/ui/android/tab_model/tab_model_list.h"
@@ -172,8 +174,10 @@ void TabWebContentsDelegateAndroid::PortalWebContentsCreated(
   InfoBarService::CreateForWebContents(portal_contents);
   PrefsTabHelper::CreateForWebContents(portal_contents);
   DataReductionProxyTabHelper::CreateForWebContents(portal_contents);
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
       portal_contents);
+#endif
 }
 
 void TabWebContentsDelegateAndroid::RunFileChooser(
diff --git a/chrome/browser/browser_process.h b/chrome/browser/browser_process.h
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -50,10 +50,6 @@ class NetworkQualityTracker;
 class SharedURLLoaderFactory;
 }
 
-namespace safe_browsing {
-class SafeBrowsingService;
-}
-
 namespace subresource_filter {
 class RulesetService;
 }
@@ -212,9 +208,6 @@ class BrowserProcess {
   // on this platform (or this is a unit test).
   virtual StatusTray* status_tray() = 0;
 
-  // Returns the SafeBrowsing service.
-  virtual safe_browsing::SafeBrowsingService* safe_browsing_service() = 0;
-
   // Returns the service providing versioned storage for rules used by the Safe
   // Browsing subresource filter.
   virtual subresource_filter::RulesetService*
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -68,7 +68,6 @@
 #include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/resource_coordinator/resource_coordinator_parts.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/site_isolation/prefs_observer.h"
 #include "chrome/browser/ssl/secure_origin_prefs_observer.h"
@@ -107,7 +106,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/rappor/public/rappor_utils.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "components/sessions/core/session_id_generator.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
 #include "components/translate/core/browser/translate_download_manager.h"
@@ -376,8 +374,6 @@ void BrowserProcessImpl::StartTearDown() {
 
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
-  if (safe_browsing_service_.get())
-    safe_browsing_service()->ShutDown();
   network_time_tracker_.reset();
 #if BUILDFLAG(ENABLE_PLUGINS)
   plugins_resource_service_.reset();
@@ -983,14 +979,6 @@ StatusTray* BrowserProcessImpl::status_tray() {
   return status_tray_.get();
 }
 
-safe_browsing::SafeBrowsingService*
-BrowserProcessImpl::safe_browsing_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_safe_browsing_service_)
-    CreateSafeBrowsingService();
-  return safe_browsing_service_.get();
-}
-
 subresource_filter::RulesetService*
 BrowserProcessImpl::subresource_filter_ruleset_service() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
@@ -1230,23 +1218,6 @@ void BrowserProcessImpl::CreateBackgroundPrintingManager() {
 }
 
 void BrowserProcessImpl::CreateSafeBrowsingService() {
-  DCHECK(!safe_browsing_service_);
-  // Set this flag to true so that we don't retry indefinitely to
-  // create the service class if there was an error.
-  created_safe_browsing_service_ = true;
-
-  // The factory can be overridden in tests.
-  if (!safe_browsing::SafeBrowsingServiceInterface::HasFactory()) {
-    safe_browsing::SafeBrowsingServiceInterface::RegisterFactory(
-        safe_browsing::GetSafeBrowsingServiceFactory());
-  }
-
-  // TODO(crbug/925153): Port consumers of the |safe_browsing_service_| to use
-  // the interface in components/safe_browsing, and remove this cast.
-  safe_browsing_service_ = static_cast<safe_browsing::SafeBrowsingService*>(
-      safe_browsing::SafeBrowsingServiceInterface::CreateSafeBrowsingService());
-  if (safe_browsing_service_)
-    safe_browsing_service_->Initialize();
 }
 
 void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
diff --git a/chrome/browser/browser_process_impl.h b/chrome/browser/browser_process_impl.h
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -170,7 +170,6 @@ class BrowserProcessImpl : public BrowserProcess,
   void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) override;
   StatusTray* status_tray() override;
-  safe_browsing::SafeBrowsingService* safe_browsing_service() override;
   subresource_filter::RulesetService* subresource_filter_ruleset_service()
       override;
   federated_learning::FlocSortingLshClustersService*
@@ -318,9 +317,6 @@ class BrowserProcessImpl : public BrowserProcess,
   std::unique_ptr<BackgroundModeManager> background_mode_manager_;
 #endif
 
-  bool created_safe_browsing_service_ = false;
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-
   bool created_subresource_filter_ruleset_service_ = false;
   std::unique_ptr<subresource_filter::RulesetService>
       subresource_filter_ruleset_service_;
diff --git a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
--- a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
+++ b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
@@ -669,10 +669,12 @@ void ChromeBrowsingDataRemoverDelegate::RemoveEmbedderData(
     base::RecordAction(UserMetricsAction("ClearBrowsingData_Cookies"));
 
     network::mojom::NetworkContext* safe_browsing_context = nullptr;
+#if BUILDFLAG(FULL_SAFE_BROWSING)
     safe_browsing::SafeBrowsingService* sb_service =
         g_browser_process->safe_browsing_service();
     if (sb_service)
       safe_browsing_context = sb_service->GetNetworkContext(profile_);
+#endif
 
     browsing_data::RemoveEmbedderCookieData(
         delete_begin, delete_end, filter_builder, host_content_settings_map_,
diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -126,12 +126,14 @@
 #include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
 #include "chrome/browser/renderer_preferences_util.h"
 #include "chrome/browser/resource_coordinator/background_tab_navigation_throttle.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/certificate_reporting_service.h"
 #include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
 #include "chrome/browser/safe_browsing/delayed_warning_navigation_throttle.h"
 #include "chrome/browser/safe_browsing/safe_browsing_navigation_throttle.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
+#endif
 #include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
 #include "chrome/browser/safe_browsing/url_lookup_service_factory.h"
@@ -264,14 +266,6 @@
 #include "components/previews/core/previews_features.h"
 #include "components/previews/core/previews_switches.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
-#include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
-#include "components/safe_browsing/core/browser/url_checker_delegate.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-#include "components/safe_browsing/core/db/database_manager.h"
-#include "components/safe_browsing/core/features.h"
-#include "components/safe_browsing/core/realtime/policy_engine.h"
-#include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "components/security_interstitials/content/insecure_form_navigation_throttle.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
@@ -925,21 +919,13 @@ void SetApplicationLocaleOnIOThread(const std::string& locale) {
 class CertificateReportingServiceCertReporter : public SSLCertReporter {
  public:
   explicit CertificateReportingServiceCertReporter(
-      content::WebContents* web_contents)
-      : service_(CertificateReportingServiceFactory::GetForBrowserContext(
-            web_contents->GetBrowserContext())) {}
+      content::WebContents* web_contents) {}
   ~CertificateReportingServiceCertReporter() override {}
 
   // SSLCertReporter implementation
   void ReportInvalidCertificateChain(
       const std::string& serialized_report) override {
-    service_->Send(serialized_report);
   }
-
- private:
-  CertificateReportingService* service_;
-
-  DISALLOW_COPY_AND_ASSIGN(CertificateReportingServiceCertReporter);
 };
 
 #if BUILDFLAG(ENABLE_EXTENSIONS)
@@ -1490,7 +1476,9 @@ void ChromeContentBrowserClient::PostAfterStartupTask(
   InitNetworkContextsParentDirectory();
 
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
+#if defined(FULL_SAFE_BROWSING)
   safe_browsing_service_ = g_browser_process->safe_browsing_service();
+#endif
 }
 
 bool ChromeContentBrowserClient::IsBrowserStartupComplete() {
@@ -2206,7 +2194,7 @@ void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
   }
 #elif defined(OS_POSIX)
 #if defined(OS_ANDROID)
-  bool enable_crash_reporter = true;
+  bool enable_crash_reporter = false;
 #else
   bool enable_crash_reporter = false;
   if (crash_reporter::IsCrashpadEnabled()) {
@@ -2326,6 +2314,9 @@ void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
           instant_service->IsInstantProcess(process->GetID())) {
         command_line->AppendSwitch(switches::kInstantProcess);
       }
+#else
+      command_line->AppendSwitch(
+          switches::kDisableClientSidePhishingDetection);
 #endif
 
       if (prefs->HasPrefPath(prefs::kAllowDinosaurEasterEgg) &&
@@ -4151,14 +4142,13 @@ ChromeContentBrowserClient::CreateThrottlesForNavigation(
                    &throttles);
 #endif
 
-  throttles.push_back(
-      std::make_unique<safe_browsing::SafeBrowsingNavigationThrottle>(handle));
-
+#if defined(FULL_SAFE_BROWSING)
   if (base::FeatureList::IsEnabled(safe_browsing::kDelayedWarnings)) {
     throttles.push_back(
         std::make_unique<safe_browsing::DelayedWarningNavigationThrottle>(
             handle));
   }
+#endif
 
 // TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
 // of lacros-chrome is complete.
@@ -5340,6 +5330,7 @@ ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
     bool should_check_on_sb_disabled) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
 
+#if defined(FULL_SAFE_BROWSING)
   // Should not bypass safe browsing check if the check is for enterprise
   // lookup.
   if (!safe_browsing_enabled_for_profile && !should_check_on_sb_disabled)
@@ -5354,8 +5345,12 @@ ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
   }
 
   return safe_browsing_url_checker_delegate_;
+#else
+  return nullptr;
+#endif
 }
 
+#if defined(FULL_SAFE_BROWSING)
 safe_browsing::RealTimeUrlLookupServiceBase*
 ChromeContentBrowserClient::GetUrlLookupService(
     content::BrowserContext* browser_context,
@@ -5381,6 +5376,7 @@ ChromeContentBrowserClient::GetUrlLookupService(
   }
   return nullptr;
 }
+#endif
 
 base::Optional<std::string>
 ChromeContentBrowserClient::GetOriginPolicyErrorPage(
diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -789,6 +789,7 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   GetSafeBrowsingUrlCheckerDelegate(bool safe_browsing_enabled_for_profile,
                                     bool should_check_on_sb_disabled);
 
+#if defined(FULL_SAFE_BROWSING)
   // Returns a RealTimeUrlLookupServiceBase object used for real time URL check.
   // Returns an enterprise version if |is_enterprise_lookup_enabled| is true.
   // Returns a consumer version if |is_enterprise_lookup_enabled| is false and
@@ -797,6 +798,7 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
       content::BrowserContext* browser_context,
       bool is_enterprise_lookup_enabled,
       bool is_consumer_lookup_enabled);
+#endif
 
   void OnKeepaliveTimerFired(
       std::unique_ptr<ScopedKeepAlive> keep_alive_handle);
@@ -805,9 +807,11 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   // Parts are deleted in the reverse order they are added.
   std::vector<ChromeContentBrowserClientParts*> extra_parts_;
 
+#if defined(FULL_SAFE_BROWSING)
   scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
   scoped_refptr<safe_browsing::UrlCheckerDelegate>
       safe_browsing_url_checker_delegate_;
+#endif
 
   StartupData startup_data_;
 
diff --git a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -74,6 +74,7 @@
 
 namespace {
 
+#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
 // Helper method for ExposeInterfacesToRenderer() that checks the latest
 // SafeBrowsing pref value on the UI thread before hopping over to the IO
 // thread.
@@ -106,6 +107,7 @@ void MaybeCreateSafeBrowsingForRenderer(
                               /*should_check_on_sb_disabled=*/false),
           std::move(receiver)));
 }
+#endif
 
 }  // namespace
 
diff --git a/chrome/browser/component_updater/file_type_policies_component_installer.cc b/chrome/browser/component_updater/file_type_policies_component_installer.cc
--- a/chrome/browser/component_updater/file_type_policies_component_installer.cc
+++ b/chrome/browser/component_updater/file_type_policies_component_installer.cc
@@ -20,7 +20,9 @@
 #include "base/task/thread_pool.h"
 #include "base/version.h"
 #include "components/component_updater/component_updater_paths.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
+#endif
 
 using component_updater::ComponentUpdateService;
 
@@ -39,20 +41,6 @@ const uint8_t kFileTypePoliciesPublicKeySHA256[32] = {
 const char kFileTypePoliciesManifestName[] = "File Type Policies";
 
 void LoadFileTypesFromDisk(const base::FilePath& pb_path) {
-  if (pb_path.empty())
-    return;
-
-  VLOG(1) << "Reading Download File Types from file: " << pb_path.value();
-  std::string binary_pb;
-  if (!base::ReadFileToString(pb_path, &binary_pb)) {
-    // The file won't exist on new installations, so this is not always an
-    // error.
-    VLOG(1) << "Failed reading from " << pb_path.value();
-    return;
-  }
-
-  safe_browsing::FileTypePolicies::GetInstance()->PopulateFromDynamicUpdate(
-      binary_pb);
 }
 
 }  // namespace
diff --git a/chrome/browser/download/chrome_download_manager_delegate.cc b/chrome/browser/download/chrome_download_manager_delegate.cc
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -48,9 +48,11 @@
 #include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
 #include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
+#endif
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/buildflags.h"
@@ -70,7 +72,9 @@
 #include "components/prefs/pref_member.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
+#endif
 #include "components/services/quarantine/public/mojom/quarantine.mojom.h"
 #include "components/services/quarantine/quarantine_impl.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -130,8 +134,10 @@ using content::DownloadManager;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
+#if defined(FULL_SAFE_BROWSING)
 using safe_browsing::DownloadFileType;
 using safe_browsing::DownloadProtectionService;
+#endif
 
 namespace {
 
@@ -332,12 +338,12 @@ void HandleMixedDownloadInfoBarResult(
 }
 #endif
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 void MaybeReportDangerousDownloadBlocked(
     DownloadPrefs::DownloadRestriction download_restriction,
     std::string danger_type,
     std::string download_path,
     download::DownloadItem* download) {
-#if BUILDFLAG(FULL_SAFE_BROWSING)
   if (download_restriction !=
           DownloadPrefs::DownloadRestriction::POTENTIALLY_DANGEROUS_FILES &&
       download_restriction !=
@@ -371,7 +377,6 @@ void MaybeReportDangerousDownloadBlocked(
         safe_browsing::EventResult::BLOCKED);
   }
 #endif
-}
 
 }  // namespace
 
@@ -393,13 +398,6 @@ ChromeDownloadManagerDelegate::~ChromeDownloadManagerDelegate() {
 
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;
-
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && !profile_->IsOffTheRecord()) {
-    // Include this download manager in the set monitored by safe browsing.
-    sb_service->AddDownloadManager(dm);
-  }
 }
 
 #if defined(OS_ANDROID)
@@ -740,16 +738,6 @@ void ChromeDownloadManagerDelegate::ChooseSavePath(
 
 void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
     base::FilePath* filename) {
-  safe_browsing::FileTypePolicies* file_type_policies =
-      safe_browsing::FileTypePolicies::GetInstance();
-
-  if (file_type_policies->GetFileDangerLevel(*filename) ==
-      safe_browsing::DownloadFileType::NOT_DANGEROUS)
-    return;
-
-  base::FilePath default_filename = base::FilePath::FromUTF8Unsafe(
-      l10n_util::GetStringUTF8(IDS_DEFAULT_DOWNLOAD_FILENAME));
-  *filename = filename->AddExtension(default_filename.BaseName().value());
 }
 
 void ChromeDownloadManagerDelegate::SanitizeDownloadParameters(
@@ -877,18 +865,18 @@ ChromeDownloadManagerDelegate::ApplicationClientIdForFileScanning() {
   return std::string(chrome::kApplicationClientIDStringForAVScanning);
 }
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 DownloadProtectionService*
     ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   if (sb_service && sb_service->download_protection_service()) {
     return sb_service->download_protection_service();
   }
-#endif
   return nullptr;
 }
+#endif
 
 void ChromeDownloadManagerDelegate::GetMixedContentStatus(
     download::DownloadItem* download,
@@ -1448,8 +1436,11 @@ void ChromeDownloadManagerDelegate::OnDownloadTargetDetermined(
       DownloadItemModel(item).SetShouldPreferOpeningInBrowser(true);
 #endif
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
     DownloadItemModel(item).SetDangerLevel(target_info->danger_level);
+#endif
   }
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   if (ShouldBlockFile(target_info->danger_type, item)) {
     MaybeReportDangerousDownloadBlocked(
         download_prefs_->download_restriction(), "DANGEROUS_FILE_TYPE",
@@ -1458,6 +1449,7 @@ void ChromeDownloadManagerDelegate::OnDownloadTargetDetermined(
     // A dangerous type would take precedence over the blocking of the file.
     target_info->danger_type = download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS;
   }
+#endif
 
   base::FilePath target_path = target_info->target_path;
 
diff --git a/chrome/browser/download/chrome_download_manager_delegate.h b/chrome/browser/download/chrome_download_manager_delegate.h
--- a/chrome/browser/download/chrome_download_manager_delegate.h
+++ b/chrome/browser/download/chrome_download_manager_delegate.h
@@ -22,8 +22,10 @@
 #include "chrome/browser/download/download_completion_blocker.h"
 #include "chrome/browser/download/download_target_determiner_delegate.h"
 #include "chrome/browser/download/download_target_info.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
 #include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
+#endif
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -138,7 +140,7 @@ class ChromeDownloadManagerDelegate
 
   DownloadPrefs* download_prefs() { return download_prefs_.get(); }
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
+#if defined(FULL_SAFE_BROWSING)
   // The state of a safebrowsing check.
   class SafeBrowsingState : public DownloadCompletionBlocker {
    public:
@@ -152,11 +154,11 @@ class ChromeDownloadManagerDelegate
    private:
     DISALLOW_COPY_AND_ASSIGN(SafeBrowsingState);
   };
-#endif  // FULL_SAFE_BROWSING
 
   // Callback function after the DownloadProtectionService completes.
   void CheckClientDownloadDone(uint32_t download_id,
                                safe_browsing::DownloadCheckResult result);
+#endif  // FULL_SAFE_BROWSING
 
   base::WeakPtr<ChromeDownloadManagerDelegate> GetWeakPtr();
 
@@ -164,8 +166,10 @@ class ChromeDownloadManagerDelegate
       mojo::PendingReceiver<quarantine::mojom::Quarantine> receiver);
 
  protected:
+#if defined(FULL_SAFE_BROWSING)
   virtual safe_browsing::DownloadProtectionService*
       GetDownloadProtectionService();
+#endif
 
   // Show file picker for |download|.
   virtual void ShowFilePickerForDownload(
diff --git a/chrome/browser/download/download_item_model.cc b/chrome/browser/download/download_item_model.cc
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -28,15 +28,19 @@
 #include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
+#endif
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
+#endif
 #include "content/public/browser/download_item_utils.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/l10n/time_format.h"
@@ -49,7 +53,9 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
+#if defined(FULL_SAFE_BROWSING)
 using safe_browsing::DownloadFileType;
+#endif
 
 namespace {
 
@@ -79,9 +85,11 @@ class DownloadItemModelData : public base::SupportsUserData::Data {
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
+#if defined(FULL_SAFE_BROWSING)
   // Danger level of the file determined based on the file type and whether
   // there was a user action associated with the download.
   DownloadFileType::DangerLevel danger_level_;
+#endif
 
   // Whether the download is currently being revived.
   bool is_being_revived_;
@@ -118,7 +126,9 @@ DownloadItemModelData::DownloadItemModelData()
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
+#if defined(FULL_SAFE_BROWSING)
       danger_level_(DownloadFileType::NOT_DANGEROUS),
+#endif
       is_being_revived_(false) {}
 
 } // namespace
@@ -372,6 +382,7 @@ void DownloadItemModel::SetShouldPreferOpeningInBrowser(bool preference) {
   data->should_prefer_opening_in_browser_ = preference;
 }
 
+#if defined(FULL_SAFE_BROWSING)
 DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
   const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
   return data ? data->danger_level_ : DownloadFileType::NOT_DANGEROUS;
@@ -382,6 +393,7 @@ void DownloadItemModel::SetDangerLevel(
   DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
   data->danger_level_ = danger_level;
 }
+#endif
 
 download::DownloadItem::MixedContentStatus
 DownloadItemModel::GetMixedContentStatus() const {
@@ -539,9 +551,6 @@ bool DownloadItemModel::IsCommandEnabled(
       // filename. Don't base an "Always open" decision based on it. Also
       // exclude extensions.
       return download_->CanOpenDownload() &&
-             safe_browsing::FileTypePolicies::GetInstance()
-                 ->IsAllowedToOpenAutomatically(
-                     download_->GetTargetFilePath()) &&
              !download_crx_util::IsExtensionDownload(*download_);
     case DownloadCommands::PAUSE:
       return !download_->IsSavePackageDownload() &&
diff --git a/chrome/browser/download/download_item_model.h b/chrome/browser/download/download_item_model.h
--- a/chrome/browser/download/download_item_model.h
+++ b/chrome/browser/download/download_item_model.h
@@ -13,7 +13,9 @@
 #include "chrome/browser/download/download_ui_model.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
+#endif
 
 // Implementation of DownloadUIModel that wrappers around a |DownloadItem*|. As
 // such, the caller is expected to ensure that the |download| passed into the
@@ -50,9 +52,11 @@ class DownloadItemModel : public DownloadUIModel,
   void SetWasUINotified(bool should_notify) override;
   bool ShouldPreferOpeningInBrowser() const override;
   void SetShouldPreferOpeningInBrowser(bool preference) override;
+#if defined(FULL_SAFE_BROWSING)
   safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const override;
   void SetDangerLevel(
       safe_browsing::DownloadFileType::DangerLevel danger_level) override;
+#endif
   download::DownloadItem::MixedContentStatus GetMixedContentStatus()
       const override;
   void OpenUsingPlatformHandler() override;
diff --git a/chrome/browser/download/download_prefs.cc b/chrome/browser/download/download_prefs.cc
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -42,7 +42,9 @@
 #include "components/policy/core/browser/url_blocklist_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
+#endif
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/save_page_type.h"
@@ -61,7 +63,9 @@
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DownloadManager;
+#if defined(FULL_SAFE_BROWSING)
 using safe_browsing::FileTypePolicies;
+#endif
 
 namespace {
 
@@ -266,14 +270,7 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
         base::FilePath::StringType(1, base::FilePath::kExtensionSeparator) +
         extension);
 
-    // Note that the list of file types that are not allowed to open
-    // automatically can change in the future. When the list is tightened, it is
-    // expected that some entries in the users' auto open list will get dropped
-    // permanently as a result.
-    if (FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-            filename_with_extension)) {
-      auto_open_by_user_.insert(extension);
-    }
+    auto_open_by_user_.insert(extension);
   }
 }
 
@@ -473,10 +470,6 @@ bool DownloadPrefs::IsAutoOpenByPolicy(const GURL& url,
 bool DownloadPrefs::EnableAutoOpenByUserBasedOnExtension(
     const base::FilePath& file_name) {
   base::FilePath::StringType extension = file_name.Extension();
-  if (!FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-          file_name)) {
-    return false;
-  }
 
   DCHECK(extension[0] == base::FilePath::kExtensionSeparator);
   extension.erase(0, 1);
diff --git a/chrome/browser/download/download_target_determiner.cc b/chrome/browser/download/download_target_determiner.cc
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -28,7 +28,9 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/history/core/browser/history_service.h"
 #include "components/prefs/pref_service.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
+#endif
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -61,13 +63,16 @@
 using content::BrowserThread;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
+#if defined(FULL_SAFE_BROWSING)
 using safe_browsing::DownloadFileType;
+#endif
 
 namespace {
 
 const base::FilePath::CharType kCrdownloadSuffix[] =
     FILE_PATH_LITERAL(".crdownload");
 
+#if defined(FULL_SAFE_BROWSING)
 // Condenses the results from HistoryService::GetVisibleVisitCountToHost() to a
 // single bool. A host is considered visited before if prior visible visits were
 // found in history and the first such visit was earlier than the most recent
@@ -78,6 +83,7 @@ void VisitCountsToVisitedBefore(base::OnceCallback<void(bool)> callback,
       result.success && result.count > 0 &&
       (result.first_visit.LocalMidnight() < base::Time::Now().LocalMidnight()));
 }
+#endif
 
 #if defined(OS_WIN)
 // Keeps track of whether Adobe Reader is up to date.
@@ -102,7 +108,9 @@ DownloadTargetDeterminer::DownloadTargetDeterminer(
       create_target_directory_(false),
       conflict_action_(conflict_action),
       danger_type_(download->GetDangerType()),
+#if defined(FULL_SAFE_BROWSING)
       danger_level_(DownloadFileType::NOT_DANGEROUS),
+#endif
       virtual_path_(initial_virtual_path),
       is_filetype_handled_safely_(false),
 #if defined(OS_ANDROID)
@@ -292,12 +300,14 @@ base::FilePath DownloadTargetDeterminer::GenerateFileName() const {
       download_->GetURL(), download_->GetContentDisposition(), referrer_charset,
       suggested_filename, sniffed_mime_type, default_filename);
 
+#if defined(FULL_SAFE_BROWSING)
   // We don't replace the file extension if safe browsing consider the file
   // extension to be unsafe. Just let safe browsing scan the generated file.
   if (safe_browsing::FileTypePolicies::GetInstance()->IsCheckedBinaryFile(
           generated_filename)) {
     return generated_filename;
   }
+#endif
 
   // If no mime type or explicitly specified a name, don't replace file
   // extension.
@@ -813,6 +823,7 @@ DownloadTargetDeterminer::Result
     return CONTINUE;
   }
 
+#if defined(FULL_SAFE_BROWSING)
   // First determine the danger level assuming that the user doesn't have any
   // prior visits to the referrer recoreded in history. The resulting danger
   // level would be ALLOW_ON_USER_GESTURE if the level depends on the visit
@@ -849,6 +860,7 @@ DownloadTargetDeterminer::Result
   // invalid, then assume the referrer has not been visited before.
   if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
     danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
+#endif
   return CONTINUE;
 }
 
@@ -856,11 +868,13 @@ void DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone(
     bool visited_referrer_before) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK_EQ(STATE_DETERMINE_INTERMEDIATE_PATH, next_state_);
+#if defined(FULL_SAFE_BROWSING)
   danger_level_ = GetDangerLevel(
       visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
   if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
       danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
     danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
+#endif
   DoLoop();
 }
 
@@ -965,7 +979,9 @@ void DownloadTargetDeterminer::ScheduleCallbackAndDeleteSelf(
             << " Intermediate:" << intermediate_path_.AsUTF8Unsafe()
             << " Confirmation reason:" << static_cast<int>(confirmation_reason_)
             << " Danger type:" << danger_type_
+#if defined(FULL_SAFE_BROWSING)
             << " Danger level:" << danger_level_
+#endif
             << " Result:" << static_cast<int>(result);
   std::unique_ptr<DownloadTargetInfo> target_info(new DownloadTargetInfo);
 
@@ -977,7 +993,9 @@ void DownloadTargetDeterminer::ScheduleCallbackAndDeleteSelf(
            ? DownloadItem::TARGET_DISPOSITION_PROMPT
            : DownloadItem::TARGET_DISPOSITION_OVERWRITE);
   target_info->danger_type = danger_type_;
+#if defined(FULL_SAFE_BROWSING)
   target_info->danger_level = danger_level_;
+#endif
   target_info->intermediate_path = intermediate_path_;
   target_info->mime_type = mime_type_;
   target_info->is_filetype_handled_safely = is_filetype_handled_safely_;
@@ -1066,6 +1084,7 @@ bool DownloadTargetDeterminer::HasPromptedForPath() const {
                                 DownloadItem::TARGET_DISPOSITION_PROMPT);
 }
 
+#if defined(FULL_SAFE_BROWSING)
 DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
     PriorVisitsToReferrer visits) const {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -1090,30 +1109,9 @@ DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
       download_->HasUserGesture())
     return DownloadFileType::NOT_DANGEROUS;
 
-  DownloadFileType::DangerLevel danger_level =
-      safe_browsing::FileTypePolicies::GetInstance()->GetFileDangerLevel(
-          virtual_path_.BaseName());
-
-  // A danger level of ALLOW_ON_USER_GESTURE is used to label potentially
-  // dangerous file types that have a high frequency of legitimate use. We would
-  // like to avoid prompting for the legitimate cases as much as possible. To
-  // that end, we consider a download to be legitimate if one of the following
-  // is true, and avoid prompting:
-  //
-  // * The user navigated to the download URL via the omnibox (either by typing
-  //   the URL, pasting it, or using search).
-  //
-  // * The navigation that initiated the download has a user gesture associated
-  //   with it AND the user the user is familiar with the referring origin. A
-  //   user is considered familiar with a referring origin if a visit for a page
-  //   from the same origin was recorded on the previous day or earlier.
-  if (danger_level == DownloadFileType::ALLOW_ON_USER_GESTURE &&
-      ((download_->GetTransitionType() &
-        ui::PAGE_TRANSITION_FROM_ADDRESS_BAR) != 0 ||
-       (download_->HasUserGesture() && visits == VISITED_REFERRER)))
-    return DownloadFileType::NOT_DANGEROUS;
-  return danger_level;
+  return DownloadFileType::NOT_DANGEROUS;
 }
+#endif
 
 void DownloadTargetDeterminer::OnDownloadDestroyed(
     DownloadItem* download) {
diff --git a/chrome/browser/download/download_target_determiner.h b/chrome/browser/download/download_target_determiner.h
--- a/chrome/browser/download/download_target_determiner.h
+++ b/chrome/browser/download/download_target_determiner.h
@@ -19,7 +19,9 @@
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
+#endif
 #include "content/public/browser/download_manager_delegate.h"
 #include "ppapi/buildflags/buildflags.h"
 
@@ -316,6 +318,7 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
   // operation.
   bool HasPromptedForPath() const;
 
+#if defined(FULL_SAFE_BROWSING)
   // Returns true if this download should show the "dangerous file" warning.
   // Various factors are considered, such as the type of the file, whether a
   // user action initiated the download, and whether the user has explicitly
@@ -325,6 +328,7 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
   // to true if the download requires explicit user consent.
   safe_browsing::DownloadFileType::DangerLevel GetDangerLevel(
       PriorVisitsToReferrer visits) const;
+#endif
 
   // Generates the download file name based on information from URL, response
   // headers and sniffed mime type.
@@ -341,7 +345,9 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
   download::DownloadPathReservationTracker::FilenameConflictAction
       conflict_action_;
   download::DownloadDangerType danger_type_;
+#if defined(FULL_SAFE_BROWSING)
   safe_browsing::DownloadFileType::DangerLevel danger_level_;
+#endif
   base::FilePath virtual_path_;
   base::FilePath local_path_;
   base::FilePath intermediate_path_;
diff --git a/chrome/browser/download/download_target_info.cc b/chrome/browser/download/download_target_info.cc
--- a/chrome/browser/download/download_target_info.cc
+++ b/chrome/browser/download/download_target_info.cc
@@ -4,12 +4,16 @@
 
 #include "chrome/browser/download/download_target_info.h"
 
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/file_type_policies.h"
+#endif
 
 DownloadTargetInfo::DownloadTargetInfo()
     : target_disposition(download::DownloadItem::TARGET_DISPOSITION_OVERWRITE),
       danger_type(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS),
+#if defined(FULL_SAFE_BROWSING)
       danger_level(safe_browsing::DownloadFileType::NOT_DANGEROUS),
+#endif
       is_filetype_handled_safely(false),
       result(download::DOWNLOAD_INTERRUPT_REASON_NONE),
       mixed_content_status(
diff --git a/chrome/browser/download/download_target_info.h b/chrome/browser/download/download_target_info.h
--- a/chrome/browser/download/download_target_info.h
+++ b/chrome/browser/download/download_target_info.h
@@ -13,7 +13,9 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_schedule.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
+#endif
 
 struct DownloadTargetInfo {
   DownloadTargetInfo();
@@ -34,6 +36,7 @@ struct DownloadTargetInfo {
   // Danger type of the download.
   download::DownloadDangerType danger_type;
 
+#if defined(FULL_SAFE_BROWSING)
   // The danger type of the download could be set to MAYBE_DANGEROUS_CONTENT if
   // the file type is handled by SafeBrowsing. However, if the SafeBrowsing
   // service is unable to verify whether the file is safe or not, we are on our
@@ -59,6 +62,7 @@ struct DownloadTargetInfo {
   //       SafeBrowsing may flag the file as being malicious, in which case the
   //       malicious classification should take precedence.
   safe_browsing::DownloadFileType::DangerLevel danger_level;
+#endif
 
   // Suggested intermediate path. The downloaded bytes should be written to this
   // path until all the bytes are available and the user has accepted a
diff --git a/chrome/browser/download/download_ui_model.cc b/chrome/browser/download/download_ui_model.cc
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -33,7 +33,9 @@
 
 using base::TimeDelta;
 using download::DownloadItem;
+#if defined(FULL_SAFE_BROWSING)
 using safe_browsing::DownloadFileType;
+#endif
 using offline_items_collection::FailState;
 
 namespace {
@@ -396,12 +398,14 @@ bool DownloadUIModel::ShouldPreferOpeningInBrowser() const {
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
+#if defined(FULL_SAFE_BROWSING)
 DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
   return DownloadFileType::NOT_DANGEROUS;
 }
 
 void DownloadUIModel::SetDangerLevel(
     DownloadFileType::DangerLevel danger_level) {}
+#endif
 
 download::DownloadItem::MixedContentStatus
 DownloadUIModel::GetMixedContentStatus() const {
diff --git a/chrome/browser/download/download_ui_model.h b/chrome/browser/download/download_ui_model.h
--- a/chrome/browser/download/download_ui_model.h
+++ b/chrome/browser/download/download_ui_model.h
@@ -17,7 +17,9 @@
 #include "components/download/public/common/download_item.h"
 #include "components/offline_items_collection/core/offline_item.h"
 #include "components/safe_browsing/buildflags.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/core/proto/download_file_types.pb.h"
+#endif
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/download/download_commands.h"
@@ -168,6 +170,7 @@ class DownloadUIModel {
   // Change what's returned by ShouldPreferOpeningInBrowser to |preference|.
   virtual void SetShouldPreferOpeningInBrowser(bool preference);
 
+#if defined(FULL_SAFE_BROWSING)
   // Return the danger level determined during download target determination.
   // The value returned here is independent of the danger level as determined by
   // the Safe Browsing.
@@ -176,6 +179,7 @@ class DownloadUIModel {
   // Change what's returned by GetDangerLevel().
   virtual void SetDangerLevel(
       safe_browsing::DownloadFileType::DangerLevel danger_level);
+#endif
 
   // Return the mixed content status determined during download target
   // determination.
diff --git a/chrome/browser/extensions/api/downloads/downloads_api.cc b/chrome/browser/extensions/api/downloads/downloads_api.cc
--- a/chrome/browser/extensions/api/downloads/downloads_api.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api.cc
@@ -38,7 +38,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/download/download_file_icon_extractor.h"
 #include "chrome/browser/download/download_open_prompt.h"
 #include "chrome/browser/download/download_prefs.h"
@@ -1312,9 +1311,6 @@ DownloadsAcceptDangerFunction::DownloadsAcceptDangerFunction() {}
 
 DownloadsAcceptDangerFunction::~DownloadsAcceptDangerFunction() {}
 
-DownloadsAcceptDangerFunction::OnPromptCreatedCallback*
-    DownloadsAcceptDangerFunction::on_prompt_created_ = NULL;
-
 ExtensionFunction::ResponseAction DownloadsAcceptDangerFunction::Run() {
   std::unique_ptr<downloads::AcceptDanger::Params> params(
       downloads::AcceptDanger::Params::Create(*args_));
@@ -1352,41 +1348,7 @@ void DownloadsAcceptDangerFunction::PromptOrWait(int download_id, int retries) {
     return;
   }
   RecordApiFunctions(DOWNLOADS_FUNCTION_ACCEPT_DANGER);
-  // DownloadDangerPrompt displays a modal dialog using native widgets that the
-  // user must either accept or cancel. It cannot be scripted.
-  DownloadDangerPrompt* prompt = DownloadDangerPrompt::Create(
-      download_item, web_contents, true,
-      base::BindOnce(&DownloadsAcceptDangerFunction::DangerPromptCallback, this,
-                     download_id));
-  // DownloadDangerPrompt deletes itself
-  if (on_prompt_created_ && !on_prompt_created_->is_null())
-    on_prompt_created_->Run(prompt);
-  // Function finishes in DangerPromptCallback().
-}
-
-void DownloadsAcceptDangerFunction::DangerPromptCallback(
-    int download_id, DownloadDangerPrompt::Action action) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DownloadItem* download_item = GetDownload(
-      browser_context(), include_incognito_information(), download_id);
-  std::string error;
-  if (InvalidId(download_item, &error) ||
-      Fault(download_item->GetState() != DownloadItem::IN_PROGRESS,
-            download_extension_errors::kNotInProgress, &error)) {
-    Respond(Error(std::move(error)));
-    return;
-  }
-  switch (action) {
-    case DownloadDangerPrompt::ACCEPT:
-      download_item->ValidateDangerousDownload();
-      break;
-    case DownloadDangerPrompt::CANCEL:
-      download_item->Remove();
-      break;
-    case DownloadDangerPrompt::DISMISS:
-      break;
-  }
-  Respond(NoArguments());
+  download_item->ValidateDangerousDownload();
 }
 
 DownloadsShowFunction::DownloadsShowFunction() {}
diff --git a/chrome/browser/extensions/api/downloads/downloads_api.h b/chrome/browser/extensions/api/downloads/downloads_api.h
--- a/chrome/browser/extensions/api/downloads/downloads_api.h
+++ b/chrome/browser/extensions/api/downloads/downloads_api.h
@@ -13,7 +13,6 @@
 #include "base/macros.h"
 #include "base/scoped_observer.h"
 #include "base/time/time.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/common/extensions/api/downloads.h"
 #include "components/download/content/public/all_download_item_notifier.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -187,11 +186,6 @@ class DownloadsRemoveFileFunction : public ExtensionFunction {
 
 class DownloadsAcceptDangerFunction : public ExtensionFunction {
  public:
-  typedef base::Callback<void(DownloadDangerPrompt*)> OnPromptCreatedCallback;
-  static void OnPromptCreatedForTesting(
-      OnPromptCreatedCallback* callback) {
-    on_prompt_created_ = callback;
-  }
 
   DECLARE_EXTENSION_FUNCTION("downloads.acceptDanger", DOWNLOADS_ACCEPTDANGER)
   DownloadsAcceptDangerFunction();
@@ -199,13 +193,10 @@ class DownloadsAcceptDangerFunction : public ExtensionFunction {
 
  protected:
   ~DownloadsAcceptDangerFunction() override;
-  void DangerPromptCallback(int download_id,
-                            DownloadDangerPrompt::Action action);
 
  private:
   void PromptOrWait(int download_id, int retries);
 
-  static OnPromptCreatedCallback* on_prompt_created_;
   DISALLOW_COPY_AND_ASSIGN(DownloadsAcceptDangerFunction);
 };
 
diff --git a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
@@ -1041,51 +1041,9 @@ WebstorePrivateGetReferrerChainFunction::
 
 ExtensionFunction::ResponseAction
 WebstorePrivateGetReferrerChainFunction::Run() {
-  Profile* profile = chrome_details_.GetProfile();
-  if (!SafeBrowsingNavigationObserverManager::IsEnabledAndReady(profile))
-    return RespondNow(ArgumentList(
-        api::webstore_private::GetReferrerChain::Results::Create("")));
-
-  content::WebContents* web_contents = GetSenderWebContents();
-  if (!web_contents) {
-    return RespondNow(ErrorWithArguments(
+  return RespondNow(ErrorWithArguments(
         api::webstore_private::GetReferrerChain::Results::Create(""),
         kWebstoreUserCancelledError));
-  }
-
-  scoped_refptr<SafeBrowsingNavigationObserverManager>
-      navigation_observer_manager = g_browser_process->safe_browsing_service()
-                                        ->navigation_observer_manager();
-
-  safe_browsing::ReferrerChain referrer_chain;
-  SafeBrowsingNavigationObserverManager::AttributionResult result =
-      navigation_observer_manager->IdentifyReferrerChainByWebContents(
-          web_contents, kExtensionReferrerUserGestureLimit, &referrer_chain);
-
-  // If the referrer chain is incomplete we'll append the most recent
-  // navigations to referrer chain for diagnostic purposes. This only happens if
-  // the user is not in incognito mode and has opted into extended reporting or
-  // Scout reporting. Otherwise, |CountOfRecentNavigationsToAppend| returns 0.
-  int recent_navigations_to_collect =
-      SafeBrowsingNavigationObserverManager::CountOfRecentNavigationsToAppend(
-          *profile, result);
-  if (recent_navigations_to_collect > 0) {
-    navigation_observer_manager->AppendRecentNavigations(
-        recent_navigations_to_collect, &referrer_chain);
-  }
-
-  safe_browsing::ExtensionWebStoreInstallRequest request;
-  request.mutable_referrer_chain()->Swap(&referrer_chain);
-  request.mutable_referrer_chain_options()->set_recent_navigations_to_collect(
-      recent_navigations_to_collect);
-
-  std::string serialized_referrer_proto = request.SerializeAsString();
-  // Base64 encode the proto to avoid issues with base::Value rejecting strings
-  // which are not valid UTF8.
-  base::Base64Encode(serialized_referrer_proto, &serialized_referrer_proto);
-  return RespondNow(
-      ArgumentList(api::webstore_private::GetReferrerChain::Results::Create(
-          serialized_referrer_proto)));
 }
 
 WebstorePrivateGetExtensionStatusFunction::
diff --git a/chrome/browser/interstitials/chrome_settings_page_helper.cc b/chrome/browser/interstitials/chrome_settings_page_helper.cc
--- a/chrome/browser/interstitials/chrome_settings_page_helper.cc
+++ b/chrome/browser/interstitials/chrome_settings_page_helper.cc
@@ -7,7 +7,7 @@
 #include "content/public/browser/web_contents.h"
 
 #if defined(OS_ANDROID)
-#include "chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.h"
+
 #else
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/chrome_pages.h"
@@ -24,7 +24,6 @@ ChromeSettingsPageHelper::CreateChromeSettingsPageHelper() {
 void ChromeSettingsPageHelper::OpenEnhancedProtectionSettings(
     content::WebContents* web_contents) const {
 #if defined(OS_ANDROID)
-  safe_browsing::ShowSafeBrowsingSettings(web_contents);
 #else
   chrome::ShowSafeBrowsingEnhancedProtection(
       chrome::FindBrowserWithWebContents(web_contents));
diff --git a/chrome/browser/lookalikes/lookalike_url_controller_client.cc b/chrome/browser/lookalikes/lookalike_url_controller_client.cc
--- a/chrome/browser/lookalikes/lookalike_url_controller_client.cc
+++ b/chrome/browser/lookalikes/lookalike_url_controller_client.cc
@@ -9,7 +9,6 @@
 
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/reputation/reputation_service.h"
 #include "chrome/common/url_constants.h"
 #include "components/security_interstitials/content/settings_page_helper.h"
 #include "components/security_interstitials/core/metrics_helper.h"
@@ -56,8 +55,5 @@ void LookalikeUrlControllerClient::GoBack() {
 }
 
 void LookalikeUrlControllerClient::Proceed() {
-  ReputationService::Get(
-      Profile::FromBrowserContext(web_contents_->GetBrowserContext()))
-      ->SetUserIgnore(request_url_);
   Reload();
 }
diff --git a/chrome/browser/lookalikes/lookalike_url_navigation_throttle.cc b/chrome/browser/lookalikes/lookalike_url_navigation_throttle.cc
--- a/chrome/browser/lookalikes/lookalike_url_navigation_throttle.cc
+++ b/chrome/browser/lookalikes/lookalike_url_navigation_throttle.cc
@@ -304,11 +304,6 @@ bool LookalikeUrlNavigationThrottle::IsLookalikeUrl(
     return false;
   }
 
-  // If the URL is in the local temporary allowlist, don't show any warning.
-  if (ReputationService::Get(profile_)->IsIgnored(url)) {
-    return false;
-  }
-
   // If the host is allowlisted by policy, don't show any warning.
   if (IsAllowedByEnterprisePolicy(profile_->GetPrefs(), url)) {
     return false;
diff --git a/chrome/browser/metrics/chrome_metrics_service_client.cc b/chrome/browser/metrics/chrome_metrics_service_client.cc
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -780,9 +780,6 @@ void ChromeMetricsServiceClient::RegisterMetricsServiceProviders() {
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<HttpsEngagementMetricsProvider>());
 
-  metrics_service_->RegisterMetricsProvider(
-      std::make_unique<CertificateReportingMetricsProvider>());
-
 #if !defined(OS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<UpgradeMetricsProvider>());
diff --git a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -131,9 +131,6 @@ void TrialComparisonCertVerifierController::SendTrialReport(
   std::string serialized_report;
   if (!report.Serialize(&serialized_report))
     return;
-
-  CertificateReportingServiceFactory::GetForBrowserContext(profile_)->Send(
-      serialized_report);
 }
 
 // static
diff --git a/chrome/browser/password_manager/chrome_password_manager_client.cc b/chrome/browser/password_manager/chrome_password_manager_client.cc
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -32,8 +32,10 @@
 #include "chrome/browser/password_manager/password_store_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_metrics.h"
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
 #include "chrome/browser/safe_browsing/user_interaction_observer.h"
+#endif
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
@@ -831,16 +833,19 @@ autofill::LanguageCode ChromePasswordManagerClient::GetPageLanguage() const {
   return autofill::LanguageCode();
 }
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 safe_browsing::PasswordProtectionService*
 ChromePasswordManagerClient::GetPasswordProtectionService() const {
   return safe_browsing::ChromePasswordProtectionService::
       GetPasswordProtectionService(profile_);
 }
+#endif
 
 #if defined(ON_FOCUS_PING_ENABLED)
 void ChromePasswordManagerClient::CheckSafeBrowsingReputation(
     const GURL& form_action,
     const GURL& frame_url) {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::PasswordProtectionService* pps =
       GetPasswordProtectionService();
   if (pps) {
@@ -848,6 +853,7 @@ void ChromePasswordManagerClient::CheckSafeBrowsingReputation(
         web_contents(), web_contents()->GetLastCommittedURL(), form_action,
         frame_url, pps->GetAccountInfo().hosted_domain);
   }
+#endif
 }
 #endif  // defined(ON_FOCUS_PING_ENABLED)
 
@@ -857,6 +863,7 @@ void ChromePasswordManagerClient::CheckProtectedPasswordEntry(
     const std::vector<password_manager::MatchingReusedCredential>&
         matching_reused_credentials,
     bool password_field_exists) {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::PasswordProtectionService* pps =
       GetPasswordProtectionService();
   if (!pps)
@@ -865,14 +872,17 @@ void ChromePasswordManagerClient::CheckProtectedPasswordEntry(
   pps->MaybeStartProtectedPasswordEntryRequest(
       web_contents(), web_contents()->GetLastCommittedURL(), username,
       password_type, matching_reused_credentials, password_field_exists);
+#endif
 }
 
 void ChromePasswordManagerClient::LogPasswordReuseDetectedEvent() {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::PasswordProtectionService* pps =
       GetPasswordProtectionService();
   if (pps) {
     pps->MaybeLogPasswordReuseDetectedEvent(web_contents());
   }
+#endif
 }
 
 ukm::SourceId ChromePasswordManagerClient::GetUkmSourceId() {
@@ -1465,6 +1475,7 @@ bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage(
     is_enabled = false;
   }
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   // SafeBrowsing Delayed Warnings experiment can delay some SafeBrowsing
   // warnings until user interaction. If the current page has a delayed warning,
   // it'll have a user interaction observer attached. Disable password
@@ -1475,6 +1486,7 @@ bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage(
     observer->OnPasswordSaveOrAutofillDenied();
     is_enabled = false;
   }
+#endif
 
   if (log_manager_->IsLoggingActive()) {
     password_manager::BrowserSavePasswordProgressLogger logger(
diff --git a/chrome/browser/password_manager/chrome_password_manager_client.h b/chrome/browser/password_manager/chrome_password_manager_client.h
--- a/chrome/browser/password_manager/chrome_password_manager_client.h
+++ b/chrome/browser/password_manager/chrome_password_manager_client.h
@@ -196,8 +196,10 @@ class ChromePasswordManagerClient
 #define PASSWORD_REUSE_DETECTION_ENABLED_OVERRIDE
 #endif
 
+#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
   safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
       const PASSWORD_REUSE_DETECTION_ENABLED_OVERRIDE;
+#endif
 
 #if defined(ON_FOCUS_PING_ENABLED)
   void CheckSafeBrowsingReputation(const GURL& form_action,
diff --git a/chrome/browser/permissions/abusive_origin_permission_revocation_request.cc b/chrome/browser/permissions/abusive_origin_permission_revocation_request.cc
--- a/chrome/browser/permissions/abusive_origin_permission_revocation_request.cc
+++ b/chrome/browser/permissions/abusive_origin_permission_revocation_request.cc
@@ -120,6 +120,7 @@ void AbusiveOriginPermissionRevocationRequest::CheckAndRevokeIfAbusive() {
     return;
   }
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   CrowdDenyPreloadData* crowd_deny = CrowdDenyPreloadData::GetInstance();
   permissions::PermissionUmaUtil::RecordCrowdDenyIsLoadedAtAbuseCheckTime(
       crowd_deny->is_loaded_from_disk());
@@ -145,6 +146,7 @@ void AbusiveOriginPermissionRevocationRequest::CheckAndRevokeIfAbusive() {
       return;
     }
   }
+#endif
 
   std::move(callback_).Run(Outcome::PERMISSION_NOT_REVOKED);
 }
diff --git a/chrome/browser/permissions/chrome_permissions_client.cc b/chrome/browser/permissions/chrome_permissions_client.cc
--- a/chrome/browser/permissions/chrome_permissions_client.cc
+++ b/chrome/browser/permissions/chrome_permissions_client.cc
@@ -17,7 +17,6 @@
 #include "chrome/browser/metrics/ukm_background_recorder_service.h"
 #include "chrome/browser/permissions/abusive_origin_permission_revocation_request.h"
 #include "chrome/browser/permissions/adaptive_quiet_notification_permission_ui_enabler.h"
-#include "chrome/browser/permissions/contextual_notification_permission_ui_selector.h"
 #include "chrome/browser/permissions/permission_decision_auto_blocker_factory.h"
 #include "chrome/browser/permissions/permission_manager_factory.h"
 #include "chrome/browser/permissions/prediction_based_permission_ui_selector.h"
@@ -203,20 +202,6 @@ permissions::IconId ChromePermissionsClient::GetOverrideIconId(
   return PermissionsClient::GetOverrideIconId(request_type);
 }
 
-std::vector<std::unique_ptr<permissions::NotificationPermissionUiSelector>>
-ChromePermissionsClient::CreateNotificationPermissionUiSelectors(
-    content::BrowserContext* browser_context) {
-  std::vector<std::unique_ptr<permissions::NotificationPermissionUiSelector>>
-      selectors;
-  selectors.emplace_back(
-      std::make_unique<ContextualNotificationPermissionUiSelector>());
-  selectors.emplace_back(std::make_unique<PrefNotificationPermissionUiSelector>(
-      Profile::FromBrowserContext(browser_context)));
-  selectors.emplace_back(std::make_unique<PredictionBasedPermissionUiSelector>(
-      Profile::FromBrowserContext(browser_context)));
-  return selectors;
-}
-
 void ChromePermissionsClient::OnPromptResolved(
     content::BrowserContext* browser_context,
     permissions::RequestType request_type,
diff --git a/chrome/browser/permissions/chrome_permissions_client.h b/chrome/browser/permissions/chrome_permissions_client.h
--- a/chrome/browser/permissions/chrome_permissions_client.h
+++ b/chrome/browser/permissions/chrome_permissions_client.h
@@ -43,9 +43,6 @@ class ChromePermissionsClient : public permissions::PermissionsClient {
                       GetUkmSourceIdCallback callback) override;
   permissions::IconId GetOverrideIconId(
       permissions::RequestType request_type) override;
-  std::vector<std::unique_ptr<permissions::NotificationPermissionUiSelector>>
-  CreateNotificationPermissionUiSelectors(
-      content::BrowserContext* browser_context) override;
   void OnPromptResolved(content::BrowserContext* browser_context,
                         permissions::RequestType request_type,
                         permissions::PermissionAction action,
diff --git a/chrome/browser/policy/configuration_policy_handler_list_factory.cc b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -78,8 +78,6 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/core/common/schema.h"
 #include "components/policy/policy_constants.h"
-#include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_policy_handler.h"
 #include "components/search_engines/search_engines_pref_names.h"
 #include "components/security_interstitials/core/pref_names.h"
@@ -182,9 +180,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kQuicAllowed,
     prefs::kQuicAllowed,
     base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingEnabled,
-    prefs::kSafeBrowsingEnabled,
-    base::Value::Type::BOOLEAN },
   { key::kSafeBrowsingForTrustedSourcesEnabled,
     prefs::kSafeBrowsingForTrustedSourcesEnabled,
     base::Value::Type::BOOLEAN },
@@ -317,15 +312,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kGloballyScopeHTTPAuthCacheEnabled,
     prefs::kGloballyScopeHTTPAuthCacheEnabled,
     base::Value::Type::BOOLEAN },
-  { key::kPasswordProtectionWarningTrigger,
-    prefs::kPasswordProtectionWarningTrigger,
-    base::Value::Type::INTEGER },
-  { key::kPasswordProtectionLoginURLs,
-    prefs::kPasswordProtectionLoginURLs,
-    base::Value::Type::LIST },
-  { key::kPasswordProtectionChangePasswordURL,
-    prefs::kPasswordProtectionChangePasswordURL,
-    base::Value::Type::STRING },
   { key::kSafeSitesFilterBehavior,
     policy_prefs::kSafeSitesFilterBehavior,
     base::Value::Type::INTEGER },
@@ -449,9 +435,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kDefaultMediaStreamSetting,
     prefs::kManagedDefaultMediaStreamSetting,
     base::Value::Type::INTEGER },
-  { key::kDisableSafeBrowsingProceedAnyway,
-    prefs::kSafeBrowsingProceedAnywayDisabled,
-    base::Value::Type::BOOLEAN },
   { key::kSSLErrorOverrideAllowed,
     prefs::kSSLErrorOverrideAllowed,
     base::Value::Type::BOOLEAN },
@@ -605,9 +588,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kIntranetRedirectBehavior,
     omnibox::kIntranetRedirectBehavior,
     base::Value::Type::INTEGER },
-  { key::kAdvancedProtectionAllowed,
-    prefs::kAdvancedProtectionAllowed,
-    base::Value::Type::BOOLEAN },
   { key::kAccessibilityImageLabelsEnabled,
     prefs::kAccessibilityImageLabelsEnabled,
     base::Value::Type::BOOLEAN },
@@ -1437,8 +1417,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
   handlers->AddHandler(std::make_unique<JavascriptPolicyHandler>());
   handlers->AddHandler(std::make_unique<NetworkPredictionPolicyHandler>());
   handlers->AddHandler(std::make_unique<RestoreOnStartupPolicyHandler>());
-  handlers->AddHandler(
-      std::make_unique<safe_browsing::SafeBrowsingPolicyHandler>());
   handlers->AddHandler(std::make_unique<SimpleDeprecatingPolicyHandler>(
       std::make_unique<SimplePolicyHandler>(key::kAuthServerWhitelist,
                                             prefs::kAuthServerAllowlist,
@@ -1454,9 +1432,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
           key::kAuthNegotiateDelegateAllowlist,
           prefs::kAuthNegotiateDelegateAllowlist, base::Value::Type::STRING)));
 
-  handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
-      key::kSafeBrowsingAllowlistDomains, prefs::kSafeBrowsingWhitelistDomains,
-      base::Value::Type::LIST));
   handlers->AddHandler(std::make_unique<syncer::SyncPolicyHandler>());
   handlers->AddHandler(std::make_unique<BrowsingHistoryPolicyHandler>());
 
@@ -1465,12 +1440,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
   handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
       key::kURLAllowlist, policy_prefs::kUrlAllowlist,
       base::Value::Type::LIST));
-  handlers->AddHandler(std::make_unique<SimpleSchemaValidatingPolicyHandler>(
-      key::kSafeBrowsingExtendedReportingEnabled,
-      prefs::kSafeBrowsingScoutReportingEnabled, chrome_schema,
-      SCHEMA_ALLOW_UNKNOWN,
-      SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
-      SimpleSchemaValidatingPolicyHandler::MANDATORY_ALLOWED));
 
 #if defined(OS_ANDROID)
   handlers->AddHandler(
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -68,7 +68,6 @@
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
 #include "chrome/browser/profiles/guest_signin_observer_factory.h"
 #include "chrome/browser/profiles/renderer_updater_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/search/suggestions/suggestions_service_factory.h"
 #include "chrome/browser/search_engines/template_url_fetcher_factory.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
@@ -264,7 +263,6 @@ void ChromeBrowserMainExtraPartsProfiles::
 #if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
   CaptivePortalServiceFactory::GetInstance();
 #endif
-  CertificateReportingServiceFactory::GetInstance();
 #if !defined(OS_ANDROID)
   ChromeBrowsingDataLifetimeManagerFactory::GetInstance();
 #endif
diff --git a/chrome/browser/profiles/profile_impl.cc b/chrome/browser/profiles/profile_impl.cc
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -94,7 +94,6 @@
 #include "chrome/browser/profiles/profile_metrics.h"
 #include "chrome/browser/push_messaging/push_messaging_service_factory.h"
 #include "chrome/browser/push_messaging/push_messaging_service_impl.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/sharing/sharing_service_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/signin/signin_ui_util.h"
@@ -639,6 +638,7 @@ void ProfileImpl::LoadPrefsForNormalStartup(bool async_prefs) {
 
   mojo::PendingRemote<prefs::mojom::TrackedPreferenceValidationDelegate>
       pref_validation_delegate;
+#if defined(FULL_SAFE_BROWSING)
   scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
       g_browser_process->safe_browsing_service());
   if (safe_browsing_service.get()) {
@@ -650,7 +650,7 @@ void ProfileImpl::LoadPrefsForNormalStartup(bool async_prefs) {
           pref_validation_delegate.InitWithNewPipeAndPassReceiver());
     }
   }
-
+#endif
   prefs_ =
       CreatePrefService(pref_registry_, CreateExtensionPrefStore(this, false),
                         profile_policy_connector_->policy_service(),
diff --git a/chrome/browser/safe_browsing/BUILD.gn b/chrome/browser/safe_browsing/BUILD.gn
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -5,6 +5,8 @@
 import("//components/safe_browsing/buildflags.gni")
 import("//extensions/buildflags/buildflags.gni")
 
+if(false) {
+
 static_library("safe_browsing") {
   sources = [
     "chrome_controller_client.cc",
@@ -380,3 +382,5 @@ source_set("test_support") {
     ]
   }
 }
+
+}
\ No newline at end of file
diff --git a/chrome/browser/safe_browsing/android/BUILD.gn b/chrome/browser/safe_browsing/android/BUILD.gn
--- a/chrome/browser/safe_browsing/android/BUILD.gn
+++ b/chrome/browser/safe_browsing/android/BUILD.gn
@@ -4,6 +4,8 @@
 
 import("//build/config/android/rules.gni")
 
+if (false) {
+
 generate_jni("jni_headers") {
   sources = [ "java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java" ]
 }
@@ -109,3 +111,5 @@ java_cpp_enum("safe_browsing_enums") {
     "//components/safe_browsing/core/common/safe_browsing_settings_metrics.h",
   ]
 }
+
+}
\ No newline at end of file
diff --git a/chrome/browser/safe_browsing/android/password_reuse_controller_android.cc b/chrome/browser/safe_browsing/android/password_reuse_controller_android.cc
--- a/chrome/browser/safe_browsing/android/password_reuse_controller_android.cc
+++ b/chrome/browser/safe_browsing/android/password_reuse_controller_android.cc
@@ -16,18 +16,24 @@ PasswordReuseControllerAndroid::PasswordReuseControllerAndroid(
     content::WebContents* web_contents,
     ChromePasswordProtectionService* service,
     ReusedPasswordAccountType password_type,
-    OnWarningDone done_callback)
-    : service_(service),
+    OnWarningDone done_callback) :
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
+      service_(service),
+#endif
       url_(web_contents->GetLastCommittedURL()),
       password_type_(password_type),
       window_android_(web_contents->GetTopLevelNativeWindow()),
       done_callback_(std::move(done_callback)) {
   modal_construction_start_time_ = base::TimeTicks::Now();
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
   service_->AddObserver(this);
+#endif
 }
 
 PasswordReuseControllerAndroid::~PasswordReuseControllerAndroid() {
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
   service_->RemoveObserver(this);
+#endif
   dialog_view_.reset();
   LogModalWarningDialogLifetime(modal_construction_start_time_);
 }
@@ -48,20 +54,24 @@ base::string16 PasswordReuseControllerAndroid::GetButtonText() const {
   return l10n_util::GetStringUTF16(IDS_CLOSE);
 }
 
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 base::string16 PasswordReuseControllerAndroid::GetWarningDetailText(
     std::vector<size_t>* placeholder_offsets) const {
   return service_->GetWarningDetailText(password_type_, placeholder_offsets);
 }
+#endif
 
 base::string16 PasswordReuseControllerAndroid::GetTitle() const {
   return l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_SUMMARY);
 }
 
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 const std::vector<base::string16>
 PasswordReuseControllerAndroid::GetPlaceholdersForSavedPasswordWarningText()
     const {
   return service_->GetPlaceholdersForSavedPasswordWarningText();
 }
+#endif
 
 void PasswordReuseControllerAndroid::OnGaiaPasswordChanged() {
   delete this;
diff --git a/chrome/browser/safe_browsing/android/password_reuse_controller_android.h b/chrome/browser/safe_browsing/android/password_reuse_controller_android.h
--- a/chrome/browser/safe_browsing/android/password_reuse_controller_android.h
+++ b/chrome/browser/safe_browsing/android/password_reuse_controller_android.h
@@ -48,14 +48,18 @@ class PasswordReuseControllerAndroid
   // The following functions are called from |PasswordReuseDialogViewAndroid|,
   // to get text shown on the dialog.
   base::string16 GetButtonText() const;
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
   // Get the detailed warning text that should show in the modal warning dialog.
   // |placeholder_offsets| are the start points/indices of the placeholders that
   // are passed into the resource string.
   base::string16 GetWarningDetailText(
       std::vector<size_t>* placeholder_offsets) const;
+#endif
   base::string16 GetTitle() const;
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
   const std::vector<base::string16> GetPlaceholdersForSavedPasswordWarningText()
       const;
+#endif
 
   // ChromePasswordProtectionService::Observer:
   void OnGaiaPasswordChanged() override;
@@ -68,7 +72,9 @@ class PasswordReuseControllerAndroid
 
  private:
   std::unique_ptr<PasswordReuseDialogViewAndroid> dialog_view_;
+#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
   ChromePasswordProtectionService* service_;
+#endif
   const GURL url_;
   const ReusedPasswordAccountType password_type_;
   ui::WindowAndroid* window_android_;
diff --git a/chrome/browser/safe_browsing/android/safe_browsing_bridge.cc b/chrome/browser/safe_browsing/android/safe_browsing_bridge.cc
--- a/chrome/browser/safe_browsing/android/safe_browsing_bridge.cc
+++ b/chrome/browser/safe_browsing/android/safe_browsing_bridge.cc
@@ -28,55 +28,4 @@ PrefService* GetPrefService() {
 
 namespace safe_browsing {
 
-static jint JNI_SafeBrowsingBridge_UmaValueForFile(
-    JNIEnv* env,
-    const base::android::JavaParamRef<jstring>& path) {
-  base::FilePath file_path(ConvertJavaStringToUTF8(env, path));
-  return safe_browsing::FileTypePolicies::GetInstance()->UmaValueForFile(
-      file_path);
-}
-
-static jboolean JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingEnabled(
-    JNIEnv* env) {
-  return safe_browsing::IsExtendedReportingEnabled(*GetPrefService());
-}
-
-static void JNI_SafeBrowsingBridge_SetSafeBrowsingExtendedReportingEnabled(
-    JNIEnv* env,
-    jboolean enabled) {
-  safe_browsing::SetExtendedReportingPrefAndMetric(
-      GetPrefService(), enabled,
-      safe_browsing::SBER_OPTIN_SITE_ANDROID_SETTINGS);
-}
-
-static jboolean JNI_SafeBrowsingBridge_GetSafeBrowsingExtendedReportingManaged(
-    JNIEnv* env) {
-  PrefService* pref_service = GetPrefService();
-  return pref_service->IsManagedPreference(
-      prefs::kSafeBrowsingScoutReportingEnabled);
-}
-
-static jint JNI_SafeBrowsingBridge_GetSafeBrowsingState(JNIEnv* env) {
-  return safe_browsing::GetSafeBrowsingState(*GetPrefService());
-}
-
-static void JNI_SafeBrowsingBridge_SetSafeBrowsingState(JNIEnv* env,
-                                                        jint state) {
-  return safe_browsing::SetSafeBrowsingState(
-      GetPrefService(), static_cast<SafeBrowsingState>(state));
-}
-
-static jboolean JNI_SafeBrowsingBridge_IsSafeBrowsingManaged(JNIEnv* env) {
-  return safe_browsing::IsSafeBrowsingPolicyManaged(*GetPrefService());
-}
-
-static jboolean JNI_SafeBrowsingBridge_HasAccountForLeakCheckRequest(
-    JNIEnv* env) {
-  signin::IdentityManager* identity_manager =
-      IdentityManagerFactory::GetForProfile(
-          ProfileManager::GetLastUsedProfile());
-  return password_manager::AuthenticatedLeakCheck::HasAccountForRequest(
-      identity_manager);
-}
-
 }  // namespace safe_browsing
diff --git a/chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.cc b/chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.cc
--- a/chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.cc
+++ b/chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.cc
@@ -5,14 +5,11 @@
 #include "chrome/browser/safe_browsing/android/safe_browsing_settings_launcher_android.h"
 
 #include "base/android/jni_android.h"
-#include "chrome/android/chrome_jni_headers/SafeBrowsingSettingsLauncher_jni.h"
 #include "content/public/browser/web_contents.h"
 
 namespace safe_browsing {
 
 void ShowSafeBrowsingSettings(content::WebContents* web_contents) {
-  Java_SafeBrowsingSettingsLauncher_showSafeBrowsingSettings(
-      base::android::AttachCurrentThread(), web_contents->GetJavaWebContents());
 }
 
 }  // namespace safe_browsing
diff --git a/chrome/browser/safe_browsing/download_protection/download_protection_service.cc b/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
--- a/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
@@ -20,8 +20,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service_factory.h"
 #include "chrome/browser/safe_browsing/download_protection/check_client_download_request.h"
 #include "chrome/browser/safe_browsing/download_protection/check_file_system_access_write_request.h"
 #include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
@@ -616,9 +614,4 @@ void DownloadProtectionService::RequestFinished(DeepScanningRequest* request) {
   deep_scanning_requests_.erase(it);
 }
 
-BinaryUploadService* DownloadProtectionService::GetBinaryUploadService(
-    Profile* profile) {
-  return BinaryUploadServiceFactory::GetForProfile(profile);
-}
-
 }  // namespace safe_browsing
diff --git a/chrome/browser/safe_browsing/download_protection/download_protection_service.h b/chrome/browser/safe_browsing/download_protection/download_protection_service.h
--- a/chrome/browser/safe_browsing/download_protection/download_protection_service.h
+++ b/chrome/browser/safe_browsing/download_protection/download_protection_service.h
@@ -26,7 +26,6 @@
 #include "base/supports_user_data.h"
 #include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/enterprise/connectors/common.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
 #include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
 #include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/browser/safe_browsing/download_protection/download_reporter.h"
@@ -281,10 +280,6 @@ class DownloadProtectionService {
   void OnDangerousDownloadOpened(const download::DownloadItem* item,
                                  Profile* profile);
 
-  // Get the BinaryUploadService for the given |profile|. Virtual so it can be
-  // overridden in tests.
-  virtual BinaryUploadService* GetBinaryUploadService(Profile* profile);
-
   SafeBrowsingService* sb_service_;
   // These pointers may be NULL if SafeBrowsing is disabled.
   scoped_refptr<SafeBrowsingUIManager> ui_manager_;
diff --git a/chrome/browser/safe_browsing/url_lookup_service_factory.cc b/chrome/browser/safe_browsing/url_lookup_service_factory.cc
--- a/chrome/browser/safe_browsing/url_lookup_service_factory.cc
+++ b/chrome/browser/safe_browsing/url_lookup_service_factory.cc
@@ -53,6 +53,7 @@ RealTimeUrlLookupServiceFactory::RealTimeUrlLookupServiceFactory()
 
 KeyedService* RealTimeUrlLookupServiceFactory::BuildServiceInstanceFor(
     content::BrowserContext* context) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   if (!g_browser_process->safe_browsing_service()) {
     return nullptr;
   }
@@ -84,6 +85,9 @@ KeyedService* RealTimeUrlLookupServiceFactory::BuildServiceInstanceFor(
       GetProfileManagementStatus(browser_policy_connector),
       is_under_advanced_protection, profile->IsOffTheRecord(),
       g_browser_process->variations_service());
+#else
+  return nullptr;
+#endif
 }
 
 }  // namespace safe_browsing
diff --git a/chrome/browser/safety_check/android/BUILD.gn b/chrome/browser/safety_check/android/BUILD.gn
--- a/chrome/browser/safety_check/android/BUILD.gn
+++ b/chrome/browser/safety_check/android/BUILD.gn
@@ -42,7 +42,6 @@ android_library("java") {
     "//chrome/browser/password_check/android:password_check_java_enums",
     "//chrome/browser/password_manager/android:java",
     "//chrome/browser/preferences:java",
-    "//chrome/browser/safe_browsing/android:java",
     "//chrome/browser/settings:java",
     "//chrome/browser/signin/ui/android:java",
     "//components/browser_ui/settings/android:java",
diff --git a/chrome/browser/safety_check/android/java/src/org/chromium/chrome/browser/safety_check/SafetyCheckMediator.java b/chrome/browser/safety_check/android/java/src/org/chromium/chrome/browser/safety_check/SafetyCheckMediator.java
--- a/chrome/browser/safety_check/android/java/src/org/chromium/chrome/browser/safety_check/SafetyCheckMediator.java
+++ b/chrome/browser/safety_check/android/java/src/org/chromium/chrome/browser/safety_check/SafetyCheckMediator.java
@@ -30,8 +30,6 @@ import org.chromium.chrome.browser.password_manager.ManagePasswordsReferrer;
 import org.chromium.chrome.browser.password_manager.PasswordManagerHelper;
 import org.chromium.chrome.browser.preferences.ChromePreferenceKeys;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment;
 import org.chromium.chrome.browser.safety_check.SafetyCheckBridge.SafetyCheckCommonObserver;
 import org.chromium.chrome.browser.safety_check.SafetyCheckProperties.PasswordsState;
 import org.chromium.chrome.browser.safety_check.SafetyCheckProperties.SafeBrowsingState;
@@ -185,30 +183,6 @@ class SafetyCheckMediator implements PasswordCheck.Observer, SafetyCheckCommonOb
         // Set the listener for clicking the Safe Browsing element.
         mModel.set(SafetyCheckProperties.SAFE_BROWSING_CLICK_LISTENER,
                 (Preference.OnPreferenceClickListener) (p) -> {
-                    // Record UMA metrics.
-                    RecordUserAction.record("Settings.SafetyCheck.ManageSafeBrowsing");
-                    RecordHistogram.recordEnumeratedHistogram(SAFETY_CHECK_INTERACTIONS,
-                            SafetyCheckInteractions.SAFE_BROWSING_MANAGE,
-                            SafetyCheckInteractions.MAX_VALUE + 1);
-                    String safeBrowsingSettingsClassName;
-                    if (ChromeFeatureList.isEnabled(ChromeFeatureList.SAFE_BROWSING_SECTION_UI)) {
-                        // Open the Safe Browsing settings since the flag for them is enabled.
-                        safeBrowsingSettingsClassName =
-                                SafeBrowsingSettingsFragment.class.getName();
-                        p.getContext().startActivity(settingsLauncher.createSettingsActivityIntent(
-                                p.getContext(), safeBrowsingSettingsClassName,
-                                SafeBrowsingSettingsFragment.createArguments(
-                                        SettingsAccessPoint.SAFETY_CHECK)));
-                    } else {
-                        // Open the Sync and Services settings.
-                        // TODO(crbug.com/1070620): replace the hardcoded class name with an import
-                        // and ".class.getName()" once SyncAndServicesSettings is moved out of
-                        // //chrome/android.
-                        safeBrowsingSettingsClassName =
-                                "org.chromium.chrome.browser.sync.settings.SyncAndServicesSettings";
-                        p.getContext().startActivity(settingsLauncher.createSettingsActivityIntent(
-                                p.getContext(), safeBrowsingSettingsClassName));
-                    }
                     return true;
                 });
         // Set the listener for clicking the passwords element.
diff --git a/chrome/browser/ssl/sct_reporting_service_factory.cc b/chrome/browser/ssl/sct_reporting_service_factory.cc
--- a/chrome/browser/ssl/sct_reporting_service_factory.cc
+++ b/chrome/browser/ssl/sct_reporting_service_factory.cc
@@ -7,7 +7,6 @@
 #include "base/callback_helpers.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/sct_reporting_service.h"
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 
@@ -32,15 +31,7 @@ SCTReportingServiceFactory::~SCTReportingServiceFactory() = default;
 
 KeyedService* SCTReportingServiceFactory::BuildServiceInstanceFor(
     content::BrowserContext* profile) const {
-  safe_browsing::SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
-  // In unit tests the safe browsing service can be null, if this happens,
-  // return null instead of crashing.
-  if (!safe_browsing_service)
-    return nullptr;
-
-  return new SCTReportingService(safe_browsing_service,
-                                 static_cast<Profile*>(profile));
+  return nullptr;
 }
 
 content::BrowserContext* SCTReportingServiceFactory::GetBrowserContextToUse(
diff --git a/chrome/browser/ssl/security_state_tab_helper.cc b/chrome/browser/ssl/security_state_tab_helper.cc
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -16,7 +16,6 @@
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/reputation/reputation_web_contents_observer.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/known_interception_disclosure_infobar_delegate.h"
@@ -168,13 +167,8 @@ SecurityStateTabHelper::GetVisibleSecurityState() {
   // information is still being initialized, thus no need to check for that.
   state->malicious_content_status = GetMaliciousContentStatus();
 
-  ReputationWebContentsObserver* reputation_web_contents_observer =
-      ReputationWebContentsObserver::FromWebContents(web_contents());
   state->safety_tip_info =
-      reputation_web_contents_observer
-          ? reputation_web_contents_observer
-                ->GetSafetyTipInfoForVisibleNavigation()
-          : security_state::SafetyTipInfo(
+          security_state::SafetyTipInfo(
                 {security_state::SafetyTipStatus::kUnknown, GURL()});
 
   // If both the on-form warning and the on-submit warning are enabled for mixed
@@ -275,6 +269,7 @@ bool SecurityStateTabHelper::UsedPolicyInstalledCertificate() const {
 
 security_state::MaliciousContentStatus
 SecurityStateTabHelper::GetMaliciousContentStatus() const {
+#if defined(FULL_SAFE_BROWSING)
   content::NavigationEntry* entry =
       web_contents()->GetController().GetVisibleEntry();
   if (!entry)
@@ -361,6 +356,7 @@ SecurityStateTabHelper::GetMaliciousContentStatus() const {
         break;
     }
   }
+#endif
   return security_state::MALICIOUS_CONTENT_STATUS_NONE;
 }
 
diff --git a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
--- a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
+++ b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
@@ -110,10 +110,14 @@ void ChromeSubresourceFilterClient::OnAdsViolationTriggered(
 
 const scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
 ChromeSubresourceFilterClient::GetSafeBrowsingDatabaseManager() {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::SafeBrowsingService* safe_browsing_service =
       g_browser_process->safe_browsing_service();
   return safe_browsing_service ? safe_browsing_service->database_manager()
                                : nullptr;
+#else
+  return nullptr;
+#endif
 }
 
 subresource_filter::ProfileInteractionManager*
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -318,7 +318,8 @@ static_library("ui") {
   }
 
   # TODO(crbug/925153): Remove this circular dependency.
-  allow_circular_includes_from = [ "//chrome/browser/safe_browsing" ]
+  allow_circular_includes_from = [ 
+  ]
   defines = []
   libs = []
 
@@ -373,7 +374,6 @@ static_library("ui") {
     "//chrome/browser/resources/omnibox:resources",
     "//chrome/browser/resources/quota_internals:quota_internals_resources",
     "//chrome/browser/resources/usb_internals:resources",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/ui/webui/downloads:mojo_bindings",
     "//chrome/browser/ui/webui/new_tab_page:mojo_bindings",
@@ -476,17 +476,6 @@ static_library("ui") {
     "//components/reading_list/features:flags",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing/content/password_protection",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/content/triggers:ad_redirect_trigger",
-    "//components/safe_browsing/content/web_ui",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
-    "//components/safe_browsing/core/password_protection:password_protection_metrics_util",
     "//components/schema_org/common:improved_mojom",
     "//components/search",
     "//components/search_engines",
@@ -735,8 +724,6 @@ static_library("ui") {
       "android/passwords/password_generation_dialog_view_android.h",
       "android/passwords/password_generation_editing_popup_view_android.cc",
       "android/passwords/password_generation_editing_popup_view_android.h",
-      "android/safe_browsing/password_reuse_dialog_view_android.cc",
-      "android/safe_browsing/password_reuse_dialog_view_android.h",
       "android/simple_message_box_android.cc",
       "android/ssl_client_certificate_selector.cc",
       "android/status_tray_android.cc",
@@ -1535,7 +1522,6 @@ static_library("ui") {
       "//chrome/browser/promo_browser_command:mojo_bindings",
       "//chrome/browser/resource_coordinator:tab_metrics_event_proto",
       "//chrome/browser/resource_coordinator/tab_ranker",
-      "//chrome/browser/safe_browsing:advanced_protection",
       "//chrome/browser/search/drive:mojo_bindings",
       "//chrome/browser/search/task_module:mojo_bindings",
       "//chrome/browser/ui/color:color_headers",
@@ -1556,7 +1542,6 @@ static_library("ui") {
       "//components/printing/browser",
       "//components/profile_metrics",
       "//components/reading_list/features:flags",
-      "//components/safe_browsing/core/common:safe_browsing_policy_handler",
       "//components/safety_check",
       "//components/search_provider_logos",
       "//components/services/app_service/public/cpp:app_update",
@@ -3264,7 +3249,6 @@ static_library("ui") {
       "//ui/views/controls/webview",
     ]
     deps += [
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/ui/startup:buildflags",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/credential_provider/common:common_constants",
@@ -3586,7 +3570,6 @@ static_library("ui") {
       "views/device_chooser_content_view.h",
       "views/devtools_process_observer.cc",
       "views/devtools_process_observer.h",
-      "views/download/download_danger_prompt_views.cc",
       "views/download/download_in_progress_dialog_view.cc",
       "views/download/download_in_progress_dialog_view.h",
       "views/download/download_item_view.cc",
@@ -4621,10 +4604,6 @@ static_library("ui") {
 
   if (safe_browsing_mode == 1) {
     deps += [
-      "//chrome/browser/ui/webui/reset_password:mojo_bindings",
-      "//chrome/common/safe_browsing:proto",
-      "//components/safe_browsing/core:csd_proto",
-      "//components/safe_browsing/core/password_protection:password_protection_metrics_util",
     ]
   }
 
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -342,12 +342,6 @@ CHAR-LIMIT guidelines:
       <message name="IDS_PRELOAD_PAGES_SUMMARY" desc="Summary for a checkbox in Settings that controls pages preloading and informs the user about the data shared by this feature.">
         Uses cookies to remember your preferences, even if you don't visit those pages
       </message>
-      <message name="IDS_NAVIGATION_ERROR_SUGGESTIONS_TITLE" desc="Title for a checkbox in Settings that controls pages suggestions on navigation errors and informs the user about the data shared by this feature.">
-        Show suggestions for similar pages when a page can't be found
-      </message>
-      <message name="IDS_NAVIGATION_ERROR_SUGGESTIONS_SUMMARY" desc="Summary for a checkbox in Settings that controls pages suggestions on navigation errors and informs the user about the data shared by this feature.">
-        Sends the URL of a page you're trying to reach to Google
-      </message>
       <message name="IDS_URL_KEYED_ANONYMIZED_DATA_TITLE" desc="Title for a checkbox in Settings that controls non-personalized URL collection and informs the user about the data shared by this feature.">
         Make searches and browsing better
       </message>
@@ -363,12 +357,6 @@ CHAR-LIMIT guidelines:
       <message name="IDS_PRIVACY_SYNC_AND_SERVICES_LINK_SYNC_OFF" desc="The text for Privacy preferences that is shown after all preference rows. This version of the text is shown if Sync hasn't been turned on.">
         For more settings that relate to privacy, security, and data collection, see <ph name="BEGIN_LINK">&lt;link&gt;</ph>Google services<ph name="END_LINK">&lt;/link&gt;</ph>
       </message>
-      <message name="IDS_USAGE_AND_CRASH_REPORTS_TITLE" desc="Title for a preference that enables sending usage statistics and crash reports.">
-        Help improve Chrome's features and performance
-      </message>
-      <message name="IDS_USAGE_AND_CRASH_REPORTS_SUMMARY" desc="Description for 'Help improve Chrome's features and performance' preference.">
-        Automatically sends usage statistics and crash reports to Google
-      </message>
       <message name="IDS_CANCEL_SYNC_DIALOG_TITLE" desc="The title of a dialog that is shown when users tries closing 'Sync and Google services' preferences without confirming the changes.">
         Cancel sync?
       </message>
@@ -729,12 +717,6 @@ CHAR-LIMIT guidelines:
       <message name="IDS_PREFS_PRIVACY_SECURITY" desc="Title for the Privacy and Security preferences. [CHAR-LIMIT=32]">
         Privacy and security
       </message>
-      <message name="IDS_SAFE_BROWSING_SCOUT_REPORTING_TITLE" desc="Title for checkbox that controls reporting data to detect bad apps/sites. Please ensure ‘Safe Browsing’ in this message matches the ‘Safe Browsing’ settings title.">
-        Help improve Chrome security
-      </message>
-      <message name="IDS_SAFE_BROWSING_SCOUT_REPORTING_SUMMARY" desc="Body text for Chrome setting under 'Help Improve Safe Browsing'. This feature sends small amounts of data to Google about potentially-dangerous pages to help Safe Browsing improve Chrome's protection against malware and phishing.">
-        To detect dangerous apps and sites, Chrome sends URLs of some pages you visit, limited system information, and some page content to Google
-      </message>
       <message name="IDS_SAFE_BROWSING_TITLE" desc="Title for safe browsing.">
         Safe Browsing (protects you and your device from dangerous sites)
       </message>
@@ -4028,9 +4010,6 @@ Data from your Incognito session will only be cleared from Chrome when you <ph n
       <message name="IDS_USAGE_STATS_CONSENT_PROMPT" desc="Consent prompt when authorizing Digital Wellbeing to access Chrome usage data">
        You can see sites you visit in Chrome and set timers for them.\n\nGoogle gets info about the sites you set timers for and how long you visit them. This info is used to make Digital Wellbeing better.
       </message>
-      <message name="IDS_USAGE_STATS_SETTING_TITLE" desc="Title for setting removing Digital Wellbeing's access to Chrome usage data">
-        Remove your Chrome activity from Digital Wellbeing
-      </message>
       <message name="IDS_USAGE_STATS_REVOCATION_PROMPT" desc="Prompt for removing Digital Wellbeing's access to Chrome usage data">
         Remove your Chrome activity from Digital Wellbeing?
       </message>
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -56,11 +56,7 @@
 #include "chrome/browser/previews/resource_loading_hints/resource_loading_hints_web_contents_observer.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_key.h"
-#include "chrome/browser/reputation/reputation_web_contents_observer.h"
 #include "chrome/browser/resource_coordinator/tab_helper.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_tab_observer.h"
-#include "chrome/browser/safe_browsing/trigger_creator.h"
 #include "chrome/browser/sessions/session_tab_helper_factory.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/connection_help_tab_helper.h"
@@ -314,12 +310,6 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
   resource_coordinator::ResourceCoordinatorTabHelper::CreateForWebContents(
       web_contents);
   ResourceLoadingHintsWebContentsObserver::CreateForWebContents(web_contents);
-  safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
-      web_contents);
-  safe_browsing::SafeBrowsingTabObserver::CreateForWebContents(web_contents);
-  safe_browsing::TriggerCreator::MaybeCreateTriggersForWebContents(
-      profile, web_contents);
-  ReputationWebContentsObserver::CreateForWebContents(web_contents);
   SearchEngineTabHelper::CreateForWebContents(web_contents);
   SecurityStateTabHelper::CreateForWebContents(web_contents);
   if (site_engagement::SiteEngagementService::IsEnabled()) {
diff --git a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -86,8 +86,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/reading_list/features/reading_list_switches.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/web_ui/constants.h"
 #include "components/search/ntp_features.h"
 #include "components/security_interstitials/content/connection_help_ui.h"
 #include "components/security_interstitials/content/known_interception_disclosure_ui.h"
@@ -557,8 +555,6 @@ WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,
     return &NewWebUI<PredictorsUI>;
   if (url.host_piece() == chrome::kChromeUIQuotaInternalsHost)
     return &NewWebUI<QuotaInternalsUI>;
-  if (url.host_piece() == safe_browsing::kChromeUISafeBrowsingHost)
-    return &NewWebUI<safe_browsing::SafeBrowsingUI>;
   if (url.host_piece() == chrome::kChromeUISignInInternalsHost)
     return &NewWebUI<SignInInternalsUI>;
   if (url.host_piece() == chrome::kChromeUISuggestionsHost)
diff --git a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -287,6 +287,7 @@ CreateInsecureFormPage(content::WebContents* web_contents) {
                                                      request_url));
 }
 
+#if 0
 std::unique_ptr<safe_browsing::SafeBrowsingBlockingPage>
 CreateSafeBrowsingBlockingPage(content::WebContents* web_contents) {
   safe_browsing::SBThreatType threat_type =
@@ -341,7 +342,9 @@ CreateSafeBrowsingBlockingPage(content::WebContents* web_contents) {
           g_browser_process->safe_browsing_service()->ui_manager().get(),
           web_contents, main_frame_url, resource, true));
 }
+#endif
 
+#if 0
 std::unique_ptr<TestSafeBrowsingBlockingPageQuiet>
 CreateSafeBrowsingQuietBlockingPage(content::WebContents* web_contents) {
   safe_browsing::SBThreatType threat_type =
@@ -393,6 +396,7 @@ CreateSafeBrowsingQuietBlockingPage(content::WebContents* web_contents) {
           g_browser_process->safe_browsing_service()->ui_manager().get(),
           web_contents, main_frame_url, resource, is_giant_webview));
 }
+#endif
 
 #if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
 std::unique_ptr<CaptivePortalBlockingPage> CreateCaptivePortalBlockingPage(
@@ -510,8 +514,6 @@ void InterstitialHTMLSource::StartDataRequest(
     interstitial_delegate = CreateBlockedInterceptionBlockingPage(web_contents);
   } else if (path_without_query == "/legacy-tls") {
     interstitial_delegate = CreateLegacyTLSBlockingPage(web_contents);
-  } else if (path_without_query == "/safebrowsing") {
-    interstitial_delegate = CreateSafeBrowsingBlockingPage(web_contents);
   } else if (path_without_query == "/clock") {
     interstitial_delegate = CreateBadClockBlockingPage(web_contents);
   } else if (path_without_query == "/lookalike") {
@@ -524,13 +526,6 @@ void InterstitialHTMLSource::StartDataRequest(
     interstitial_delegate = CreateOriginPolicyInterstitialPage(web_contents);
   } else if (path_without_query == "/insecure_form") {
     interstitial_delegate = CreateInsecureFormPage(web_contents);
-  }
-
-  if (path_without_query == "/quietsafebrowsing") {
-    std::unique_ptr<TestSafeBrowsingBlockingPageQuiet> blocking_page =
-        CreateSafeBrowsingQuietBlockingPage(web_contents);
-    html = blocking_page->GetHTML();
-    interstitial_delegate = std::move(blocking_page);
 #if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   } else if (path_without_query == "/supervised_user") {
     html = GetSupervisedUserInterstitialHTML(path);
diff --git a/chrome/common/safe_browsing/BUILD.gn b/chrome/common/safe_browsing/BUILD.gn
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -10,6 +10,8 @@ proto_library("proto") {
   sources = [ "crx_info.proto" ]
 }
 
+if(false) {
+
 if (safe_browsing_mode == 1) {
   source_set("archive_analyzer_results") {
     sources = [
@@ -160,3 +162,5 @@ source_set("safe_browsing") {
     ]
   }
 }
+
+}
\ No newline at end of file
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -96,7 +96,9 @@
 #include "components/paint_preview/buildflags/buildflags.h"
 #include "components/pdf/renderer/pepper_pdf_host.h"
 #include "components/safe_browsing/buildflags.h"
+#if defined(FULL_SAFE_BROWSING)
 #include "components/safe_browsing/content/renderer/threat_dom_details.h"
+#endif
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/subresource_filter/content/renderer/subresource_filter_agent.h"
 #include "components/subresource_filter/content/renderer/unverified_ruleset_dealer.h"
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -198,7 +198,7 @@ static_library("test_support") {
   deps = [
     "//build:chromeos_buildflags",
     "//chrome/common/search:mojo_bindings",
-    "//components/safe_browsing/content/renderer/phishing_classifier:unit_tests_support",
+    #"//components/safe_browsing/content/renderer/phishing_classifier:unit_tests_support",
     "//components/security_interstitials/content:security_interstitial_page",
   ]
 
@@ -234,7 +234,7 @@ static_library("test_support") {
     "//components/permissions:test_support",
     "//components/prefs:test_support",
     "//components/rappor:test_support",
-    "//components/safe_browsing/core/db:v4_test_util",
+    #"//components/safe_browsing/core/db:v4_test_util",
     "//components/search_engines:test_support",
     "//components/sessions:test_support",
     "//components/signin/public/base:test_support",
@@ -815,8 +815,8 @@ if (!is_android) {
       "//components/page_load_metrics/common:test_support",
       "//components/policy:chrome_settings_proto_generated_compile",
       "//components/resources",
-      "//components/safe_browsing:buildflags",
-      "//components/safe_browsing/core/db:test_database_manager",
+      #"//components/safe_browsing:buildflags",
+      #"//components/safe_browsing/core/db:test_database_manager",
       "//components/services/language_detection/public/cpp",
       "//components/services/patch/public/mojom",
       "//components/services/quarantine:test_support",
@@ -1256,7 +1256,7 @@ if (!is_android) {
       "../browser/policy/policy_test_utils.cc",
       "../browser/policy/policy_test_utils.h",
       "../browser/policy/restore_on_startup_policy_browsertest.cc",
-      "../browser/policy/safe_browsing_policy_browsertest.cc",
+      #"../browser/policy/safe_browsing_policy_browsertest.cc",
       "../browser/policy/signed_exchange_browsertest.cc",
       "../browser/policy/site_isolation_policy_browsertest.cc",
       "../browser/policy/ssl_error_overriding_allowed_policy_browsertest.cc",
@@ -1311,16 +1311,16 @@ if (!is_android) {
       "../browser/resource_coordinator/discard_before_unload_helper_browsertest.cc",
       "../browser/resource_coordinator/tab_activity_watcher_browsertest.cc",
       "../browser/resource_coordinator/tab_manager_browsertest.cc",
-      "../browser/safe_browsing/client_side_detection_host_browsertest.cc",
-      "../browser/safe_browsing/client_side_detection_service_browsertest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.h",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
-      "../browser/safe_browsing/download_protection/deep_scanning_browsertest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_browsertest.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.h",
+      #"../browser/safe_browsing/client_side_detection_host_browsertest.cc",
+      # "../browser/safe_browsing/client_side_detection_service_browsertest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.h",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
+      # "../browser/safe_browsing/download_protection/deep_scanning_browsertest.cc",
+      # "../browser/safe_browsing/download_protection/download_protection_service_browsertest.cc",
+      # "../browser/safe_browsing/test_safe_browsing_database_helper.cc",
+      # "../browser/safe_browsing/test_safe_browsing_database_helper.h",
       "../browser/safe_xml_parser_browsertest.cc",
       "../browser/search/local_ntp_navigation_browsertest.cc",
       "../browser/search/ntp_custom_background_enabled_policy_handler_browsertest.cc",
@@ -1399,7 +1399,7 @@ if (!is_android) {
       "../browser/ui/autofill/payments/save_upi_bubble_controller_impl_browsertest.cc",
       "../browser/ui/blocked_content/popup_opener_tab_helper_browsertest.cc",
       "../browser/ui/blocked_content/popup_tracker_browsertest.cc",
-      "../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_browsertest.cc",
+      #"../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_browsertest.cc",
       "../browser/ui/blocked_content/tab_under_blocker_browsertest.cc",
       "../browser/ui/bookmarks/bookmark_browsertest.cc",
       "../browser/ui/browser_browsertest.cc",
@@ -1667,7 +1667,7 @@ if (!is_android) {
         "../browser/importer/edge_importer_browsertest_win.cc",
         "../browser/importer/ie_importer_browsertest_win.cc",
         "../browser/process_singleton_browsertest.cc",
-        "../browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc",
+        #"../browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc",
         "../browser/ui/startup/startup_browser_creator_corrupt_profiles_browsertest_win.cc",
         "../browser/ui/startup/startup_browser_creator_triggered_reset_browsertest_win.cc",
         "../browser/ui/views/chrome_cleaner_dialog_browsertest_win.cc",
@@ -2132,9 +2132,9 @@ if (!is_android) {
         "../browser/policy/extension_force_install_mixin.cc",
         "../browser/policy/extension_force_install_mixin.h",
         "../browser/policy/extension_policy_browsertest.cc",
-        "../browser/safe_browsing/settings_reset_prompt/default_settings_fetcher_browsertest.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
+        # "../browser/safe_browsing/settings_reset_prompt/default_settings_fetcher_browsertest.cc",
+        # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
+        # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
         "../browser/ui/views/extensions/extension_dialog_browsertest.cc",
         "../browser/ui/views/web_apps/pwa_confirmation_bubble_view_browsertest.cc",
         "../browser/ui/views/web_apps/web_app_confirmation_view_browsertest.cc",
@@ -2153,13 +2153,13 @@ if (!is_android) {
 
       if (is_win) {
         sources += [
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_reboot_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.h",
-          "../browser/safe_browsing/chrome_cleaner/settings_resetter_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_dependency_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_browsertest_win.cc",
+          # "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_dialog_controller_impl_browsertest_win.cc",
+          # "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_reboot_dialog_controller_impl_browsertest_win.cc",
+          # "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.cc",
+          # "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.h",
+          # "../browser/safe_browsing/chrome_cleaner/settings_resetter_browsertest_win.cc",
+          # "../browser/safe_browsing/settings_reset_prompt/settings_reset_dependency_browsertest_win.cc",
+          # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_browsertest_win.cc",
         ]
       }
 
@@ -2332,7 +2332,7 @@ if (!is_android) {
         "../browser/ui/views/profiles/profile_menu_view_browsertest.cc",
         "../browser/ui/views/qrcode_generator/qrcode_generator_bubble_browsertest.cc",
         "../browser/ui/views/read_later/read_later_button_browsertest.cc",
-        "../browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog_browsertest.cc",
+        #"../browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog_browsertest.cc",
         "../browser/ui/views/select_file_dialog_extension_browsertest.cc",
         "../browser/ui/views/session_crashed_bubble_view_browsertest.cc",
         "../browser/ui/views/status_bubble_views_browsertest.cc",
@@ -2941,19 +2941,19 @@ if (!is_android) {
     }
     if (safe_browsing_mode == 1) {
       sources += [
-        "../browser/safe_browsing/ad_redirect_trigger_browsertest.cc",
-        "../browser/safe_browsing/certificate_reporting_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_blocking_page_test.cc",
-        "../browser/safe_browsing/safe_browsing_navigation_observer_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_service_browsertest.cc",
-        "../browser/safe_browsing/v4_embedded_test_server_browsertest.cc",
-        "../browser/ssl/sct_reporting_service_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-        "../renderer/safe_browsing/phishing_dom_feature_extractor_browsertest.cc",
-        "../renderer/safe_browsing/threat_dom_details_browsertest.cc",
+        # "../browser/safe_browsing/ad_redirect_trigger_browsertest.cc",
+        # "../browser/safe_browsing/certificate_reporting_service_browsertest.cc",
+        # "../browser/safe_browsing/chrome_password_protection_service_browsertest.cc",
+        # "../browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc",
+        # "../browser/safe_browsing/safe_browsing_blocking_page_test.cc",
+        # "../browser/safe_browsing/safe_browsing_navigation_observer_browsertest.cc",
+        # "../browser/safe_browsing/safe_browsing_service_browsertest.cc",
+        # "../browser/safe_browsing/v4_embedded_test_server_browsertest.cc",
+        # "../browser/ssl/sct_reporting_service_browsertest.cc",
+        # "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
+        # "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
+        # "../renderer/safe_browsing/phishing_dom_feature_extractor_browsertest.cc",
+        # "../renderer/safe_browsing/threat_dom_details_browsertest.cc",
       ]
     }
     if (enable_captive_portal_detection) {
@@ -3006,8 +3006,8 @@ if (!is_android) {
         sources -= [
           # single-process mode hangs on Mac sometimes because of multiple UI
           # message loops. See 306348
-          "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-          "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
+          # "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
+          # "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
         ]
       }
     }
@@ -3164,8 +3164,8 @@ if (!is_android) {
       sources -= [
         # These tests depend on single process mode, which is disabled in
         # official builds.
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
+        # "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
+        # "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
       ]
     }
 
@@ -3635,7 +3635,7 @@ test("unit_tests") {
     "../browser/permissions/chrome_permission_request_manager_unittest.cc",
     "../browser/permissions/contextual_notification_permission_ui_selector_unittest.cc",
     "../browser/permissions/crowd_deny_preload_data_unittest.cc",
-    "../browser/permissions/crowd_deny_safe_browsing_request_unittest.cc",
+    #"../browser/permissions/crowd_deny_safe_browsing_request_unittest.cc",
     "../browser/permissions/permission_context_base_feature_policy_unittest.cc",
     "../browser/permissions/prediction_based_permission_ui_selector_unittest.cc",
     "../browser/permissions/pref_notification_permission_ui_selector_unittest.cc",
@@ -4061,7 +4061,7 @@ test("unit_tests") {
       "../browser/performance_manager/test_support/site_data_utils.h",
       "../browser/profiles/profile_avatar_icon_util_unittest.cc",
       "../browser/profiles/profile_destroyer_unittest.cc",
-      "../browser/safe_browsing/generated_safe_browsing_pref_unittest.cc",
+      #"../browser/safe_browsing/generated_safe_browsing_pref_unittest.cc",
       "../browser/speech/speech_recognition_service_factory_unittest.cc",
       "../browser/tab_contents/form_interaction_tab_helper_unittest.cc",
       "../browser/ui/autofill/payments/autofill_dialog_models_unittest.cc",
@@ -4219,11 +4219,6 @@ test("unit_tests") {
     "//components/page_load_metrics/common:test_support",
     "//components/query_tiles:unit_tests",
     "//components/resources",
-    "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/password_protection:mock_password_protection",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/db",
-    "//components/safe_browsing/core/db:test_database_manager",
     "//components/safe_search_api:test_support",
     "//components/schema_org/common:improved_mojom",
     "//components/services/patch/content",
@@ -4781,15 +4776,15 @@ test("unit_tests") {
     if (is_win) {
       sources += [
         "../browser/profile_resetter/triggered_profile_resetter_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_fetcher_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_prompt_channel_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.h",
-        "../browser/safe_browsing/chrome_cleaner/reporter_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/srt_delete_extension_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/srt_field_trial_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_fetcher_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_runner_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/chrome_prompt_channel_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.cc",
+        # "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.h",
+        # "../browser/safe_browsing/chrome_cleaner/reporter_runner_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/srt_delete_extension_win_unittest.cc",
+        # "../browser/safe_browsing/chrome_cleaner/srt_field_trial_win_unittest.cc",
         "../browser/task_manager/sampling/shared_sampler_win_unittest.cc",
         "../utility/importer/edge_database_reader_unittest_win.cc",
       ]
@@ -5269,9 +5264,9 @@ test("unit_tests") {
       "../browser/extensions/api/preference/preference_api_prefs_unittest.cc",
       "../browser/extensions/api/proxy/proxy_api_helpers_unittest.cc",
       "../browser/extensions/api/runtime/chrome_runtime_api_delegate_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_api_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_util_unittest.cc",
+      # "../browser/extensions/api/safe_browsing_private/safe_browsing_private_api_unittest.cc",
+      # "../browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc",
+      # "../browser/extensions/api/safe_browsing_private/safe_browsing_util_unittest.cc",
       "../browser/extensions/api/search/search_api_unittest.cc",
       "../browser/extensions/api/settings_private/generated_pref_test_base.cc",
       "../browser/extensions/api/settings_private/generated_pref_test_base.h",
@@ -5383,12 +5378,12 @@ test("unit_tests") {
       "../browser/notifications/notification_system_observer_unittest.cc",
       "../browser/policy/chrome_extension_policy_migrator_unittest.cc",
       "../browser/renderer_context_menu/context_menu_content_type_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
-      "../browser/safe_browsing/test_extension_event_observer.cc",
-      "../browser/safe_browsing/test_extension_event_observer.h",
+      # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config_unittest.cc",
+      # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_unittest.cc",
+      # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
+      # "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
+      # "../browser/safe_browsing/test_extension_event_observer.cc",
+      # "../browser/safe_browsing/test_extension_event_observer.h",
       "../browser/sync/glue/extensions_activity_monitor_unittest.cc",
       "../browser/sync_file_system/drive_backend/callback_helper_unittest.cc",
       "../browser/sync_file_system/drive_backend/callback_tracker_unittest.cc",
@@ -5549,7 +5544,6 @@ test("unit_tests") {
       "//chrome/browser/web_applications/extensions:unit_tests",
       "//chrome/common/extensions/api",
       "//components/enterprise:test_support",
-      "//components/safe_browsing:buildflags",
       "//components/services/unzip:in_process",
       "//extensions:extensions_resources",
       "//extensions/browser:test_support",
@@ -5671,18 +5665,18 @@ test("unit_tests") {
 
   if (safe_browsing_mode > 0) {
     sources += [
-      "../browser/safe_browsing/certificate_reporting_service_unittest.cc",
-      "../browser/safe_browsing/chrome_password_protection_service_unittest.cc",
-      "../browser/safe_browsing/safe_browsing_metrics_collector_unittest.cc",
-      "../browser/safe_browsing/threat_details_unittest.cc",
-      "../browser/safe_browsing/ui_manager_unittest.cc",
+      # "../browser/safe_browsing/certificate_reporting_service_unittest.cc",
+      # "../browser/safe_browsing/chrome_password_protection_service_unittest.cc",
+      # "../browser/safe_browsing/safe_browsing_metrics_collector_unittest.cc",
+      # "../browser/safe_browsing/threat_details_unittest.cc",
+      # "../browser/safe_browsing/ui_manager_unittest.cc",
     ]
 
     # TODO(crbug/1056278): Enable this on Fuchsia
     if (!is_fuchsia) {
       deps += [
-        "//components/safe_browsing/core:file_type_policies_test_support",
-        "//components/safe_browsing/core/common:test_support",
+        # "//components/safe_browsing/core:file_type_policies_test_support",
+        # "//components/safe_browsing/core/common:test_support",
       ]
     }
   }
@@ -5691,87 +5685,88 @@ test("unit_tests") {
     # TODO(sgurun): enable tests for safe_browsing==2.
     sources += [
       "../browser/enterprise/connectors/content_analysis_delegate_unittest.cc",
-      "../browser/safe_browsing/advanced_protection_status_manager_factory_unittest.cc",
-      "../browser/safe_browsing/advanced_protection_status_manager_unittest.cc",
-      "../browser/safe_browsing/chrome_enterprise_url_lookup_service_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_host_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_service_factory_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_fcm_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_upload_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_utils_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/file_analysis_request_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/multipart_uploader_unittest.cc",
-      "../browser/safe_browsing/download_protection/deep_scanning_request_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/file_analyzer_unittest.cc",
-      "../browser/safe_browsing/download_protection/path_sanitizer_unittest.cc",
-      "../browser/safe_browsing/download_protection/two_phase_uploader_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/binary_integrity_incident_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/delayed_callback_runner_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/download_metadata_manager_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_report_uploader_impl_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.h",
-      "../browser/safe_browsing/incident_reporting/platform_state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/preference_validation_delegate_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/tracked_preference_incident_unittest.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.h",
-      "../browser/safe_browsing/safe_browsing_navigation_observer_unittest.cc",
-      "../browser/safe_browsing/verdict_cache_manager_factory_unittest.cc",
-      "../common/safe_browsing/binary_feature_extractor_unittest.cc",
-      "../common/safe_browsing/download_type_util_unittest.cc",
-      "../common/safe_browsing/ipc_protobuf_message_test_messages.h",
-      "../common/safe_browsing/ipc_protobuf_message_unittest.cc",
+      # "../browser/safe_browsing/advanced_protection_status_manager_factory_unittest.cc",
+      # "../browser/safe_browsing/advanced_protection_status_manager_unittest.cc",
+      # "../browser/safe_browsing/chrome_enterprise_url_lookup_service_unittest.cc",
+      # "../browser/safe_browsing/client_side_detection_host_unittest.cc",
+      # "../browser/safe_browsing/client_side_detection_service_factory_unittest.cc",
+      # "../browser/safe_browsing/client_side_detection_service_unittest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/binary_fcm_service_unittest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/binary_upload_service_unittest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
+      # "../browser/safe_browsing/cloud_content_scanning/deep_scanning_utils_unittest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/file_analysis_request_unittest.cc",
+      # "../browser/safe_browsing/cloud_content_scanning/multipart_uploader_unittest.cc",
+      # "../browser/safe_browsing/download_protection/deep_scanning_request_unittest.cc",
+      # "../browser/safe_browsing/download_protection/download_feedback_service_unittest.cc",
+      # "../browser/safe_browsing/download_protection/download_feedback_unittest.cc",
+      # "../browser/safe_browsing/download_protection/download_protection_service_unittest.cc",
+      # "../browser/safe_browsing/download_protection/file_analyzer_unittest.cc",
+      # "../browser/safe_browsing/download_protection/path_sanitizer_unittest.cc",
+      # "../browser/safe_browsing/download_protection/two_phase_uploader_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/binary_integrity_incident_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/delayed_callback_runner_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/download_metadata_manager_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/incident_report_uploader_impl_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/mock_incident_receiver.cc",
+      # "../browser/safe_browsing/incident_reporting/mock_incident_receiver.h",
+      # "../browser/safe_browsing/incident_reporting/platform_state_store_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/preference_validation_delegate_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/state_store_unittest.cc",
+      # "../browser/safe_browsing/incident_reporting/tracked_preference_incident_unittest.cc",
+      # "../browser/safe_browsing/local_two_phase_testserver.cc",
+      # "../browser/safe_browsing/local_two_phase_testserver.h",
+      # "../browser/safe_browsing/safe_browsing_navigation_observer_unittest.cc",
+      # "../browser/safe_browsing/verdict_cache_manager_factory_unittest.cc",
+      # "../common/safe_browsing/binary_feature_extractor_unittest.cc",
+      # "../common/safe_browsing/download_type_util_unittest.cc",
+      # "../common/safe_browsing/ipc_protobuf_message_test_messages.h",
+      # "../common/safe_browsing/ipc_protobuf_message_unittest.cc",
     ]
     if (is_mac) {
       sources += [
-        "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_mac_unittest.cc",
-        "../browser/safe_browsing/signature_evaluator_mac_unittest.cc",
-        "../common/safe_browsing/binary_feature_extractor_mac_unittest.cc",
-        "../common/safe_browsing/disk_image_type_sniffer_mac_unittest.cc",
-        "../common/safe_browsing/mach_o_image_reader_mac_unittest.cc",
-        "../utility/safe_browsing/mac/dmg_analyzer_unittest.cc",
-        "../utility/safe_browsing/mac/dmg_test_utils.cc",
-        "../utility/safe_browsing/mac/dmg_test_utils.h",
-        "../utility/safe_browsing/mac/hfs_unittest.cc",
-        "../utility/safe_browsing/mac/read_stream_unittest.cc",
-        "../utility/safe_browsing/mac/udif_unittest.cc",
+        # "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_mac_unittest.cc",
+        # "../browser/safe_browsing/signature_evaluator_mac_unittest.cc",
+        # "../common/safe_browsing/binary_feature_extractor_mac_unittest.cc",
+        # "../common/safe_browsing/disk_image_type_sniffer_mac_unittest.cc",
+        # "../common/safe_browsing/mach_o_image_reader_mac_unittest.cc",
+        # "../utility/safe_browsing/mac/dmg_analyzer_unittest.cc",
+        # "../utility/safe_browsing/mac/dmg_test_utils.cc",
+        # "../utility/safe_browsing/mac/dmg_test_utils.h",
+        # "../utility/safe_browsing/mac/hfs_unittest.cc",
+        # "../utility/safe_browsing/mac/read_stream_unittest.cc",
+        # "../utility/safe_browsing/mac/udif_unittest.cc",
       ]
     }
     if (is_win) {
       sources += [
-        "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/environment_data_collection_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.cc",
-        "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.h",
-        "../browser/safe_browsing/incident_reporting/module_integrity_verifier_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/platform_state_store_win_unittest.cc",
-        "../common/safe_browsing/binary_feature_extractor_win_unittest.cc",
+        # "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_win_unittest.cc",
+        # "../browser/safe_browsing/incident_reporting/environment_data_collection_win_unittest.cc",
+        # "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.cc",
+        # "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.h",
+        # "../browser/safe_browsing/incident_reporting/module_integrity_verifier_win_unittest.cc",
+        # "../browser/safe_browsing/incident_reporting/platform_state_store_win_unittest.cc",
+        # "../common/safe_browsing/binary_feature_extractor_win_unittest.cc",
       ]
     }
     deps += [
       ":test_proto",
-      "../common/safe_browsing:mock_binary_feature_extractor",
       "//chrome/services/file_util/public/cpp:unit_tests",
-      "//components/safe_browsing/content/renderer:websocket_sb_handshake_throttle_unittest",
-      "//components/safe_browsing/content/triggers:ad_redirect_trigger",
-      "//components/safe_browsing/core:ping_manager_unittest",
-      "//components/safe_browsing/core/browser:safe_browsing_url_checker_unittest",
-      "//components/safe_browsing/core/browser/sync:unittests",
-      "//components/safe_browsing/core/db:v4_test_util",
+      # "//components/safe_browsing/content/renderer:websocket_sb_handshake_throttle_unittest",
+      # "//components/safe_browsing/content/triggers:ad_redirect_trigger",
+      # "//components/safe_browsing/core:ping_manager_unittest",
+      # "//components/safe_browsing/core/browser:safe_browsing_url_checker_unittest",
+      # "//components/safe_browsing/core/browser/sync:unittests",
+      # "//components/safe_browsing/core/db:v4_test_util",
     ]
   } else if (safe_browsing_mode == 2 && is_android) {
-    sources += [ "../browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc" ]
+    sources += [ 
+      #"../browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc" 
+    ]
   }
 
   if (is_linux || is_chromeos || is_mac || is_win) {
@@ -5988,8 +5983,8 @@ test("unit_tests") {
       "//ui/resources",
     ]
     data_deps += [
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_1",
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_2",
+      # "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_1",
+      # "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_2",
     ]
 
     libs = [
@@ -6221,7 +6216,9 @@ test("unit_tests") {
     ]
   }
   if (safe_browsing_mode == 1 && enable_extensions) {
-    sources += [ "../browser/extensions/blocklist_unittest.cc" ]
+    sources += [ 
+      #"../browser/extensions/blocklist_unittest.cc" 
+    ]
   }
 
   if (is_win || is_mac || (is_linux || is_chromeos_lacros)) {
@@ -6907,7 +6904,6 @@ test("chrome_app_unittests") {
     "//components/flags_ui:switches",
     "//components/gwp_asan/buildflags",
     "//components/heap_profiling/in_process",
-    "//components/safe_browsing:buildflags",
     "//pdf:pdf_ppapi",
   ]
   if (!is_fuchsia) {
diff --git a/components/BUILD.gn b/components/BUILD.gn
--- a/components/BUILD.gn
+++ b/components/BUILD.gn
@@ -27,6 +27,17 @@ if (is_ios) {
   import("//ios/build/config.gni")
 }
 
+import("//build/buildflag_header.gni")
+buildflag_header("buildflags") {
+  header = "buildflags.h"
+
+  flags = []
+  flags += [ "FULL_SAFE_BROWSING=0" ]
+  flags += [ "SAFE_BROWSING_AVAILABLE=0" ]
+  flags += [ "SAFE_BROWSING_DB_LOCAL=0" ]
+  flags += [ "SAFE_BROWSING_DB_REMOTE=0" ]
+}
+
 if (is_ios) {
   bundle_data("components_tests_pak_bundle_data") {
     public_deps = [
@@ -285,13 +296,6 @@ test("components_unittests") {
       "//components/policy/content:unit_tests",
       "//components/previews/content:unit_tests",
       "//components/query_tiles:unit_tests",
-      "//components/safe_browsing/content/password_protection:password_protection_unittest",
-      "//components/safe_browsing/content/triggers:unit_tests",
-      "//components/safe_browsing/content/web_ui:unit_tests",
-      "//components/safe_browsing/core/browser:token_fetcher_unit_tests",
-      "//components/safe_browsing/core/common:unit_tests",
-      "//components/safe_browsing/core/realtime:unit_tests",
-      "//components/safe_browsing/core/triggers:unit_tests",
       "//components/safety_check:unit_tests",
       "//components/security_interstitials/content:unit_tests",
       "//components/security_state/content:unit_tests",
diff --git a/components/blocked_content/BUILD.gn b/components/blocked_content/BUILD.gn
--- a/components/blocked_content/BUILD.gn
+++ b/components/blocked_content/BUILD.gn
@@ -30,8 +30,6 @@ source_set("blocked_content") {
     "//components/embedder_support",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/browser",
     "//components/ukm/content",
     "//components/user_prefs",
diff --git a/components/blocked_content/popup_blocker.cc b/components/blocked_content/popup_blocker.cc
--- a/components/blocked_content/popup_blocker.cc
+++ b/components/blocked_content/popup_blocker.cc
@@ -73,28 +73,6 @@ PopupBlockType ShouldBlockPopup(content::WebContents* web_contents,
   return PopupBlockType::kNotBlocked;
 }
 
-// Tries to get the opener from either the |params| or |open_url_params|,
-// otherwise uses the focused frame from |web_contents| as a proxy.
-content::RenderFrameHost* GetSourceFrameForPopup(
-    PopupNavigationDelegate* params,
-    const content::OpenURLParams* open_url_params,
-    content::WebContents* web_contents) {
-  if (params->GetOpener())
-    return params->GetOpener();
-  // Make sure the source render frame host is alive before we attempt to
-  // retrieve it from |open_url_params|.
-  if (open_url_params) {
-    content::RenderFrameHost* source = content::RenderFrameHost::FromID(
-        open_url_params->source_render_frame_id,
-        open_url_params->source_render_process_id);
-    if (source)
-      return source;
-  }
-  // The focused frame is not always the frame initiating the popup navigation
-  // and is used as a fallback in case opener information is not available.
-  return web_contents->GetFocusedFrame();
-}
-
 }  // namespace
 
 bool ConsiderForPopupBlocking(WindowOpenDisposition disposition) {
@@ -129,14 +107,8 @@ std::unique_ptr<PopupNavigationDelegate> MaybeBlockPopup(
 
   // AddBlockedPopup() takes ownership of the delegate, so grab the source frame
   // first.
-  content::RenderFrameHost* source_frame =
-      GetSourceFrameForPopup(delegate.get(), open_url_params, web_contents);
   popup_blocker->AddBlockedPopup(std::move(delegate), window_features,
                                  block_type);
-  auto* trigger = safe_browsing::AdPopupTrigger::FromWebContents(web_contents);
-  if (trigger) {
-    trigger->PopupWasBlocked(source_frame);
-  }
   return nullptr;
 }
 
diff --git a/components/permissions/permission_request_manager.cc b/components/permissions/permission_request_manager.cc
--- a/components/permissions/permission_request_manager.cc
+++ b/components/permissions/permission_request_manager.cc
@@ -68,6 +68,26 @@ constexpr char kAbusiveNotificationContentWarningMessage[] =
 
 namespace {
 
+class NotificationPermissionUiSelectorBasedOnPrefs
+    : public NotificationPermissionUiSelector {
+ public:
+  explicit NotificationPermissionUiSelectorBasedOnPrefs()
+      {}
+  ~NotificationPermissionUiSelectorBasedOnPrefs() override = default;
+
+  // NotificationPermissionUiSelector:
+  void SelectUiToUse(permissions::PermissionRequest* request,
+                     DecisionMadeCallback callback) override {
+    std::move(callback).Run(Decision::UseNormalUiAndShowNoWarning());
+  }
+
+ private:
+  NotificationPermissionUiSelectorBasedOnPrefs(
+      const NotificationPermissionUiSelectorBasedOnPrefs&) = delete;
+  const NotificationPermissionUiSelectorBasedOnPrefs& operator=(
+      NotificationPermissionUiSelectorBasedOnPrefs&) = delete;
+};
+
 bool IsMessageTextEqual(PermissionRequest* a, PermissionRequest* b) {
   if (a == b)
     return true;
@@ -451,10 +471,10 @@ PermissionRequestManager::PermissionRequestManager(
       view_(nullptr),
       tab_is_hidden_(web_contents->GetVisibility() ==
                      content::Visibility::HIDDEN),
-      auto_response_for_test_(NONE),
-      notification_permission_ui_selectors_(
-          PermissionsClient::Get()->CreateNotificationPermissionUiSelectors(
-              web_contents->GetBrowserContext())) {}
+      auto_response_for_test_(NONE) {
+  notification_permission_ui_selectors_.emplace_back(
+      std::make_unique<NotificationPermissionUiSelectorBasedOnPrefs>());
+}
 
 void PermissionRequestManager::ScheduleShowBubble() {
   base::RecordAction(base::UserMetricsAction("PermissionBubbleRequest"));
diff --git a/components/safe_browsing/buildflags.gni b/components/safe_browsing/buildflags.gni
--- a/components/safe_browsing/buildflags.gni
+++ b/components/safe_browsing/buildflags.gni
@@ -20,3 +20,5 @@ declare_args() {
     safe_browsing_mode = 1
   }
 }
+
+safe_browsing_mode = 0
diff --git a/components/safe_browsing/content/browser/BUILD.gn b/components/safe_browsing/content/browser/BUILD.gn
--- a/components/safe_browsing/content/browser/BUILD.gn
+++ b/components/safe_browsing/content/browser/BUILD.gn
@@ -4,6 +4,8 @@
 
 import("//build/config/features.gni")
 
+if(false) {
+
 source_set("browser") {
   sources = [
     "browser_url_loader_throttle.cc",
@@ -114,3 +116,5 @@ source_set("client_side_detection") {
     "//url:url",
   ]
 }
+
+}
\ No newline at end of file
diff --git a/components/safe_browsing/core/BUILD.gn b/components/safe_browsing/core/BUILD.gn
--- a/components/safe_browsing/core/BUILD.gn
+++ b/components/safe_browsing/core/BUILD.gn
@@ -46,6 +46,7 @@ proto_library("client_model_proto") {
   deps = [ ":csd_proto" ]
 }
 
+if(false) {
 static_library("ping_manager") {
   sources = [
     "ping_manager.cc",
@@ -181,3 +182,4 @@ if (!is_ios && !is_fuchsia) {
     ]
   }
 }
+}
diff --git a/components/safe_browsing/core/browser/BUILD.gn b/components/safe_browsing/core/browser/BUILD.gn
--- a/components/safe_browsing/core/browser/BUILD.gn
+++ b/components/safe_browsing/core/browser/BUILD.gn
@@ -1,6 +1,7 @@
 # Copyright 2017 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+this line is purposely to generate an error
 
 import("//build/config/features.gni")
 
diff --git a/components/safe_browsing/core/browser/sync/BUILD.gn b/components/safe_browsing/core/browser/sync/BUILD.gn
--- a/components/safe_browsing/core/browser/sync/BUILD.gn
+++ b/components/safe_browsing/core/browser/sync/BUILD.gn
@@ -1,6 +1,7 @@
 # Copyright 2021 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+this line is purposely to generate an error
 
 import("//build/config/features.gni")
 
diff --git a/components/safe_browsing/core/features.cc b/components/safe_browsing/core/features.cc
--- a/components/safe_browsing/core/features.cc
+++ b/components/safe_browsing/core/features.cc
@@ -124,7 +124,7 @@ const base::Feature kSafeBrowsingSectionUIAndroid{
     "SafeBrowsingSecuritySectionUIAndroid", base::FEATURE_ENABLED_BY_DEFAULT};
 
 const base::Feature kSuspiciousSiteTriggerQuotaFeature{
-    "SafeBrowsingSuspiciousSiteTriggerQuota", base::FEATURE_ENABLED_BY_DEFAULT};
+    "SafeBrowsingSuspiciousSiteTriggerQuota", base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kThreatDomDetailsTagAndAttributeFeature{
     "ThreatDomDetailsTagAttributes", base::FEATURE_DISABLED_BY_DEFAULT};
diff --git a/components/safe_browsing/core/file_type_policies.cc b/components/safe_browsing/core/file_type_policies.cc
--- a/components/safe_browsing/core/file_type_policies.cc
+++ b/components/safe_browsing/core/file_type_policies.cc
@@ -49,8 +49,7 @@ FileTypePolicies::~FileTypePolicies() {
 }
 
 std::string FileTypePolicies::ReadResourceBundle() {
-  ui::ResourceBundle& bundle = ui::ResourceBundle::GetSharedInstance();
-  return bundle.LoadDataResourceString(IDR_DOWNLOAD_FILE_TYPES_PB);
+  return nullptr;
 }
 
 void FileTypePolicies::RecordUpdateMetrics(UpdateResult result,
diff --git a/components/safe_browsing/core/realtime/BUILD.gn b/components/safe_browsing/core/realtime/BUILD.gn
--- a/components/safe_browsing/core/realtime/BUILD.gn
+++ b/components/safe_browsing/core/realtime/BUILD.gn
@@ -1,6 +1,7 @@
 # Copyright 2019 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+this line is purposely to generate an error
 
 static_library("policy_engine") {
   sources = [
diff --git a/components/safe_browsing/core/triggers/BUILD.gn b/components/safe_browsing/core/triggers/BUILD.gn
--- a/components/safe_browsing/core/triggers/BUILD.gn
+++ b/components/safe_browsing/core/triggers/BUILD.gn
@@ -1,6 +1,7 @@
 # Copyright 2017 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+this line is purposely to generate an error
 
 import("//build/config/features.gni")
 
diff --git a/components/security_interstitials/content/captive_portal_blocking_page.cc b/components/security_interstitials/content/captive_portal_blocking_page.cc
--- a/components/security_interstitials/content/captive_portal_blocking_page.cc
+++ b/components/security_interstitials/content/captive_portal_blocking_page.cc
@@ -191,14 +191,9 @@ void CaptivePortalBlockingPage::PopulateInterstitialStrings(
   load_time_data->SetString("recurrentErrorParagraph", "");
   load_time_data->SetBoolean("show_recurrent_error_paragraph", false);
 
-  if (cert_report_helper()) {
-    cert_report_helper()->PopulateExtendedReportingOption(load_time_data);
-    cert_report_helper()->PopulateEnhancedProtectionMessage(load_time_data);
-  } else {
     load_time_data->SetBoolean(security_interstitials::kDisplayCheckBox, false);
     load_time_data->SetBoolean(
         security_interstitials::kDisplayEnhancedProtectionMessage, false);
-  }
 }
 
 void CaptivePortalBlockingPage::CommandReceived(const std::string& command) {
@@ -213,8 +208,6 @@ void CaptivePortalBlockingPage::CommandReceived(const std::string& command) {
   security_interstitials::SecurityInterstitialCommand cmd =
       static_cast<security_interstitials::SecurityInterstitialCommand>(
           command_num);
-  cert_report_helper()->HandleReportingCommands(cmd,
-                                                controller()->GetPrefService());
   switch (cmd) {
     case security_interstitials::CMD_OPEN_LOGIN:
       captive_portal::CaptivePortalMetrics::LogCaptivePortalBlockingPageEvent(
diff --git a/components/security_interstitials/content/cert_report_helper.cc b/components/security_interstitials/content/cert_report_helper.cc
--- a/components/security_interstitials/content/cert_report_helper.cc
+++ b/components/security_interstitials/content/cert_report_helper.cc
@@ -174,8 +174,6 @@ void CertReportHelper::FinishCertCollection() {
     LOG(ERROR) << "Failed to serialize certificate report.";
     return;
   }
-
-  ssl_cert_reporter_->ReportInvalidCertificateChain(serialized_report);
 }
 
 bool CertReportHelper::ShouldShowCertificateReporterCheckbox() {
diff --git a/components/unified_consent/unified_consent_service.cc b/components/unified_consent/unified_consent_service.cc
--- a/components/unified_consent/unified_consent_service.cc
+++ b/components/unified_consent/unified_consent_service.cc
@@ -57,7 +57,7 @@ void UnifiedConsentService::SetUrlKeyedAnonymizedDataCollectionEnabled(
     SetMigrationState(MigrationState::kCompleted);
 
   pref_service_->SetBoolean(prefs::kUrlKeyedAnonymizedDataCollectionEnabled,
-                            enabled);
+                            false);
 }
 
 void UnifiedConsentService::Shutdown() {
diff --git a/content/browser/file_system_access/native_file_system_file_writer_impl.cc b/content/browser/file_system_access/native_file_system_file_writer_impl.cc
--- a/content/browser/file_system_access/native_file_system_file_writer_impl.cc
+++ b/content/browser/file_system_access/native_file_system_file_writer_impl.cc
@@ -152,7 +152,6 @@ NativeFileSystemFileWriterImpl::NativeFileSystemFileWriterImpl(
       swap_url_(swap_url),
       quarantine_connection_callback_(
           std::move(quarantine_connection_callback)),
-      has_transient_user_activation_(has_transient_user_activation),
       auto_close_(auto_close) {
   DCHECK_EQ(swap_url.type(), url.type());
   receiver_.set_disconnect_handler(base::BindOnce(
@@ -512,16 +511,8 @@ void NativeFileSystemFileWriterImpl::CloseImpl(CloseCallback callback) {
   }
 
   close_callback_ = std::move(callback);
-
-  if (!RequireSecurityChecks() || !manager()->permission_context()) {
-    DidAfterWriteCheck(
+  DidAfterWriteCheck(
         FileSystemAccessPermissionContext::AfterWriteCheckResult::kAllow);
-    return;
-  }
-
-  ComputeHashForSwapFile(
-      base::BindOnce(&NativeFileSystemFileWriterImpl::DoAfterWriteCheck,
-                     weak_factory_.GetWeakPtr()));
 }
 
 void NativeFileSystemFileWriterImpl::AbortImpl(AbortCallback callback) {
@@ -541,37 +532,6 @@ void NativeFileSystemFileWriterImpl::AbortImpl(AbortCallback callback) {
   manager()->RemoveFileWriter(this);
 }
 
-// static
-void NativeFileSystemFileWriterImpl::DoAfterWriteCheck(
-    base::File::Error hash_result,
-    const std::string& hash,
-    int64_t size) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-
-  if (hash_result != base::File::FILE_OK) {
-    // Calculating the hash failed try deleting the swap file and invoke the
-    // callback.
-    manager()->operation_runner().PostTaskWithThisObject(
-        FROM_HERE, base::BindOnce(&RemoveSwapFile, swap_url()));
-    CallCloseCallbackAndDeleteThis(native_file_system_error::FromStatus(
-        FileSystemAccessStatus::kOperationAborted,
-        "Failed to perform Safe Browsing check."));
-    return;
-  }
-
-  auto item = std::make_unique<FileSystemAccessWriteItem>();
-  item->target_file_path = url().path();
-  item->full_path = swap_url().path();
-  item->sha256_hash = hash;
-  item->size = size;
-  item->frame_url = context().url;
-  item->has_user_gesture = has_transient_user_activation_;
-  manager()->permission_context()->PerformAfterWriteChecks(
-      std::move(item), context().frame_id,
-      base::BindOnce(&NativeFileSystemFileWriterImpl::DidAfterWriteCheck,
-                     weak_factory_.GetWeakPtr()));
-}
-
 void NativeFileSystemFileWriterImpl::DidAfterWriteCheck(
     FileSystemAccessPermissionContext::AfterWriteCheckResult result) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
diff --git a/content/browser/file_system_access/native_file_system_file_writer_impl.h b/content/browser/file_system_access/native_file_system_file_writer_impl.h
--- a/content/browser/file_system_access/native_file_system_file_writer_impl.h
+++ b/content/browser/file_system_access/native_file_system_file_writer_impl.h
@@ -106,9 +106,6 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
   void TruncateImpl(uint64_t length, TruncateCallback callback);
   void CloseImpl(CloseCallback callback);
   void AbortImpl(AbortCallback callback);
-  void DoAfterWriteCheck(base::File::Error hash_result,
-                         const std::string& hash,
-                         int64_t size);
   void DidAfterWriteCheck(
       FileSystemAccessPermissionContext::AfterWriteCheckResult result);
   void DidSwapFileSkipQuarantine(base::File::Error result);
@@ -125,7 +122,7 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
   // except temporary file systems.
   // TOOD(crbug.com/1103076): Extend this check to non-native paths.
   bool RequireSecurityChecks() const {
-    return url().type() != storage::kFileSystemTypeTemporary;
+    return false;
   }
 
   void ComputeHashForSwapFile(HashCallback callback);
@@ -141,10 +138,6 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
 
   download::QuarantineConnectionCallback quarantine_connection_callback_;
 
-  // Keeps track of user activation state at creation time for after write
-  // checks.
-  bool has_transient_user_activation_ = false;
-
   // Changes will be written to the target file even if the stream isn't
   // explicitly closed.
   bool auto_close_ = false;
diff --git a/ios/chrome/test/BUILD.gn b/ios/chrome/test/BUILD.gn
--- a/ios/chrome/test/BUILD.gn
+++ b/ios/chrome/test/BUILD.gn
@@ -56,7 +56,7 @@ source_set("test_support") {
     "//ios/chrome/browser/content_settings",
     "//ios/chrome/browser/policy:policy",
     "//ios/chrome/browser/prefs:browser_prefs",
-    "//ios/chrome/browser/safe_browsing:test_support",
+    #"//ios/chrome/browser/safe_browsing:test_support",
     "//ios/chrome/browser/ui/util",
     "//ios/chrome/browser/ui/util:multiwindow_util",
     "//ios/components/webui:url_constants",
@@ -213,7 +213,7 @@ test("ios_chrome_unittests") {
     "//ios/chrome/browser/policy:unit_tests",
     "//ios/chrome/browser/prerender:unit_tests",
     "//ios/chrome/browser/reading_list:unit_tests",
-    "//ios/chrome/browser/safe_browsing:unit_tests",
+    #"//ios/chrome/browser/safe_browsing:unit_tests",
     "//ios/chrome/browser/safe_mode:unit_tests",
     "//ios/chrome/browser/screenshot:unit_tests",
     "//ios/chrome/browser/search_engines:unit_tests",
diff --git a/ios/chrome/test/earl_grey2/BUILD.gn b/ios/chrome/test/earl_grey2/BUILD.gn
--- a/ios/chrome/test/earl_grey2/BUILD.gn
+++ b/ios/chrome/test/earl_grey2/BUILD.gn
@@ -83,7 +83,7 @@ chrome_ios_eg2_test("ios_chrome_integration_eg2tests_module") {
     "//ios/chrome/browser/policy:eg2_tests",
     "//ios/chrome/browser/policy_url_blocking:eg2_tests",
     "//ios/chrome/browser/prerender:eg2_tests",
-    "//ios/chrome/browser/safe_browsing:eg2_tests",
+    #"//ios/chrome/browser/safe_browsing:eg2_tests",
     "//ios/chrome/browser/ui/autofill:eg2_tests",
     "//ios/chrome/browser/ui/autofill/manual_fill:eg2_tests",
     "//ios/chrome/browser/ui/content_suggestions:eg2_tests",
diff --git a/weblayer/BUILD.gn b/weblayer/BUILD.gn
--- a/weblayer/BUILD.gn
+++ b/weblayer/BUILD.gn
@@ -417,12 +417,6 @@ source_set("weblayer_lib_base") {
     "//components/policy/core/browser",
     "//components/pref_registry:pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/content/browser:client_side_detection",
-    "//components/safe_browsing/content/common:interfaces",
-    "//components/safe_browsing/content/renderer:throttles",
-    "//components/safe_browsing/content/renderer/phishing_classifier",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/db:database_manager",
     "//components/security_interstitials/content:security_interstitial_page",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
     "//components/security_interstitials/core",
@@ -653,23 +647,6 @@ source_set("weblayer_lib_base") {
       "//components/payments/content/android",
       "//components/permissions/android:native",
       "//components/resources:android_resources",
-      "//components/safe_browsing/android:remote_database_manager",
-      "//components/safe_browsing/android:safe_browsing_api_handler",
-      "//components/safe_browsing/content",
-      "//components/safe_browsing/content/browser",
-      "//components/safe_browsing/content/browser:client_side_model_loader",
-      "//components/safe_browsing/core:client_model_proto",
-      "//components/safe_browsing/core:csd_proto",
-      "//components/safe_browsing/core:ping_manager",
-      "//components/safe_browsing/core:verdict_cache_manager",
-      "//components/safe_browsing/core/browser",
-      "//components/safe_browsing/core/browser:network_context",
-      "//components/safe_browsing/core/browser:token_fetcher",
-      "//components/safe_browsing/core/common",
-      "//components/safe_browsing/core/db:allowlist_checker_client",
-      "//components/safe_browsing/core/db:database_manager",
-      "//components/safe_browsing/core/realtime:policy_engine",
-      "//components/safe_browsing/core/realtime:url_lookup_service",
       "//components/security_interstitials/content:security_interstitial_page",
       "//components/security_interstitials/core:unsafe_resource",
       "//components/security_interstitials/core/",
diff --git a/weblayer/test/BUILD.gn b/weblayer/test/BUILD.gn
--- a/weblayer/test/BUILD.gn
+++ b/weblayer/test/BUILD.gn
@@ -219,15 +219,6 @@ test("weblayer_browsertests") {
       "//components/metrics",
       "//components/page_info",
       "//components/page_info/android",
-      "//components/safe_browsing/android:safe_browsing_api_handler",
-      "//components/safe_browsing/content",
-      "//components/safe_browsing/content/browser:client_side_detection",
-      "//components/safe_browsing/content/browser:client_side_model_loader",
-      "//components/safe_browsing/content/common:interfaces",
-      "//components/safe_browsing/core:client_model_proto",
-      "//components/safe_browsing/core:features",
-      "//components/safe_browsing/core/browser:token_fetcher",
-      "//components/safe_browsing/core/common",
       "//components/viz/service:service_java",
       "//content/public/test/android:android_test_message_pump_support_java",
       "//content/test:android_test_message_pump_support",
-- 
2.17.1

