From: Zoraver Kang <Zoraver@users.noreply.github.com>
Date: Fri, 22 May 2020 22:43:27 -0400
Subject: Allow building without enable_reporting

---
 content/browser/BUILD.gn                       |  8 ++++----
 .../devtools/protocol/network_handler.cc       |  2 ++
 .../devtools/protocol/network_handler.h        |  2 ++
 .../cross_origin_embedder_policy_reporter.cc   |  2 ++
 .../net/cross_origin_opener_policy_reporter.cc | 10 ++++++++++
 .../renderer_host/render_frame_host_impl.cc    |  2 ++
 .../web_package/signed_exchange_reporter.cc    |  2 ++
 ...ntent_switch_dependent_feature_overrides.cc |  3 +++
 net/reporting/reporting_service.cc             |  6 ++++++
 services/network/network_context.cc            | 18 +-----------------
 services/network/network_context.h             | 11 -----------
 services/network/public/mojom/BUILD.gn         |  3 +++
 .../network/public/mojom/network_context.mojom |  2 ++
 .../blink/renderer/core/frame/local_frame.cc   |  3 +++
 .../blink/renderer/core/frame/local_frame.h    |  6 +++---
 .../renderer/core/frame/reporting_context.cc   |  9 +++++++++
 .../renderer/core/frame/reporting_context.h    |  7 +++++--
 17 files changed, 59 insertions(+), 37 deletions(-)

diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -1251,6 +1251,10 @@ source_set("browser") {
     "net/browser_online_state_observer.cc",
     "net/browser_online_state_observer.h",
     "net/cookie_store_factory.cc",
+    "net/cross_origin_embedder_policy_reporter.cc",
+    "net/cross_origin_embedder_policy_reporter.h",
+    "net/cross_origin_opener_policy_reporter.cc",
+    "net/cross_origin_opener_policy_reporter.h",
     "net/network_errors_listing_ui.cc",
     "net/network_errors_listing_ui.h",
     "net/network_quality_observer_impl.cc",
@@ -3009,10 +3013,6 @@ source_set("browser") {
 
   if (enable_reporting) {
     sources += [
-      "net/cross_origin_embedder_policy_reporter.cc",
-      "net/cross_origin_embedder_policy_reporter.h",
-      "net/cross_origin_opener_policy_reporter.cc",
-      "net/cross_origin_opener_policy_reporter.h",
       "net/reporting_service_proxy.cc",
       "net/reporting_service_proxy.h",
     ]
diff --git a/content/browser/devtools/protocol/network_handler.cc b/content/browser/devtools/protocol/network_handler.cc
--- a/content/browser/devtools/protocol/network_handler.cc
+++ b/content/browser/devtools/protocol/network_handler.cc
@@ -451,6 +451,7 @@ std::vector<GURL> ComputeCookieURLs(RenderFrameHostImpl* frame_host,
   return urls;
 }
 
+#if BUILDFLAG(ENABLE_REPORTING)
 std::vector<GURL> ComputeReportingURLs(RenderFrameHostImpl* frame_host) {
   std::vector<GURL> urls;
   base::queue<FrameTreeNode*> queue;
@@ -468,6 +469,7 @@ std::vector<GURL> ComputeReportingURLs(RenderFrameHostImpl* frame_host) {
   }
   return urls;
 }
+#endif  // BUILDFLAG(ENABLE_REPORTING)
 
 String resourcePriority(net::RequestPriority priority) {
   switch (priority) {
diff --git a/content/browser/devtools/protocol/network_handler.h b/content/browser/devtools/protocol/network_handler.h
--- a/content/browser/devtools/protocol/network_handler.h
+++ b/content/browser/devtools/protocol/network_handler.h
@@ -304,8 +304,10 @@ class NetworkHandler : public DevToolsDomainHandler,
       Response response,
       mojo::ScopedDataPipeConsumerHandle pipe,
       const std::string& mime_type);
+#if BUILDFLAG(ENABLE_REPORTING)
   std::unique_ptr<protocol::Network::ReportingApiReport> BuildProtocolReport(
       const net::ReportingReport& report);
+#endif  // BUILDFLAG(ENABLE_REPORTING)
 
   // TODO(dgozman): Remove this.
   const std::string host_id_;
diff --git a/content/browser/net/cross_origin_embedder_policy_reporter.cc b/content/browser/net/cross_origin_embedder_policy_reporter.cc
--- a/content/browser/net/cross_origin_embedder_policy_reporter.cc
+++ b/content/browser/net/cross_origin_embedder_policy_reporter.cc
@@ -107,6 +107,7 @@ void CrossOriginEmbedderPolicyReporter::QueueAndNotify(
         kType, context_url_, blink::mojom::ReportBody::New(std::move(list))));
   }
   if (endpoint) {
+#if BUILDFLAG(ENABLE_REPORTING)
     base::DictionaryValue body_to_pass;
     for (const auto& pair : body) {
       body_to_pass.SetString(pair.first, pair.second);
@@ -117,6 +118,7 @@ void CrossOriginEmbedderPolicyReporter::QueueAndNotify(
         kType, *endpoint, context_url_, reporting_source_,
         network_isolation_key_,
         /*user_agent=*/absl::nullopt, std::move(body_to_pass));
+#endif
   }
 }
 
diff --git a/content/browser/net/cross_origin_opener_policy_reporter.cc b/content/browser/net/cross_origin_opener_policy_reporter.cc
--- a/content/browser/net/cross_origin_opener_policy_reporter.cc
+++ b/content/browser/net/cross_origin_opener_policy_reporter.cc
@@ -16,11 +16,14 @@
 #include "services/network/public/mojom/network_context.mojom.h"
 #include "services/network/public/mojom/source_location.mojom.h"
 #include "url/origin.h"
+#include "build/build_config.h"
 
 namespace content {
 
 namespace {
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunused-const-variable"
 // Report attribute names (camelCase):
 constexpr char kColumnNumber[] = "columnNumber";
 constexpr char kDisposition[] = "disposition";
@@ -42,7 +45,9 @@ constexpr char kDispositionEnforce[] = "enforce";
 constexpr char kDispositionReporting[] = "reporting";
 constexpr char kTypeFromResponse[] = "navigation-from-response";
 constexpr char kTypeToResponse[] = "navigation-to-response";
+#pragma GCC diagnostic pop
 
+#if BUILDFLAG(ENABLE_REPORTING)
 std::string ToString(network::mojom::CrossOriginOpenerPolicyValue coop_value) {
   switch (coop_value) {
     case network::mojom::CrossOriginOpenerPolicyValue::kUnsafeNone:
@@ -55,6 +60,7 @@ std::string ToString(network::mojom::CrossOriginOpenerPolicyValue coop_value) {
       return "same-origin-plus-coep";
   }
 }
+#endif
 
 FrameTreeNode* TopLevelOpener(FrameTreeNode* frame) {
   FrameTreeNode* opener = frame->original_opener();
@@ -225,6 +231,7 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
     network::mojom::SourceLocationPtr source_location,
     const std::string& reported_window_url,
     const std::string& initial_popup_url) const {
+#if BUILDFLAG(ENABLE_REPORTING)
   // Cross-Origin-Opener-Policy-Report-Only is not required to provide
   // endpoints.
   if (!coop_.report_only_reporting_endpoint)
@@ -273,12 +280,14 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, context_url_, reporting_source_, network_isolation_key_,
       absl::nullopt, std::move(body));
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
     base::DictionaryValue body,
     const std::string& endpoint,
     bool is_report_only) {
+#if BUILDFLAG(ENABLE_REPORTING)
   body.SetString(kDisposition,
                  is_report_only ? kDispositionReporting : kDispositionEnforce);
   body.SetString(
@@ -287,6 +296,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, context_url_, reporting_source_, network_isolation_key_,
       /*user_agent=*/absl::nullopt, std::move(body));
+#endif
 }
 
 }  // namespace content
diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -10653,6 +10653,7 @@ void RenderFrameHostImpl::OnSameDocumentCommitProcessed(
 void RenderFrameHostImpl::MaybeGenerateCrashReport(
     base::TerminationStatus status,
     int exit_code) {
+#if BUILDFLAG(ENABLE_REPORTING)
   if (!last_committed_url_.SchemeIsHTTPOrHTTPS())
     return;
 
@@ -10702,6 +10703,7 @@ void RenderFrameHostImpl::MaybeGenerateCrashReport(
       /*type=*/"crash", /*group=*/"default", last_committed_url_,
       GetReportingSource(), isolation_info_.network_isolation_key(),
       absl::nullopt /* user_agent */, std::move(body));
+#endif
 }
 
 void RenderFrameHostImpl::SendCommitNavigation(
diff --git a/content/browser/web_package/signed_exchange_reporter.cc b/content/browser/web_package/signed_exchange_reporter.cc
--- a/content/browser/web_package/signed_exchange_reporter.cc
+++ b/content/browser/web_package/signed_exchange_reporter.cc
@@ -120,6 +120,7 @@ bool ShouldDowngradeReport(const char* result_string,
 void ReportResult(int frame_tree_node_id,
                   network::mojom::SignedExchangeReportPtr report,
                   const net::NetworkIsolationKey& network_isolation_key) {
+#if BUILDFLAG(ENABLE_REPORTING)
   FrameTreeNode* frame_tree_node =
       FrameTreeNode::GloballyFindByID(frame_tree_node_id);
   if (!frame_tree_node)
@@ -134,6 +135,7 @@ void ReportResult(int frame_tree_node_id,
   DCHECK(partition);
   partition->GetNetworkContext()->QueueSignedExchangeReport(
       std::move(report), network_isolation_key);
+#endif
 }
 
 }  // namespace
diff --git a/content/public/common/content_switch_dependent_feature_overrides.cc b/content/public/common/content_switch_dependent_feature_overrides.cc
--- a/content/public/common/content_switch_dependent_feature_overrides.cc
+++ b/content/public/common/content_switch_dependent_feature_overrides.cc
@@ -7,6 +7,7 @@
 #include "content/public/common/content_features.h"
 #include "content/public/common/content_switches.h"
 #include "net/base/features.h"
+#include "net/net_buildflags.h"
 #include "services/network/public/cpp/features.h"
 #include "services/network/public/cpp/network_switches.h"
 #include "third_party/blink/public/common/features.h"
@@ -40,9 +41,11 @@ GetSwitchDependentFeatureOverrides(const base::CommandLine& command_line) {
       {switches::kEnableExperimentalWebPlatformFeatures,
        std::cref(features::kDocumentPolicyNegotiation),
        base::FeatureList::OVERRIDE_ENABLE_FEATURE},
+#if BUILDFLAG(ENABLE_REPORTING)
       {switches::kEnableExperimentalWebPlatformFeatures,
        std::cref(net::features::kDocumentReporting),
        base::FeatureList::OVERRIDE_ENABLE_FEATURE},
+#endif
       {switches::kEnableExperimentalWebPlatformFeatures,
        std::cref(features::kExperimentalContentSecurityPolicyFeatures),
        base::FeatureList::OVERRIDE_ENABLE_FEATURE},
diff --git a/net/reporting/reporting_service.cc b/net/reporting/reporting_service.cc
--- a/net/reporting/reporting_service.cc
+++ b/net/reporting/reporting_service.cc
@@ -202,6 +202,12 @@ class ReportingServiceImpl : public ReportingService {
       std::unique_ptr<const base::Value> body,
       int depth,
       base::TimeTicks queued_ticks) {
+#if BUILDFLAG(ENABLE_REPORTING)
+    if ((true))
+      return;
+#else
+    Build Error!
+#endif
     DCHECK(initialized_);
     context_->cache()->AddReport(
         reporting_source, network_isolation_key, sanitized_url, user_agent,
diff --git a/services/network/network_context.cc b/services/network/network_context.cc
--- a/services/network/network_context.cc
+++ b/services/network/network_context.cc
@@ -1118,25 +1118,9 @@ void NetworkContext::SetDocumentReportingEndpoints(
 
 void NetworkContext::SendReportsAndRemoveSource(
     const base::UnguessableToken& reporting_source) {
-  NOTREACHED();
+  // NOTREACHED(); removed for build in debug
 }
 
-void NetworkContext::QueueReport(
-    const std::string& type,
-    const std::string& group,
-    const GURL& url,
-    const absl::optional<base::UnguessableToken>& reporting_source,
-    const net::NetworkIsolationKey& network_isolation_key,
-    const absl::optional<std::string>& user_agent,
-    base::Value body) {
-  NOTREACHED();
-}
-
-void NetworkContext::QueueSignedExchangeReport(
-    mojom::SignedExchangeReportPtr report,
-    const net::NetworkIsolationKey& network_isolation_key) {
-  NOTREACHED();
-}
 #endif  // BUILDFLAG(ENABLE_REPORTING)
 
 void NetworkContext::ClearDomainReliability(
diff --git a/services/network/network_context.h b/services/network/network_context.h
--- a/services/network/network_context.h
+++ b/services/network/network_context.h
@@ -415,17 +415,6 @@ class COMPONENT_EXPORT(NETWORK_SERVICE) NetworkContext
       const base::flat_map<std::string, std::string>& endpoints) override;
   void SendReportsAndRemoveSource(
       const base::UnguessableToken& reporting_source) override;
-  void QueueReport(
-      const std::string& type,
-      const std::string& group,
-      const GURL& url,
-      const absl::optional<base::UnguessableToken>& reporting_source,
-      const net::NetworkIsolationKey& network_isolation_key,
-      const absl::optional<std::string>& user_agent,
-      base::Value body) override;
-  void QueueSignedExchangeReport(
-      mojom::SignedExchangeReportPtr report,
-      const net::NetworkIsolationKey& network_isolation_key) override;
   void AddDomainReliabilityContextForTesting(
       const GURL& origin,
       const GURL& upload_url,
diff --git a/services/network/public/mojom/BUILD.gn b/services/network/public/mojom/BUILD.gn
--- a/services/network/public/mojom/BUILD.gn
+++ b/services/network/public/mojom/BUILD.gn
@@ -888,6 +888,9 @@ mojom("mojom") {
     export_class_attribute_blink = "BLINK_PLATFORM_EXPORT"
     export_define_blink = "BLINK_PLATFORM_IMPLEMENTATION=1"
     export_header_blink = "third_party/blink/public/platform/web_common.h"
+  }
+
+  if (enable_reporting) {
     enabled_features += [ "enable_reporting" ]
   }
 
diff --git a/services/network/public/mojom/network_context.mojom b/services/network/public/mojom/network_context.mojom
--- a/services/network/public/mojom/network_context.mojom
+++ b/services/network/public/mojom/network_context.mojom
@@ -972,6 +972,7 @@ interface NetworkContext {
   // provided |network_isolation_key|.
   //
   // Spec: https://w3c.github.io/reporting/#concept-reports
+  [EnableIf=enable_reporting]
   QueueReport(string type,
               string group,
               url.mojom.Url url,
@@ -985,6 +986,7 @@ interface NetworkContext {
   // Note that this queued report will never be delivered if no reporting
   // endpoint matching is registered for with the provided
   // |network_isolation_key|.
+  [EnableIf=enable_reporting]
   QueueSignedExchangeReport(SignedExchangeReport report,
                             NetworkIsolationKey network_isolation_key);
 
diff --git a/third_party/blink/renderer/core/frame/local_frame.cc b/third_party/blink/renderer/core/frame/local_frame.cc
--- a/third_party/blink/renderer/core/frame/local_frame.cc
+++ b/third_party/blink/renderer/core/frame/local_frame.cc
@@ -39,6 +39,7 @@
 #include "base/values.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "mojo/public/cpp/system/message_pipe.h"
+#include "net/net_buildflags.h"
 #include "services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-blink.h"
 #include "services/network/public/cpp/features.h"
 #include "services/network/public/mojom/content_security_policy.mojom-blink.h"
@@ -2282,9 +2283,11 @@ const base::UnguessableToken& LocalFrame::GetAgentClusterId() const {
   return base::UnguessableToken::Null();
 }
 
+#if BUILDFLAG(ENABLE_REPORTING)
 mojom::blink::ReportingServiceProxy* LocalFrame::GetReportingService() {
   return mojo_handler_->ReportingService();
 }
+#endif
 
 // static
 void LocalFrame::NotifyUserActivation(
diff --git a/third_party/blink/renderer/core/frame/local_frame.h b/third_party/blink/renderer/core/frame/local_frame.h
--- a/third_party/blink/renderer/core/frame/local_frame.h
+++ b/third_party/blink/renderer/core/frame/local_frame.h
@@ -34,9 +34,9 @@
 #include "base/gtest_prod_util.h"
 #include "base/time/default_tick_clock.h"
 #include "base/unguessable_token.h"
-#include "build/build_config.h"
 #include "mojo/public/cpp/bindings/pending_associated_receiver.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
+#include "net/net_buildflags.h"
 #include "services/device/public/mojom/device_posture_provider.mojom-blink-forward.h"
 #include "services/network/public/mojom/fetch_api.mojom-blink-forward.h"
 #include "third_party/blink/public/common/frame/frame_ad_evidence.h"
@@ -544,9 +544,9 @@ class CORE_EXPORT LocalFrame final : public Frame,
   }
 
   SmoothScrollSequencer& GetSmoothScrollSequencer();
-
+#if BUILDFLAG(ENABLE_REPORTING)
   mojom::blink::ReportingServiceProxy* GetReportingService();
-
+#endif
   // Returns the frame host ptr. The interface returned is backed by an
   // associated interface with the legacy Chrome IPC channel.
   mojom::blink::LocalFrameHost& GetLocalFrameHostRemote() const;
diff --git a/third_party/blink/renderer/core/frame/reporting_context.cc b/third_party/blink/renderer/core/frame/reporting_context.cc
--- a/third_party/blink/renderer/core/frame/reporting_context.cc
+++ b/third_party/blink/renderer/core/frame/reporting_context.cc
@@ -4,6 +4,7 @@
 
 #include "third_party/blink/renderer/core/frame/reporting_context.h"
 
+#include "net/net_buildflags.h"
 #include "third_party/blink/public/common/browser_interface_broker_proxy.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/task_type.h"
@@ -54,7 +55,9 @@ const char ReportingContext::kSupplementName[] = "ReportingContext";
 ReportingContext::ReportingContext(ExecutionContext& context)
     : Supplement<ExecutionContext>(context),
       execution_context_(context),
+#if BUILDFLAG(ENABLE_REPORTING)
       reporting_service_(&context),
+#endif
       receiver_(this, &context) {}
 
 // static
@@ -118,7 +121,9 @@ void ReportingContext::Trace(Visitor* visitor) const {
   visitor->Trace(observers_);
   visitor->Trace(report_buffer_);
   visitor->Trace(execution_context_);
+#if BUILDFLAG(ENABLE_REPORTING)
   visitor->Trace(reporting_service_);
+#endif
   visitor->Trace(receiver_);
   Supplement<ExecutionContext>::Trace(visitor);
 }
@@ -140,6 +145,7 @@ void ReportingContext::CountReport(Report* report) {
   UseCounter::Count(execution_context_, feature);
 }
 
+#if BUILDFLAG(ENABLE_REPORTING)
 const HeapMojoRemote<mojom::blink::ReportingServiceProxy>&
 ReportingContext::GetReportingService() const {
   if (!reporting_service_.is_bound()) {
@@ -149,6 +155,7 @@ ReportingContext::GetReportingService() const {
   }
   return reporting_service_;
 }
+#endif
 
 void ReportingContext::NotifyInternal(Report* report) {
   // Buffer the report.
@@ -171,6 +178,7 @@ void ReportingContext::NotifyInternal(Report* report) {
 
 void ReportingContext::SendToReportingAPI(Report* report,
                                           const String& endpoint) const {
+#if BUILDFLAG(ENABLE_REPORTING)
   const String& type = report->type();
   if (!(type == ReportType::kCSPViolation || type == ReportType::kDeprecation ||
         type == ReportType::kPermissionsPolicyViolation ||
@@ -226,6 +234,7 @@ void ReportingContext::SendToReportingAPI(Report* report,
         url, endpoint, body->featureId(), body->disposition(), body->message(),
         body->sourceFile(), line_number, column_number);
   }
+#endif
 }
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/frame/reporting_context.h b/third_party/blink/renderer/core/frame/reporting_context.h
--- a/third_party/blink/renderer/core/frame/reporting_context.h
+++ b/third_party/blink/renderer/core/frame/reporting_context.h
@@ -5,6 +5,7 @@
 #ifndef THIRD_PARTY_BLINK_RENDERER_CORE_FRAME_REPORTING_CONTEXT_H_
 #define THIRD_PARTY_BLINK_RENDERER_CORE_FRAME_REPORTING_CONTEXT_H_
 
+#include "net/net_buildflags.h"
 #include "third_party/blink/public/mojom/frame/reporting_observer.mojom-blink.h"
 #include "third_party/blink/public/mojom/reporting/reporting.mojom-blink.h"
 #include "third_party/blink/renderer/core/core_export.h"
@@ -53,10 +54,10 @@ class CORE_EXPORT ReportingContext : public GarbageCollected<ReportingContext>,
  private:
   // Counts the use of a report type via UseCounter.
   void CountReport(Report*);
-
+#if BUILDFLAG(ENABLE_REPORTING)
   const HeapMojoRemote<mojom::blink::ReportingServiceProxy>&
   GetReportingService() const;
-
+#endif
   void NotifyInternal(Report* report);
   // Send |report| via the Reporting API to |endpoint|.
   void SendToReportingAPI(Report* report, const String& endpoint) const;
@@ -67,8 +68,10 @@ class CORE_EXPORT ReportingContext : public GarbageCollected<ReportingContext>,
 
   // This is declared mutable so that the service endpoint can be cached by
   // const methods.
+#if BUILDFLAG(ENABLE_REPORTING)
   mutable HeapMojoRemote<mojom::blink::ReportingServiceProxy>
       reporting_service_;
+#endif
 
   HeapMojoReceiver<mojom::blink::ReportingObserver, ReportingContext> receiver_;
 };
-- 
2.20.1

