From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Thu, 5 Dec 2019 22:41:25 +0100
Subject: Add option to configure the ad blocker filters URL

---
 chrome/android/chrome_java_resources.gni      |   2 +
 chrome/android/chrome_java_sources.gni        |   2 +
 .../java/res/layout/adblock_editor.xml        |  67 +++++
 chrome/android/java/res/values/values.xml     |   2 +
 .../java/res/xml/adblock_preferences.xml      |  25 ++
 .../android/java/res/xml/main_preferences.xml |   5 +
 .../browser/settings/AdBlockEditor.java       |  92 +++++++
 .../browser/settings/AdBlockPreferences.java  |  61 +++++
 chrome/app/generated_resources.grd            |  10 +
 chrome/browser/browser_process_impl.cc        |   3 +-
 .../flags/android/cached_feature_flags.cc     |  11 +
 .../browser/flags/CachedFeatureFlags.java     |  10 +
 .../net/system_network_context_manager.cc     |   4 +
 .../strings/android_chrome_strings.grd        |  14 +
 chrome/common/pref_names.cc                   |   3 +
 chrome/common/pref_names.h                    |   1 +
 .../adblock_updater_service.cc                | 249 ++++++++++++++++++
 .../adblock_updater_service.h                 | 100 +++++++
 .../download_filters_task.cc                  | 222 ++++++++++++++++
 .../component_updater/download_filters_task.h | 129 +++++++++
 20 files changed, 1011 insertions(+), 1 deletion(-)
 create mode 100644 chrome/android/java/res/layout/adblock_editor.xml
 create mode 100644 chrome/android/java/res/xml/adblock_preferences.xml
 create mode 100644 chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockEditor.java
 create mode 100644 chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockPreferences.java
 create mode 100644 components/component_updater/adblock_updater_service.cc
 create mode 100644 components/component_updater/adblock_updater_service.h
 create mode 100644 components/component_updater/download_filters_task.cc
 create mode 100644 components/component_updater/download_filters_task.h

diff --git a/chrome/android/chrome_java_resources.gni b/chrome/android/chrome_java_resources.gni
--- a/chrome/android/chrome_java_resources.gni
+++ b/chrome/android/chrome_java_resources.gni
@@ -786,6 +786,7 @@ chrome_java_resources = [
   "java/res/layout/account_picker_new_account_row_legacy.xml",
   "java/res/layout/account_picker_row.xml",
   "java/res/layout/account_picker_row_legacy.xml",
+  "java/res/layout/adblock_editor.xml",
   "java/res/layout/add_languages_main.xml",
   "java/res/layout/add_to_homescreen_dialog.xml",
   "java/res/layout/auto_sign_in_first_run_dialog.xml",
@@ -1044,6 +1045,7 @@ chrome_java_resources = [
   "java/res/xml/about_chrome_preferences.xml",
   "java/res/xml/accessibility_preferences.xml",
   "java/res/xml/account_management_preferences.xml",
+  "java/res/xml/adblock_preferences.xml",
   "java/res/xml/autofill_server_profile_preferences.xml",
   "java/res/xml/bookmark_widget_info.xml",
   "java/res/xml/clear_browsing_data_preferences_tab.xml",
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -1306,6 +1306,8 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/payments/ui/ShoppingCart.java",
   "java/src/org/chromium/chrome/browser/permissions/PermissionSettingsBridge.java",
   "java/src/org/chromium/chrome/browser/photo_picker/DecoderService.java",
+  "java/src/org/chromium/chrome/browser/settings/AdBlockEditor.java",
+  "java/src/org/chromium/chrome/browser/settings/AdBlockPreferences.java",
   "java/src/org/chromium/chrome/browser/policy/EnterpriseInfo.java",
   "java/src/org/chromium/chrome/browser/policy/PolicyAuditor.java",
   "java/src/org/chromium/chrome/browser/prerender/ChromePrerenderService.java",
diff --git a/chrome/android/java/res/layout/adblock_editor.xml b/chrome/android/java/res/layout/adblock_editor.xml
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/res/layout/adblock_editor.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright 2015 The Chromium Authors. All rights reserved.
+     Use of this source code is governed by a BSD-style license that can be
+     found in the LICENSE file. -->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/scroll_view"
+        android:fillViewport="true" >
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:focusableInTouchMode="true" >
+
+            <com.google.android.material.textfield.TextInputLayout
+                android:id="@+id/adblock_url"
+                android:paddingTop="16dp"
+                android:paddingStart="@dimen/pref_autofill_content_spacing"
+                android:paddingEnd="@dimen/pref_autofill_content_spacing"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content" >
+                <!-- TODO(crbug.com/900912): Fix and remove lint ignore -->
+                <EditText
+                    tools:ignore="Autofill"
+                    android:id="@+id/adblock_url_edit"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:inputType="textUri"
+                    android:singleLine="true"
+                    android:hint="@string/options_adblock_edit_label" />
+            </com.google.android.material.textfield.TextInputLayout>
+
+            <Space style="@style/ButtonBarTopSpacer" />
+            <View style="@style/ButtonBarTopDivider" />
+
+            <LinearLayout style="@style/ButtonBar" >
+                <org.chromium.ui.widget.ButtonCompat
+                    android:id="@+id/adblock_reset"
+                    style="@style/ButtonBarButton"
+                    android:text="@string/reset" />
+
+                <org.chromium.ui.widget.ButtonCompat
+                    android:id="@+id/adblock_cancel"
+                    style="@style/ButtonBarButton"
+                    android:text="@string/cancel" />
+
+                <org.chromium.ui.widget.ButtonCompat
+                    android:id="@+id/adblock_save"
+                    style="@style/ButtonBarButton"
+                    android:text="@string/save" />
+            </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+
+    <include layout="@layout/settings_action_bar_shadow"/>
+
+</FrameLayout>
diff --git a/chrome/android/java/res/values/values.xml b/chrome/android/java/res/values/values.xml
--- a/chrome/android/java/res/values/values.xml
+++ b/chrome/android/java/res/values/values.xml
@@ -32,6 +32,8 @@
     <integer name="reload_button_level_reload">0</integer>
     <integer name="reload_button_level_stop">1</integer>
 
+    <string name="adblock_help_url">https://www.bromite.org/custom-filters</string>
+
     <string name="proxy_title">Proxy configuration</string>
     <string name="proxy_url">chrome://proxy</string>
 
diff --git a/chrome/android/java/res/xml/adblock_preferences.xml b/chrome/android/java/res/xml/adblock_preferences.xml
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/res/xml/adblock_preferences.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright 2015 The Chromium Authors. All rights reserved.
+     Use of this source code is governed by a BSD-style license that can be
+     found in the LICENSE file. -->
+
+<PreferenceScreen
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
+        android:key="adblock_switch"
+        android:summaryOn="@string/text_on"
+        android:summaryOff="@string/text_off" />
+
+    <org.chromium.chrome.browser.about_settings.HyperlinkPreference
+        android:key="adblock_help"
+        android:title="@string/adblock_help"
+        app:url="@string/adblock_help_url" />
+
+    <Preference
+        android:key="adblock_edit"
+        android:title="@string/options_adblock_edit_label"
+        android:fragment="org.chromium.chrome.browser.settings.AdBlockEditor" />
+
+</PreferenceScreen>
diff --git a/chrome/android/java/res/xml/main_preferences.xml b/chrome/android/java/res/xml/main_preferences.xml
--- a/chrome/android/java/res/xml/main_preferences.xml
+++ b/chrome/android/java/res/xml/main_preferences.xml
@@ -90,6 +90,11 @@
         android:key="privacy"
         android:order="18"
         android:title="@string/prefs_privacy"/>
+    <Preference
+        android:fragment="org.chromium.chrome.browser.settings.AdBlockPreferences"
+        android:key="adblock"
+        android:order="13"
+        android:title="@string/prefs_adblock"/>
     <Preference
         android:fragment="org.chromium.chrome.browser.accessibility.settings.AccessibilitySettings"
         android:key="accessibility"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockEditor.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockEditor.java
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockEditor.java
@@ -0,0 +1,92 @@
+// Copyright 2015 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.chrome.browser.settings;
+
+import android.os.Bundle;
+import androidx.fragment.app.Fragment;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.EditText;
+
+import org.chromium.components.browser_ui.settings.SettingsUtils;
+import org.chromium.chrome.browser.flags.CachedFeatureFlags;
+import org.chromium.chrome.R;
+import org.chromium.components.url_formatter.UrlFormatter;
+
+/**
+ * Provides the Java-UI for editing AdBlock preferences.
+ */
+public class AdBlockEditor extends Fragment implements TextWatcher {
+    private EditText mAdBlockFiltersUrlEdit;
+    private Button mSaveButton;
+    private Button mResetButton;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+            Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        getActivity().setTitle(R.string.options_adblock_edit_title);
+
+        View v = inflater.inflate(R.layout.adblock_editor, container, false);
+        View scrollView = v.findViewById(R.id.scroll_view);
+        scrollView.getViewTreeObserver().addOnScrollChangedListener(
+                SettingsUtils.getShowShadowOnScrollListener(v, v.findViewById(R.id.shadow)));
+        mAdBlockFiltersUrlEdit = (EditText) v.findViewById(R.id.adblock_url_edit);
+        mAdBlockFiltersUrlEdit.setText(CachedFeatureFlags.getAdBlockFiltersURL());
+        mAdBlockFiltersUrlEdit.addTextChangedListener(this);
+        mAdBlockFiltersUrlEdit.requestFocus();
+
+        initializeSaveCancelResetButtons(v);
+        return v;
+    }
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+        mSaveButton.setEnabled(s.length() != 0);
+        mResetButton.setEnabled(true);
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+    }
+
+    private void initializeSaveCancelResetButtons(View v) {
+        mResetButton = (Button) v.findViewById(R.id.adblock_reset);
+        mResetButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mAdBlockFiltersUrlEdit.setText(CachedFeatureFlags.getAdBlockFiltersURL());
+                getActivity().finish();
+            }
+        });
+
+        mSaveButton = (Button) v.findViewById(R.id.adblock_save);
+        mSaveButton.setEnabled(false);
+        mSaveButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                CachedFeatureFlags.setAdBlockFiltersURL(
+                        UrlFormatter.fixupUrl(mAdBlockFiltersUrlEdit.getText().toString()).getSpec());
+                getActivity().finish();
+            }
+        });
+
+        Button button = (Button) v.findViewById(R.id.adblock_cancel);
+        button.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                getActivity().finish();
+            }
+        });
+    }
+}
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockPreferences.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockPreferences.java
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/AdBlockPreferences.java
@@ -0,0 +1,61 @@
+// Copyright 2015 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.chrome.browser.settings;
+
+import android.os.Bundle;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceFragmentCompat;
+import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
+
+import org.chromium.components.embedder_support.browser_context.BrowserContextHandle;
+import org.chromium.components.browser_ui.site_settings.SiteSettingsPreferenceFragment;
+import org.chromium.components.browser_ui.site_settings.WebsitePreferenceBridge;
+import org.chromium.components.content_settings.ContentSettingsType;
+import org.chromium.components.browser_ui.settings.SettingsUtils;
+import org.chromium.chrome.browser.flags.CachedFeatureFlags;
+import androidx.annotation.VisibleForTesting;
+import org.chromium.chrome.R;
+
+/**
+ * Fragment that allows the user to configure AdBlock related preferences.
+ */
+public class AdBlockPreferences extends SiteSettingsPreferenceFragment {
+    @VisibleForTesting
+    public static final String PREF_ADBLOCK_SWITCH = "adblock_switch";
+    private static final String PREF_ADBLOCK_EDIT = "adblock_edit";
+
+    private Preference mAdBlockEdit;
+
+    @Override
+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+        getActivity().setTitle(R.string.options_adblock_title);
+        SettingsUtils.addPreferencesFromResource(this, R.xml.adblock_preferences);
+
+        BrowserContextHandle browserContextHandle =
+                getSiteSettingsClient().getBrowserContextHandle();
+
+        ChromeSwitchPreference mAdBlockSwitch =
+                (ChromeSwitchPreference) findPreference(PREF_ADBLOCK_SWITCH);
+        boolean isAdBlockEnabled = !WebsitePreferenceBridge.isCategoryEnabled(browserContextHandle, ContentSettingsType.ADS);
+        mAdBlockSwitch.setChecked(isAdBlockEnabled);
+        mAdBlockSwitch.setOnPreferenceChangeListener((preference, newValue) -> {
+            WebsitePreferenceBridge.setCategoryEnabled(browserContextHandle, ContentSettingsType.ADS, !(boolean) newValue);
+            return true;
+        });
+
+        mAdBlockEdit = findPreference(PREF_ADBLOCK_EDIT);
+        updateCurrentAdBlockUrl();
+    }
+
+    private void updateCurrentAdBlockUrl() {
+        mAdBlockEdit.setSummary(CachedFeatureFlags.getAdBlockFiltersURL());
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateCurrentAdBlockUrl();
+    }
+}
diff --git a/chrome/app/generated_resources.grd b/chrome/app/generated_resources.grd
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -10208,6 +10208,16 @@ Please help our engineers fix this problem. Tell us what happened right before y
       Never show this again.
     </message>
 
+    <!-- Ad Blocking preferences -->
+    <if expr="is_android">
+      <message name="IDS_OPTIONS_ADBLOCK_TITLE" desc="The title of the Ad Blocking option on Android" formatter_data="android_java">
+        Ad Blocking
+      </message>
+      <message name="IDS_OPTIONS_ADBLOCK_SUMMARY" desc="The title of the Ad Blocking summary on Android" formatter_data="android_java">
+        Configure Ad Blocking and filters URL
+      </message>
+    </if>
+
     <!-- Ad Blocking UI strings. -->
     <message name="IDS_ALWAYS_ALLOW_ADS" desc="Explanation associated with a toggle to allow ads after ads have been blocked on the page. To be used on pages where the ad blocking UI is governed by a persistent permissions-based allowlist.">
       Always allow ads on this site
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -1073,7 +1073,8 @@ BrowserProcessImpl::adblock_updater() {
   adblock_updater_ = std::make_unique<adblock_updater::AdBlockUpdaterService>(
           g_browser_process->system_network_context_manager()->GetSharedURLLoaderFactory(),
           std::move(scheduler),
-          g_browser_process->subresource_filter_ruleset_service());
+          g_browser_process->subresource_filter_ruleset_service(),
+          local_state()->GetString(prefs::kAdBlockFiltersURL));
 
   return adblock_updater_.get();
 }
diff --git a/chrome/browser/flags/android/cached_feature_flags.cc b/chrome/browser/flags/android/cached_feature_flags.cc
--- a/chrome/browser/flags/android/cached_feature_flags.cc
+++ b/chrome/browser/flags/android/cached_feature_flags.cc
@@ -8,6 +8,9 @@
 
 #include "base/android/jni_string.h"
 #include "base/feature_list.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/common/pref_names.h"
+#include "components/prefs/pref_service.h"
 #include "content/public/common/content_features.h"
 #include "content/public/common/network_service_util.h"
 
@@ -41,3 +44,11 @@ static jboolean JNI_CachedFeatureFlags_IsNetworkServiceWarmUpEnabled(
   return content::IsOutOfProcessNetworkService() &&
          base::FeatureList::IsEnabled(features::kWarmUpNetworkProcess);
 }
+
+static ScopedJavaLocalRef<jstring> JNI_CachedFeatureFlags_GetAdBlockFiltersURL(JNIEnv* env) {
+  return base::android::ConvertUTF8ToJavaString(env, g_browser_process->local_state()->GetString(prefs::kAdBlockFiltersURL));
+}
+
+static void JNI_CachedFeatureFlags_SetAdBlockFiltersURL(JNIEnv* env, const JavaParamRef<jstring>& url) {
+  g_browser_process->local_state()->SetString(prefs::kAdBlockFiltersURL, base::android::ConvertJavaStringToUTF8(env, url));
+}
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
--- a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
@@ -248,6 +248,14 @@ public class CachedFeatureFlags {
                         ChromeFeatureList.REACHED_CODE_PROFILER, "sampling_interval_us", 0));
     }
 
+     public static void setAdBlockFiltersURL(String url) {
+         CachedFeatureFlagsJni.get().setAdBlockFiltersURL(url);
+     }
+
+     public static String getAdBlockFiltersURL() {
+         return CachedFeatureFlagsJni.get().getAdBlockFiltersURL();
+     }
+
     /**
      * Caches flags that must take effect on startup but are set via native code.
      */
@@ -400,5 +408,7 @@ public class CachedFeatureFlags {
     @NativeMethods
     interface Natives {
         boolean isNetworkServiceWarmUpEnabled();
+        void setAdBlockFiltersURL(String url);
+        String getAdBlockFiltersURL();
     }
 }
diff --git a/chrome/browser/net/system_network_context_manager.cc b/chrome/browser/net/system_network_context_manager.cc
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -331,6 +331,8 @@ SystemNetworkContextManager::SystemNetworkContextManager(
           SSLConfigServiceManager::CreateDefaultManager(local_state_)),
       proxy_config_monitor_(local_state_),
       stub_resolver_config_reader_(local_state_) {
+  local_state_->SetDefaultPrefValue(prefs::kAdBlockFiltersURL,
+                                    base::Value("https://www.bromite.org/filters/filters.dat"));
 #if !defined(OS_ANDROID)
   // QuicAllowed was not part of Android policy.
   const base::Value* value =
@@ -393,6 +395,8 @@ SystemNetworkContextManager::~SystemNetworkContextManager() {
 void SystemNetworkContextManager::RegisterPrefs(PrefRegistrySimple* registry) {
   StubResolverConfigReader::RegisterPrefs(registry);
 
+  registry->RegisterStringPref(prefs::kAdBlockFiltersURL, std::string());
+
   // Static auth params
   registry->RegisterStringPref(prefs::kAuthSchemes,
                                "basic,digest,ntlm,negotiate");
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -214,6 +214,20 @@ CHAR-LIMIT guidelines:
         Enter VR
       </message>
 
+      <!-- AdBlock settings -->
+      <message name="IDS_PREFS_ADBLOCK" desc="Title of the AdBlock Settings screen. [CHAR-LIMIT=32]">
+        AdBlock settings
+      </message>
+      <message name="IDS_OPTIONS_ADBLOCK_EDIT_TITLE" desc="The title of the screen that allows users to change the URL that is used to fetch the ad blocker filters.">
+        Edit filters URL
+      </message>
+      <message name="IDS_OPTIONS_ADBLOCK_EDIT_LABEL" desc="The label for the edit text field that allows the user to change the URL that is used to fetch the ad blocker filters.">
+        Filters URL
+      </message>
+      <message name="IDS_ADBLOCK_HELP" desc="The title of the hyperlink that allows users to visit the web page with instructions for custom ad blocker filters.">
+        Visit help page
+      </message>
+
       <!-- Notification channels -->
       <message name="IDS_NOTIFICATION_CATEGORY_GROUP_GENERAL" desc='Subheading for "General" section of a list of notification categories. [CHAR-LIMIT=32]'>
         General
diff --git a/chrome/common/pref_names.cc b/chrome/common/pref_names.cc
--- a/chrome/common/pref_names.cc
+++ b/chrome/common/pref_names.cc
@@ -2103,6 +2103,9 @@ const char kAudioCaptureAllowed[] = "hardware.audio_capture_enabled";
 // capture devices without prompt.
 const char kAudioCaptureAllowedUrls[] = "hardware.audio_capture_allowed_urls";
 
+// Holds the URL to an indexed subresource filters file.
+const char kAdBlockFiltersURL[] = "adblock.filters_url";
+
 // A pref holding the value of the policy used to explicitly allow or deny
 // access to video capture devices.  When enabled or not set, the user is
 // prompted for device access.  When disabled, access to video capture devices
diff --git a/chrome/common/pref_names.h b/chrome/common/pref_names.h
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -30,6 +30,7 @@ extern const char kDownloadRestrictions[];
 extern const char kForceEphemeralProfiles[];
 extern const char kHomePageIsNewTabPage[];
 extern const char kHomePage[];
+extern const char kAdBlockFiltersURL[];
 extern const char kImportantSitesDialogHistory[];
 extern const char kProfileCreationTime[];
 #if defined(OS_WIN)
diff --git a/components/component_updater/adblock_updater_service.cc b/components/component_updater/adblock_updater_service.cc
new file mode 100644
--- /dev/null
+++ b/components/component_updater/adblock_updater_service.cc
@@ -0,0 +1,249 @@
+/*
+    This file is part of Bromite.
+
+    Bromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Bromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+*/
+
+#include "components/component_updater/adblock_updater_service.h"
+
+#include <algorithm>
+#include <map>
+#include <string>
+#include <utility>
+#include <vector>
+
+#include "base/bind.h"
+#include "base/bind_helpers.h"
+#include "base/callback.h"
+#include "base/files/file_path.h"
+#include "base/files/file_util.h"
+#include "base/logging.h"
+#include "base/macros.h"
+#include "base/threading/thread_checker.h"
+#include "base/threading/thread_task_runner_handle.h"
+#include "base/time/time.h"
+#include "base/timer/timer.h"
+#include "url/gurl.h"
+#include "base/strings/safe_sprintf.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_split.h"
+namespace adblock_updater {
+
+// all constants express seconds
+// these could be made configurable
+const int initial_check_delay = 5,
+      next_check_delay = 60*60*24*7, // 1 week
+      on_demand_check_delay = 60; // minimum 1 minute between each on-demand check
+
+AdBlockUpdaterService::AdBlockUpdaterService(scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory, std::unique_ptr<component_updater::UpdateScheduler> scheduler,
+   subresource_filter::RulesetService* ruleset_service, std::string filters_url)
+ : ruleset_service_(ruleset_service), shared_url_network_factory_(shared_url_network_factory), scheduler_(std::move(scheduler)) {
+  DCHECK(ruleset_service);
+
+  filters_url_ = filters_url;
+}
+
+AdBlockUpdaterService::~AdBlockUpdaterService() {
+  DCHECK(thread_checker_.CalledOnValidThread());
+}
+
+void AdBlockUpdaterService::AddObserver(Observer* observer) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+  observer_list_.AddObserver(observer);
+}
+
+void AdBlockUpdaterService::RemoveObserver(Observer* observer) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+  observer_list_.RemoveObserver(observer);
+}
+
+//TODO: use this as in: base::Bind(&AdBlockUpdaterService::NotifyObservers, base::Unretained(this)
+void AdBlockUpdaterService::NotifyObservers(Event event) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+  for (auto& observer : observer_list_)
+    observer.OnEvent(event);
+}
+
+void AdBlockUpdaterService::Start() {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  // avoid multiple scheduling
+  if (scheduled_)
+    return;
+  scheduled_ = true;
+
+  LOG(INFO) << "AdBlockUpdaterService: starting up. "
+          << "First update attempt will take place in "
+          << initial_check_delay << " seconds. "
+          << "Next update attempt will take place in "
+          << next_check_delay << " seconds. ";
+
+  scheduler_->Schedule(
+      base::TimeDelta::FromSeconds(initial_check_delay),
+      base::TimeDelta::FromSeconds(next_check_delay),
+      base::Bind(&AdBlockUpdaterService::OnDemandScheduledUpdate,
+                 base::Unretained(this)), base::DoNothing());
+}
+
+void AdBlockUpdaterService::OnDemandScheduledUpdate(component_updater::UpdateScheduler::OnFinishedCallback on_finished) {
+  //TODO: call on_finished
+  OnDemandUpdateAsNeeded(false, Callback());
+}
+
+bool AdBlockUpdaterService::OnDemandUpdate(Callback on_finished) {
+  return OnDemandUpdateAsNeeded(true, std::move(on_finished));
+}
+
+bool AdBlockUpdaterService::OnDemandUpdateAsNeeded(bool is_foreground, Callback on_finished) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  // Check if the request is too soon.
+  if (!last_update_.is_null()) {
+    base::TimeDelta delta =
+        base::TimeTicks::Now() - last_update_;
+    if (is_updating_ || (delta < base::TimeDelta::FromSeconds(on_demand_check_delay)))
+      LOG(INFO) << "AdBlockUpdaterService: update not necessary.";
+      return false;
+  }
+
+  OnDemandUpdateInternal(is_foreground, std::move(on_finished));
+  return true;
+}
+
+void AdBlockUpdaterService::OnDemandUpdateInternal(bool is_foreground, Callback on_finished) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  if (is_updating_) {
+    base::ThreadTaskRunnerHandle::Get()->PostTask(
+        FROM_HERE, base::BindOnce(std::move(on_finished),
+                                    Error::UPDATE_IN_PROGRESS));
+    return;
+  }
+  is_updating_ = true;
+  last_update_ = base::TimeTicks::Now();
+
+  base::Time::Exploded e = {0};
+  base::Time t = base::Time();
+  auto version = ruleset_service_->GetMostRecentlyIndexedVersion();
+  LOG(INFO) << "AdBlockUpdaterService: MostRecentIndexedVersion = " << version.content_version;
+  std::vector<std::string> tokens =
+      base::SplitString(version.content_version, ".", base::KEEP_WHITESPACE, base::SPLIT_WANT_ALL);
+  int i = 0;
+  bool failed = false;
+  for (const std::string& token : tokens) {
+    // parse as number
+    int n = 0;
+    if (!base::StringToInt(token, &n)) {
+      failed = true;
+      break;
+    }
+
+    switch (i++) {
+      case 0:
+        e.year = 2019 + n;
+        break;
+      case 1:
+        e.month = n + 1;
+        break;
+      case 2:
+        e.day_of_month = n + 1;
+        break;
+      case 3:
+        e.second = n % 60;
+        n -= e.second;
+        n /= 60;
+        e.minute = n % 60;
+        e.hour = n / 60;
+        break;
+      default:
+        failed = true;
+        break;
+    }
+  }
+
+  if (failed) {
+    LOG(WARNING) << "AdBlockUpdaterService: failed to parse most recent version as x.y.z.w dot-separated integers";
+  } else {
+    if (!base::Time::FromUTCExploded(e, &t))
+      LOG(WARNING) << "AdBlockUpdaterService: failed to convert version to time.";
+  }
+
+  auto task = base::MakeRefCounted<DownloadFiltersTask>(
+      shared_url_network_factory_,
+      is_foreground, filters_url_,
+      t,
+      base::BindOnce(&AdBlockUpdaterService::OnUpdateComplete, base::Unretained(this),
+                     std::move(on_finished)));
+
+  // run task now; task is responsible for clearing the is_updating status
+  base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE,
+      base::BindOnce(&DownloadFiltersTask::Run, base::Unretained(task.get())));
+  tasks_.insert(task);
+}
+
+void AdBlockUpdaterService::OnUpdateComplete(Callback on_finished,
+                                        scoped_refptr<DownloadFiltersTask> task,
+                                        Error error) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  auto file_path = task->file_path();
+  if (error == Error::NONE) {
+    subresource_filter::UnindexedRulesetInfo ruleset_info;
+    ruleset_info.ruleset_path = file_path;
+    ruleset_info.delete_ruleset_path = true;
+    ruleset_info.content_version = "0.0.0.0";
+    DCHECK(!ruleset_info.ruleset_path.empty());
+
+    // convert time to version
+    auto t = task->last_modified();
+    bool ignore_version = t.is_null();
+    if (!ignore_version) {
+      base::Time::Exploded e;
+      t.UTCExplode(&e);
+
+      // convert time to version
+      const int major = e.year - 2019,
+                minor = e.month - 1,
+                patch = e.day_of_month - 1,
+                revision = (e.hour*60+e.minute)*60 + e.second;
+      if (major < 0)
+         LOG(WARNING) << "AdBlockUpdaterService: too old Last-Modified header, ignoring version check.";
+      else {
+        char version_buffer[32];
+        base::strings::SafeSNPrintf(version_buffer, sizeof(version_buffer), "%d.%d.%d.%d",
+                                major, minor, patch, revision);
+
+        ruleset_info.content_version = version_buffer;
+
+        LOG(INFO) << "AdBlockUpdaterService: indexing filters with version " << ruleset_info.content_version;
+      }
+    } else
+      LOG(WARNING) << "AdBlockUpdaterService: invalid Last-Modified header, ignoring version check.";
+    ruleset_service_->IndexAndStoreAndPublishRulesetIfNeeded(ruleset_info, ignore_version);
+  } else {
+    //TODO: generate event for ADBLOCK_NOT_UPDATED in case of error UPDATE_NOT_NEEDED
+  }
+
+  //TODO: run these only when index-and-store is actually finished?
+  if (!on_finished.is_null()) {
+    base::ThreadTaskRunnerHandle::Get()->PostTask(
+        FROM_HERE, base::BindOnce(std::move(on_finished), error));
+  }
+
+  // mark as not updating
+  is_updating_ = false;
+  tasks_.erase(task);
+}
+
+}  // namespace adblock_updater
diff --git a/components/component_updater/adblock_updater_service.h b/components/component_updater/adblock_updater_service.h
new file mode 100644
--- /dev/null
+++ b/components/component_updater/adblock_updater_service.h
@@ -0,0 +1,100 @@
+/*
+    This file is part of Bromite.
+
+    Bromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Bromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+*/
+
+#ifndef COMPONENTS_ADBLOCK_UPDATER_SERVICE_H
+#define COMPONENTS_ADBLOCK_UPDATER_SERVICE_H
+
+#include <stdint.h>
+
+#include <memory>
+#include <string>
+#include <vector>
+
+#include "base/callback_forward.h"
+#include "base/gtest_prod_util.h"
+#include "base/memory/ref_counted.h"
+#include "base/version.h"
+#include "build/build_config.h"
+#include "components/component_updater/update_scheduler.h"
+#include "url/gurl.h"
+#include "components/component_updater/download_filters_task.h"
+#include "components/subresource_filter/content/browser/ruleset_service.h"
+#include "services/network/public/cpp/shared_url_loader_factory.h"
+
+namespace adblock_updater {
+
+// Called when a non-blocking call in this module completes.
+using Callback = base::OnceCallback<void(Error error)>;
+
+class Observer {
+   public:
+    virtual ~Observer() {}
+
+    // Called by the update service when a state change happens.
+    virtual void OnEvent(Event event) = 0;
+};
+
+// The AdBlock update service is in charge of downloading and saving the
+// AdBlock filters.
+//
+// All methods are safe to call ONLY from the browser's main thread.
+class AdBlockUpdaterService {
+ public:
+  AdBlockUpdaterService(scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory, std::unique_ptr<component_updater::UpdateScheduler> scheduler,
+                        subresource_filter::RulesetService* ruleset_service, std::string filters_url);
+  ~AdBlockUpdaterService();
+
+  // Adds an observer for this class. An observer should not be added more
+  // than once. The caller retains the ownership of the observer object.
+  void AddObserver(Observer* observer);
+
+  // Removes an observer. It is safe for an observer to be removed while
+  // the observers are being notified.
+  void RemoveObserver(Observer* observer);
+
+  // Will schedule automatic updates, run in background.
+  void Start();
+
+  // To be called for an user-triggered update.
+  // Will not result in an actual update if the last update was too recently triggered.
+  bool OnDemandUpdate(Callback on_finished);
+
+ private:
+  void NotifyObservers(Event event);
+  void OnDemandScheduledUpdate(component_updater::UpdateScheduler::OnFinishedCallback on_finished);
+  bool OnDemandUpdateAsNeeded(bool is_foreground, Callback on_finished);
+  void OnDemandUpdateInternal(bool is_foreground, Callback on_finished);
+  void OnUpdateComplete(Callback callback, scoped_refptr<DownloadFiltersTask> task, Error error);
+
+  base::ObserverList<Observer>::Unchecked observer_list_;
+  base::ThreadChecker thread_checker_;
+  base::TimeTicks last_update_;
+
+  subresource_filter::RulesetService* ruleset_service_;
+  std::string filters_url_;
+
+  scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory_;
+  std::unique_ptr<component_updater::UpdateScheduler> scheduler_;
+
+  bool is_updating_ = false;
+  bool scheduled_ = false;
+  std::set<scoped_refptr<DownloadFiltersTask>> tasks_;
+};
+
+}  // namespace adblock_updater
+
+#endif  // COMPONENTS_ADBLOCK_UPDATER_SERVICE_H
diff --git a/components/component_updater/download_filters_task.cc b/components/component_updater/download_filters_task.cc
new file mode 100644
--- /dev/null
+++ b/components/component_updater/download_filters_task.cc
@@ -0,0 +1,222 @@
+/*
+    This file is part of Bromite.
+
+    Bromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Bromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+*/
+#include "components/component_updater/download_filters_task.h"
+
+#include <utility>
+
+#include "base/files/file_util.h"
+#include "base/bind.h"
+#include "base/location.h"
+#include "base/threading/thread_task_runner_handle.h"
+#include "base/logging.h"
+#include "net/base/load_flags.h"
+#include "url/gurl.h"
+
+namespace adblock_updater {
+
+// maximum 10MB for the filters file
+const int kMaxBodySize = 1024 * 1024 * 10;
+
+const int kMaxRetriesOnNetworkChange = 3;
+
+const net::NetworkTrafficAnnotationTag traffic_annotation =
+    net::DefineNetworkTrafficAnnotation("update_client", R"(
+        semantics {
+          sender: "Bromite AdBlock filters updater"
+          description:
+            "The AdBlock filters updater is responsible for updating the subresource filters."
+          trigger: "Manual or automatic AdBlock filters updates."
+          data:
+            "Subresource filters rulesets, binary format"
+          destination: WEBSITE
+        }
+        )");
+
+DownloadFiltersTask::DownloadFiltersTask(scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory,
+                       bool is_foreground, const std::string& filters_url, base::Time min_last_modified,
+                       Callback callback)
+    : shared_url_network_factory_(shared_url_network_factory),
+      is_foreground_(is_foreground),
+      complete_callback_(std::move(callback)) {
+  DCHECK(!filters_url.empty());
+  filters_url_ = GURL(filters_url);
+  min_last_modified_ = min_last_modified;
+
+  if (filters_url.empty()) {
+    return;
+  }
+
+  createSimpleURLLoader(!min_last_modified_.is_null());
+}
+
+void DownloadFiltersTask::createSimpleURLLoader(bool headers_only) {
+  // always reset response-related fields
+  response_code_ = -1;
+  final_url_ = GURL();
+  download_start_time_ = base::TimeTicks();
+
+  auto resource_request = std::make_unique<network::ResourceRequest>();
+  resource_request->url = filters_url_;
+  resource_request->credentials_mode = network::mojom::CredentialsMode::kOmit;
+  resource_request->load_flags = net::LOAD_BYPASS_CACHE | net::LOAD_DISABLE_CACHE | net::LOAD_DO_NOT_SAVE_COOKIES;
+  resource_request->credentials_mode = network::mojom::CredentialsMode::kOmit;
+  if (headers_only)
+    // will chain two requests - first one is to check last modified header alone
+    resource_request->method = "HEAD";
+  else
+    resource_request->method = "GET";
+
+  simple_url_loader_ = network::SimpleURLLoader::Create(
+      std::move(resource_request), traffic_annotation);
+  simple_url_loader_->SetRetryOptions(
+      kMaxRetriesOnNetworkChange,
+      network::SimpleURLLoader::RetryMode::RETRY_ON_NETWORK_CHANGE);
+  simple_url_loader_->SetAllowPartialResults(false);
+  simple_url_loader_->SetOnResponseStartedCallback(base::BindOnce(
+      &DownloadFiltersTask::OnResponseStarted, base::Unretained(this)));
+}
+
+DownloadFiltersTask::~DownloadFiltersTask() {
+  DCHECK(thread_checker_.CalledOnValidThread());
+}
+
+void DownloadFiltersTask::Run() {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  // will not be initialized if the URL was empty
+  if (!simple_url_loader_) {
+    TaskComplete(Error::INVALID_ARGUMENT);
+    return;
+  }
+
+  download_start_time_ = base::TimeTicks::Now();
+  if (min_last_modified_.is_null()) {
+    internalDownload();
+  } else {
+    simple_url_loader_->DownloadHeadersOnly(
+      shared_url_network_factory_.get(),
+      base::BindOnce(&DownloadFiltersTask::OnHeadersDownloadComplete, base::Unretained(this))
+    );
+  }
+}
+
+void DownloadFiltersTask::internalDownload() {
+  simple_url_loader_->DownloadToTempFile(
+      shared_url_network_factory_.get(),
+      base::BindOnce(&DownloadFiltersTask::OnDownloadComplete, base::Unretained(this)),
+      kMaxBodySize);
+}
+
+void DownloadFiltersTask::OnHeadersDownloadComplete(scoped_refptr<net::HttpResponseHeaders> headers) {
+  // something went wrong
+  if (headers == nullptr) {
+    OnDownloadComplete(base::FilePath());
+    return;
+  }
+
+  // ignoring 'headers' as 'Last-Modified' has already been picked up by OnResponseStarted
+  const base::TimeDelta dt =
+          last_modified_ - min_last_modified_;
+
+  if (dt.InSeconds() > 0) {
+    // prepare for next simple URL loader and trigger download
+    createSimpleURLLoader(false);
+    internalDownload();
+    return;
+  }
+
+  // the remote filters are not more recent than known ones
+  TaskComplete(Error::UPDATE_NOT_NEEDED);
+}
+
+void DownloadFiltersTask::OnResponseStarted(
+    const GURL& final_url,
+    const network::mojom::URLResponseHead& response_head) {
+
+  final_url_ = final_url;
+  response_code_ = response_head.headers ? response_head.headers->response_code() : -1;
+
+  if (!response_head.headers->GetLastModifiedValue(&last_modified_))
+    LOG(WARNING) << "DownloadFiltersTask: fetching URL '" << final_url.spec() << "' with method " << (min_last_modified_.is_null() ? "GET" : "HEAD") << " (no Last-Modified header)";
+  else
+    LOG(INFO) << "DownloadFiltersTask: fetching URL '" << final_url.spec() << "' with method " << (min_last_modified_.is_null() ? "GET" : "HEAD");
+}
+
+void DownloadFiltersTask::OnDownloadComplete(base::FilePath file_path) {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  int net_error = simple_url_loader_->NetError();
+  int64_t content_size = simple_url_loader_->GetContentSize();
+
+  const base::TimeTicks download_end_time(base::TimeTicks::Now());
+  const base::TimeDelta download_time =
+      download_end_time >= download_start_time_
+          ? download_end_time - download_start_time_
+          : base::TimeDelta();
+
+  // Consider a 5xx response from the server as an indication to terminate
+  // the request and avoid overloading the server in this case.
+  // is not accepting requests for the moment.
+  int error = -1;
+  if (!file_path.empty() && response_code_ == 200) {
+    DCHECK_EQ(0, net_error);
+    error = 0;
+  } else if (response_code_ != -1) {
+    error = response_code_;
+  } else {
+    error = net_error;
+  }
+
+  LOG(INFO) << "DownloadFiltersTask: downloaded " << content_size << " bytes in "
+          << download_time.InMilliseconds() << "ms from '" << final_url_.spec()
+          << "' to '" << file_path << "' with net_error " << net_error << " and error " << error;
+
+  if (error) {
+    TaskComplete(Error::DOWNLOAD_ERROR);
+    return;
+  }
+
+  file_path_ = file_path;
+  TaskComplete(Error::NONE);
+}
+
+void DownloadFiltersTask::Cancel() {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  LOG(INFO) << "DownloadFiltersTask: update cancelled";
+
+  // deletion of the simple_url_loader_ will cause cancellation of its active request, if any
+
+  TaskComplete(Error::UPDATE_CANCELED);
+}
+
+void DownloadFiltersTask::TaskComplete(Error error) {
+  DCHECK(thread_checker_.CalledOnValidThread());
+
+  base::ThreadTaskRunnerHandle::Get()->PostTask(
+      FROM_HERE, base::BindOnce(std::move(complete_callback_),
+                                scoped_refptr<DownloadFiltersTask>(this), error));
+}
+
+base::Time DownloadFiltersTask::last_modified() {
+  return last_modified_;
+}
+
+base::FilePath DownloadFiltersTask::file_path() {
+  return file_path_;
+}
+
+}  // namespace adblock_updater
diff --git a/components/component_updater/download_filters_task.h b/components/component_updater/download_filters_task.h
new file mode 100644
--- /dev/null
+++ b/components/component_updater/download_filters_task.h
@@ -0,0 +1,129 @@
+/*
+    This file is part of Bromite.
+
+    Bromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Bromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+*/
+
+#ifndef COMPONENTS_DOWNLOAD_FILTERS_TASK_H_
+#define COMPONENTS_DOWNLOAD_FILTERS_TASK_H_
+
+#include <string>
+#include <vector>
+
+#include "base/callback.h"
+#include "base/macros.h"
+#include "base/memory/ref_counted.h"
+#include "base/threading/thread_checker.h"
+#include "components/update_client/network.h"
+#include "url/gurl.h"
+#include "base/files/file_path.h"
+#include "services/network/public/cpp/shared_url_loader_factory.h"
+#include "services/network/public/cpp/simple_url_loader.h"
+
+namespace adblock_updater {
+
+// Errors generated as a result of calling Run() or by the service itself (UPDATE_IN_PROGRESS or UPDATE_CANCELED)
+enum class Error {
+  NONE = 0,
+  UPDATE_IN_PROGRESS = 1,
+  UPDATE_CANCELED = 2,
+  UPDATE_NOT_NEEDED = 3,
+  DOWNLOAD_ERROR = 4,
+  INVALID_ARGUMENT = 5,
+  MAX_VALUE,
+};
+
+enum class Event {
+      // Sent before the update client does an update check.
+      ADBLOCK_CHECKING_FOR_UPDATES = 1,
+
+      // Sent after the new filters have been downloaded but before the install
+      // or the upgrade is attempted.
+      ADBLOCK_UPDATE_READY,
+
+      // Sent when filters are being downloaded.
+      ADBLOCK_UPDATE_DOWNLOADING,
+
+      // Sent when filters have been successfully updated.
+      ADBLOCK_UPDATED,
+
+      // Sent when filters have not been updated because there
+      // was no new version available
+      //TODO: implement this with the headers check
+      ADBLOCK_NOT_UPDATED,
+
+      // Sent when an error ocurred during an update for any reason, including
+      // the update check itself failed, or the download of the update payload
+      // failed, or applying the update failed.
+      ADBLOCK_UPDATE_ERROR,
+};
+
+// Defines a specialized task for updating AdBlock filters.
+class DownloadFiltersTask : public base::RefCounted<DownloadFiltersTask> {
+ public:
+  using Callback =
+      base::OnceCallback<void(scoped_refptr<DownloadFiltersTask> task, Error error)>;
+
+  // |shared_url_network_factory| is injected here for the URL loader factory.
+  // |is_foreground| is true when the update task is initiated by the user.
+  // |filters_url| is the URL to load filters from.
+  // |complete_callback| is called to return the execution flow back to creator of
+  //    this task when the task is done.
+  DownloadFiltersTask(scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory,
+                       bool is_foreground, const std::string& filters_url, base::Time min_last_modified,
+                       Callback complete_callback);
+
+  void Run();
+
+  void Cancel();
+
+  base::FilePath file_path();
+
+  base::Time last_modified();
+
+ private:
+  ~DownloadFiltersTask();
+
+  void OnDownloadProgress(uint64_t current);
+  void OnResponseStarted(const GURL& final_url,
+                         const network::mojom::URLResponseHead& response_head);
+  void OnDownloadComplete(base::FilePath file_path);
+  void OnHeadersDownloadComplete(scoped_refptr<net::HttpResponseHeaders> headers);
+  void createSimpleURLLoader(bool);
+  void internalDownload();
+
+  // Called when the task has completed either because the task has run or
+  // it has been canceled.
+  void TaskComplete(Error error);
+
+  base::ThreadChecker thread_checker_;
+  scoped_refptr<network::SharedURLLoaderFactory> shared_url_network_factory_;
+  const bool is_foreground_;
+  Callback complete_callback_;
+  std::unique_ptr<network::SimpleURLLoader> simple_url_loader_;
+
+  // fields populated while downloading
+  base::TimeTicks download_start_time_;
+  GURL final_url_, filters_url_;
+  int response_code_;
+  base::Time last_modified_, min_last_modified_;
+  base::FilePath file_path_;
+
+  friend class base::RefCounted<DownloadFiltersTask>;
+  DISALLOW_COPY_AND_ASSIGN(DownloadFiltersTask);
+};
+
+}  // namespace update_client
+
+#endif  // COMPONENTS_DOWNLOAD_FILTERS_TASK_H_
-- 
2.17.1

