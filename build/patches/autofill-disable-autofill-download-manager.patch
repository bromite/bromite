From: Jan Engelhardt <jengelh@inai.de>
Date: Thu, 11 Sep 2014 16:37:32 +0200
Subject: autofill: disable autofill download manager

Disables the autofill download manager (trk:158).
---
 .../core/browser/autofill_download_manager.h  | 25 ++++++++++---------
 .../autofill/core/browser/autofill_handler.cc | 17 -------------
 2 files changed, 13 insertions(+), 29 deletions(-)

diff --git a/components/autofill/core/browser/autofill_download_manager.h b/components/autofill/core/browser/autofill_download_manager.h
--- a/components/autofill/core/browser/autofill_download_manager.h
+++ b/components/autofill/core/browser/autofill_download_manager.h
@@ -77,18 +77,6 @@ class AutofillDownloadManager {
     virtual ~Observer() {}
   };
 
-  // |driver| must outlive this instance.
-  // |observer| - observer to notify on successful completion or error.
-  // Uses an API callback function that gives an empty string.
-  AutofillDownloadManager(AutofillDriver* driver, Observer* observer);
-  // |driver| must outlive this instance.
-  // |observer| - observer to notify on successful completion or error.
-  // |api_key| - API key to add to API request query parameters. Will only take
-  //   effect if using API.
-  AutofillDownloadManager(AutofillDriver* driver,
-                          Observer* observer,
-                          const std::string& api_key,
-                          LogManager* log_manager);
   virtual ~AutofillDownloadManager();
 
   // Starts a query request to Autofill servers. The observer is called with the
@@ -130,6 +118,19 @@ class AutofillDownloadManager {
   virtual size_t GetPayloadLength(base::StringPiece payload) const;
 
  private:
+  // |driver| must outlive this instance.
+  // |observer| - observer to notify on successful completion or error.
+  // Uses an API callback function that gives an empty string.
+  AutofillDownloadManager(AutofillDriver* driver, Observer* observer);
+  // |driver| must outlive this instance.
+  // |observer| - observer to notify on successful completion or error.
+  // |api_key| - API key to add to API request query parameters. Will only take
+  //   effect if using API.
+  AutofillDownloadManager(AutofillDriver* driver,
+                          Observer* observer,
+                          const std::string& api_key,
+                          LogManager* log_manager);
+
   friend class AutofillDownloadManagerTest;
   friend struct ScopedActiveAutofillExperiments;
   FRIEND_TEST_ALL_PREFIXES(AutofillDownloadManagerTest, QueryAndUploadTest);
diff --git a/components/autofill/core/browser/autofill_handler.cc b/components/autofill/core/browser/autofill_handler.cc
--- a/components/autofill/core/browser/autofill_handler.cc
+++ b/components/autofill/core/browser/autofill_handler.cc
@@ -57,19 +57,6 @@ bool CachedFormNeedsUpdate(const FormData& live_form,
   return false;
 }
 
-std::string GetAPIKeyForUrl(version_info::Channel channel) {
-  // First look if we can get API key from command line flag.
-  const base::CommandLine& command_line =
-      *base::CommandLine::ForCurrentProcess();
-  if (command_line.HasSwitch(switches::kAutofillAPIKey))
-    return command_line.GetSwitchValueASCII(switches::kAutofillAPIKey);
-
-  // Get the API key from Chrome baked keys.
-  if (channel == version_info::Channel::STABLE)
-    return google_apis::GetAPIKey();
-  return google_apis::GetNonStableAPIKey();
-}
-
 }  // namespace
 
 using base::TimeTicks;
@@ -110,10 +97,6 @@ AutofillHandler::AutofillHandler(
     : driver_(driver),
       log_manager_(log_manager),
       is_rich_query_enabled_(IsRichQueryEnabled(channel)) {
-  if (enable_download_manager == ENABLE_AUTOFILL_DOWNLOAD_MANAGER) {
-    download_manager_ = std::make_unique<AutofillDownloadManager>(
-        driver, this, GetAPIKeyForUrl(channel), log_manager);
-  }
 }
 
 AutofillHandler::~AutofillHandler() = default;
-- 
2.17.1

